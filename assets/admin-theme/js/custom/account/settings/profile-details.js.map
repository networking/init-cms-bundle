{"version":3,"file":"profile-details.js","names":["KTAccountSettingsProfileDetails","form","validation","init","document","getElementById","querySelector","FormValidation","formValidation","fields","fname","validators","notEmpty","message","lname","company","phone","country","timezone","language","plugins","trigger","Trigger","submitButton","SubmitButton","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","$","on","revalidateField","KTUtil","onDOMContentLoaded"],"sources":["account/settings/profile-details.js"],"mappings":"AAAA,aAGA,IAAIA,gCAAkC,WAElC,IAAIC,EAEAC,EAiIJ,MAAO,CACHC,KAAM,YACFF,EAAOG,SAASC,eAAe,sCAMhBJ,EAAKK,cAAc,sCApItCJ,EAAaK,eAAeC,eACxBP,EACA,CACIQ,OAAQ,CACJC,MAAO,CACHC,WAAY,CACRC,SAAU,CACNC,QAAS,4BAIrBC,MAAO,CACHH,WAAY,CACRC,SAAU,CACNC,QAAS,2BAIrBE,QAAS,CACLJ,WAAY,CACRC,SAAU,CACNC,QAAS,8BAIrBG,MAAO,CACHL,WAAY,CACRC,SAAU,CACNC,QAAS,sCAIrBI,QAAS,CACLN,WAAY,CACRC,SAAU,CACNC,QAAS,6BAIrBK,SAAU,CACNP,WAAY,CACRC,SAAU,CACNC,QAAS,8BAIrB,kBAAmB,CACfF,WAAY,CACRC,SAAU,CACNC,QAAS,qDAIrBM,SAAU,CACNR,WAAY,CACRC,SAAU,CACNC,QAAS,+BAKzBO,QAAS,CACLC,QAAS,IAAId,eAAea,QAAQE,QACpCC,aAAc,IAAIhB,eAAea,QAAQI,aAEzCC,UAAW,IAAIlB,eAAea,QAAQM,WAAW,CAC7CC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAO/BC,EAAE7B,EAAKK,cAAc,qBAAqByB,GAAG,UAAU,WAEnD7B,EAAW8B,gBAAgB,UAC/B,IAEAF,EAAE7B,EAAKK,cAAc,sBAAsByB,GAAG,UAAU,WAEpD7B,EAAW8B,gBAAgB,WAC/B,IAEAF,EAAE7B,EAAKK,cAAc,sBAAsByB,GAAG,UAAU,WAEpD7B,EAAW8B,gBAAgB,WAC/B,IA+CA,EAER,CAlJsC,GAqJtCC,OAAOC,oBAAmB,WACtBlC,gCAAgCG,MACpC","sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTAccountSettingsProfileDetails = function () {\n    // Private variables\n    var form;\n    var submitButton;\n    var validation;\n\n    // Private functions\n    var initValidation = function () {\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        validation = FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    fname: {\n                        validators: {\n                            notEmpty: {\n                                message: 'First name is required'\n                            }\n                        }\n                    },\n                    lname: {\n                        validators: {\n                            notEmpty: {\n                                message: 'Last name is required'\n                            }\n                        }\n                    },\n                    company: {\n                        validators: {\n                            notEmpty: {\n                                message: 'Company name is required'\n                            }\n                        }\n                    },\n                    phone: {\n                        validators: {\n                            notEmpty: {\n                                message: 'Contact phone number is required'\n                            }\n                        }\n                    },\n                    country: {\n                        validators: {\n                            notEmpty: {\n                                message: 'Please select a country'\n                            }\n                        }\n                    },\n                    timezone: {\n                        validators: {\n                            notEmpty: {\n                                message: 'Please select a timezone'\n                            }\n                        }\n                    },\n                    'communication[]': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Please select at least one communication method'\n                            }\n                        }\n                    },\n                    language: {\n                        validators: {\n                            notEmpty: {\n                                message: 'Please select a language'\n                            }\n                        }\n                    },\n                },\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    submitButton: new FormValidation.plugins.SubmitButton(),\n                    //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n        );\n\n        // Select2 validation integration\n        $(form.querySelector('[name=\"country\"]')).on('change', function() {\n            // Revalidate the color field when an option is chosen\n            validation.revalidateField('country');\n        });\n\n        $(form.querySelector('[name=\"language\"]')).on('change', function() {\n            // Revalidate the color field when an option is chosen\n            validation.revalidateField('language');\n        });\n\n        $(form.querySelector('[name=\"timezone\"]')).on('change', function() {\n            // Revalidate the color field when an option is chosen\n            validation.revalidateField('timezone');\n        });\n    }\n\n    var handleForm = function () {\n        submitButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            validation.validate().then(function (status) {\n                if (status == 'Valid') {\n\n                    swal.fire({\n                        text: \"Thank you! You've updated your basic info\",\n                        icon: \"success\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn fw-bold btn-light-primary\"\n                        }\n                    });\n\n                } else {\n                    swal.fire({\n                        text: \"Sorry, looks like there are some errors detected, please try again.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn fw-bold btn-light-primary\"\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    // Public methods\n    return {\n        init: function () {\n            form = document.getElementById('kt_account_profile_details_form');\n            \n            if (!form) {\n                return;\n            }\n\n            submitButton = form.querySelector('#kt_account_profile_details_submit');\n\n            initValidation();\n        }\n    }\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function() {\n    KTAccountSettingsProfileDetails.init();\n});\n"]}