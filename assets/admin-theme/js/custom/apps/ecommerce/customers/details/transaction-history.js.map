{"version":3,"file":"transaction-history.js","names":["KTCustomerViewPaymentTable","datatable","table","document","querySelector","init","querySelectorAll","forEach","row","dateRow","realDate","moment","innerHTML","format","setAttribute","$","DataTable","info","order","pageLength","lengthChange","columnDefs","orderable","targets","d","addEventListener","e","preventDefault","parent","target","closest","invoiceNumber","innerText","Swal","fire","text","icon","showCancelButton","buttonsStyling","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","result","value","remove","draw","toggleToolbars","dismiss","customerName","KTUtil","onDOMContentLoaded"],"sources":["apps/ecommerce/customers/details/transaction-history.js"],"mappings":"AAAA,aAGA,IAAIA,2BAA6B,WAG7B,IAAIC,EACAC,EAAQC,SAASC,cAAc,+BAuFnC,MAAO,CACHC,KAAM,WACGH,IApFSA,EAAMI,iBAAiB,YAE/BC,SAAQC,IACd,MAAMC,EAAUD,EAAIF,iBAAiB,MAC/BI,EAAWC,OAAOF,EAAQ,GAAGG,UAAW,mBAAmBC,SACjEJ,EAAQ,GAAGK,aAAa,aAAcJ,EAAS,IAInDT,EAAYc,EAAEb,GAAOc,UAAU,CAC3BC,MAAQ,EACRC,MAAS,GACTC,WAAc,EACdC,cAAgB,EAChBC,WAAc,CACV,CAAEC,WAAW,EAAOC,QAAS,MAQfrB,EAAMI,iBAAiB,gDAE/BC,SAAQiB,IAElBA,EAAEC,iBAAiB,SAAS,SAAUC,GAClCA,EAAEC,iBAGF,MAAMC,EAASF,EAAEG,OAAOC,QAAQ,MAG1BC,EAAgBH,EAAOtB,iBAAiB,MAAM,GAAG0B,UAGvDC,KAAKC,KAAK,CACNC,KAAM,mCAAqCJ,EAAgB,IAC3DK,KAAM,UACNC,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAmB,eACnBC,iBAAkB,aAClBC,YAAa,CACTC,cAAe,yBACfC,aAAc,0CAEnBC,MAAK,SAAUC,GACVA,EAAOC,MACPb,KAAKC,KAAK,CACNC,KAAM,oBAAsBJ,EAAgB,KAC5CK,KAAM,UACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,6BAEpBE,MAAK,WAEJ3C,EAAUO,IAAIO,EAAEa,IAASmB,SAASC,MACtC,IAAGJ,MAAK,WAEJK,gBACJ,IAC0B,WAAnBJ,EAAOK,SACdjB,KAAKC,KAAK,CACNC,KAAMgB,aAAe,oBACrBf,KAAM,QACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,4BAI/B,GACJ,GAAC,IAaL,EAER,CArGiC,GAwGjCU,OAAOC,oBAAmB,WACtBrD,2BAA2BK,MAC/B","sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTCustomerViewPaymentTable = function () {\n\n    // Define shared variables\n    var datatable;\n    var table = document.querySelector('#kt_table_customers_payment');\n\n    // Private functions\n    var initCustomerView = function () {\n        // Set date data order\n        const tableRows = table.querySelectorAll('tbody tr');\n\n        tableRows.forEach(row => {\n            const dateRow = row.querySelectorAll('td');\n            const realDate = moment(dateRow[3].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 4th column in table\n            dateRow[3].setAttribute('data-order', realDate);\n        });\n\n        // Init datatable --- more info on datatables: https://datatables.net/manual/\n        datatable = $(table).DataTable({\n            \"info\": false,\n            'order': [],\n            \"pageLength\": 5,\n            \"lengthChange\": false,\n            'columnDefs': [\n                { orderable: false, targets: 4 }, // Disable ordering on column 5 (actions)\n            ]\n        });\n    }\n\n    // Delete customer\n    var deleteRows = () => {\n        // Select all delete buttons\n        const deleteButtons = table.querySelectorAll('[data-kt-customer-table-filter=\"delete_row\"]');\n        \n        deleteButtons.forEach(d => {\n            // Delete button on click\n            d.addEventListener('click', function (e) {\n                e.preventDefault();\n\n                // Select parent row\n                const parent = e.target.closest('tr');\n\n                // Get customer name\n                const invoiceNumber = parent.querySelectorAll('td')[0].innerText;\n\n                // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n                Swal.fire({\n                    text: \"Are you sure you want to delete \" + invoiceNumber + \"?\",\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    buttonsStyling: false,\n                    confirmButtonText: \"Yes, delete!\",\n                    cancelButtonText: \"No, cancel\",\n                    customClass: {\n                        confirmButton: \"btn fw-bold btn-danger\",\n                        cancelButton: \"btn fw-bold btn-active-light-primary\"\n                    }\n                }).then(function (result) {\n                    if (result.value) {\n                        Swal.fire({\n                            text: \"You have deleted \" + invoiceNumber + \"!.\",\n                            icon: \"success\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn fw-bold btn-primary\",\n                            }\n                        }).then(function () {\n                            // Remove current row\n                            datatable.row($(parent)).remove().draw();\n                        }).then(function () {\n                            // Detect checked checkboxes\n                            toggleToolbars();\n                        });\n                    } else if (result.dismiss === 'cancel') {\n                        Swal.fire({\n                            text: customerName + \" was not deleted.\",\n                            icon: \"error\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn fw-bold btn-primary\",\n                            }\n                        });\n                    }\n                });\n            })\n        });\n    }\n\n    // Public methods\n    return {\n        init: function () {\n            if (!table) {\n                return;\n            }\n\n            initCustomerView();\n            deleteRows();\n        }\n    }\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTCustomerViewPaymentTable.init();\n});"]}