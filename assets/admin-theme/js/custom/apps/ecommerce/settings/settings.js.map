{"version":3,"file":"settings.js","names":["KTAppEcommerceSettings","init","forEach","formId","form","document","getElementById","requiredFields","querySelectorAll","detectedField","validationFields","fields","plugins","trigger","FormValidation","Trigger","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","el","input","closest","querySelector","textarea","select","name","getAttribute","validators","notEmpty","message","innerText","validator","formValidation","submitButton","addEventListener","e","preventDefault","validate","then","status","console","log","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","element","Tagify","optionFormat","item","id","span","createElement","template","innerHTML","$","select2","placeholder","minimumResultsForSearch","Infinity","templateSelection","templateResult","initSelect2Flags","KTUtil","onDOMContentLoaded"],"sources":["apps/ecommerce/settings/settings.js"],"mappings":"AAAA,aAGA,IAAIA,uBA0KO,CACHC,KAAM,WArKQ,CACV,qCACA,sCACA,6CACA,yCACA,2CAIEC,SAAQC,IAEV,MAAMC,EAAOC,SAASC,eAAeH,GAErC,IAAIC,EACA,OAIJ,MAAMG,EAAiBH,EAAKI,iBAAiB,aAC7C,IAAIC,EACAC,EAAmB,CACnBC,OAAQ,CAAC,EAETC,QAAS,CACLC,QAAS,IAAIC,eAAeF,QAAQG,QACpCC,UAAW,IAAIF,eAAeF,QAAQK,WAAW,CAC7CC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,OAM3Bb,EAAeL,SAAQmB,IACnB,MAAMC,EAAQD,EAAGE,QAAQ,QAAQC,cAAc,SAC3CF,IACAb,EAAgBa,GAGpB,MAAMG,EAAWJ,EAAGE,QAAQ,QAAQC,cAAc,YAC9CC,IACAhB,EAAgBgB,GAGpB,MAAMC,EAASL,EAAGE,QAAQ,QAAQC,cAAc,UAC5CE,IACAjB,EAAgBiB,GAIpB,MAAMC,EAAOlB,EAAcmB,aAAa,QACxClB,EAAiBC,OAAOgB,GAAQ,CAC5BE,WAAY,CACRC,SAAU,CACNC,QAASV,EAAGW,UAAY,iBAGpC,IAIJ,IAAIC,EAAYnB,eAAeoB,eAC3B9B,EACAM,GAIJ,MAAMyB,EAAe/B,EAAKoB,cAAc,8CACxCW,EAAaC,iBAAiB,SAAS,SAAUC,GAE7CA,EAAEC,iBAGEL,GACAA,EAAUM,WAAWC,MAAK,SAAUC,GAChCC,QAAQC,IAAI,cAEE,SAAVF,GAEAN,EAAaS,aAAa,oBAAqB,MAG/CT,EAAaU,UAAW,EAGxBC,YAAW,WAEPX,EAAaY,gBAAgB,qBAG7BZ,EAAaU,UAAW,EAGxBG,KAAKC,KAAK,CACNC,KAAM,wCACNC,KAAM,UACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAK3B,GAAG,MAGHP,KAAKC,KAAK,CACNC,KAAM,0CACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAI/B,GAER,GAAE,IAOWlD,SAASG,iBAAiB,8CAGlCN,SAAQsD,IACb,IAAIC,OAAOD,EAAQ,IAKF,MAErB,MAAME,EAAgBC,IAClB,IAAMA,EAAKC,GACP,OAAOD,EAAKT,KAGhB,IAAIW,EAAOxD,SAASyD,cAAc,QAC9BC,EAAW,GAOf,OALAA,GAAY,aAAeJ,EAAKH,QAAQ5B,aAAa,2BAA6B,qDAClFmC,GAAYJ,EAAKT,KAEjBW,EAAKG,UAAYD,EAEVE,EAAEJ,EAAK,EAIlBI,EAAE,qDAAqDC,QAAQ,CAC3DC,YAAa,mBACbC,wBAAyBC,IACzBC,kBAAmBZ,EACnBa,eAAgBb,GAClB,EASEc,EAEJ,GAKRC,OAAOC,oBAAmB,WACtB1E,uBAAuBC,MAC3B","sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTAppEcommerceSettings = function () {\n    // Shared variables\n\n\n    // Private functions\n    const initForms = () => {\n        const forms = [\n            'kt_ecommerce_settings_general_form',\n            'kt_ecommerce_settings_general_store',\n            'kt_ecommerce_settings_general_localization',\n            'kt_ecommerce_settings_general_products',\n            'kt_ecommerce_settings_general_customers',\n        ];\n\n        // Init all forms\n        forms.forEach(formId => {\n            // Select form\n            const form = document.getElementById(formId);\n\n            if(!form){\n                return;\n            }\n\n            // Dynamically create validation non-empty rule\n            const requiredFields = form.querySelectorAll('.required');\n            var detectedField;\n            var validationFields = {\n                fields: {},\n\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n\n            // Detect required fields\n            requiredFields.forEach(el => {\n                const input = el.closest('.row').querySelector('input');\n                if (input) {\n                    detectedField = input;\n                }\n\n                const textarea = el.closest('.row').querySelector('textarea');\n                if (textarea) {\n                    detectedField = textarea;\n                }\n\n                const select = el.closest('.row').querySelector('select');\n                if (select) {\n                    detectedField = select;\n                }\n\n                // Add validation rule                \n                const name = detectedField.getAttribute('name');\n                validationFields.fields[name] = {\n                    validators: {\n                        notEmpty: {\n                            message: el.innerText + ' is required'\n                        }\n                    }\n                }\n            });\n\n            // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n            var validator = FormValidation.formValidation(\n                form,\n                validationFields\n            );\n\n            // Submit button handler\n            const submitButton = form.querySelector('[data-kt-ecommerce-settings-type=\"submit\"]');\n            submitButton.addEventListener('click', function (e) {\n                // Prevent default button action\n                e.preventDefault();\n\n                // Validate form before submit\n                if (validator) {\n                    validator.validate().then(function (status) {\n                        console.log('validated!');\n\n                        if (status == 'Valid') {\n                            // Show loading indication\n                            submitButton.setAttribute('data-kt-indicator', 'on');\n\n                            // Disable button to avoid multiple click \n                            submitButton.disabled = true;\n\n                            // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                            setTimeout(function () {\n                                // Remove loading indication\n                                submitButton.removeAttribute('data-kt-indicator');\n\n                                // Enable button\n                                submitButton.disabled = false;\n\n                                // Show popup confirmation \n                                Swal.fire({\n                                    text: \"Form has been successfully submitted!\",\n                                    icon: \"success\",\n                                    buttonsStyling: false,\n                                    confirmButtonText: \"Ok, got it!\",\n                                    customClass: {\n                                        confirmButton: \"btn btn-primary\"\n                                    }\n                                });\n\n                                //form.submit(); // Submit form\n                            }, 2000);\n                        } else {\n                            // Show popup error \n                            Swal.fire({\n                                text: \"Oops! There are some error(s) detected.\",\n                                icon: \"error\",\n                                buttonsStyling: false,\n                                confirmButtonText: \"Ok, got it!\",\n                                customClass: {\n                                    confirmButton: \"btn btn-primary\"\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    // Init Tagify\n    const initTagify = () => {\n        // Get tagify elements\n        const elements = document.querySelectorAll('[data-kt-ecommerce-settings-type=\"tagify\"]');\n\n        // Init tagify\n        elements.forEach(element => {\n            new Tagify(element);\n        });\n    }\n\n    // Init Select2 with flags\n    const initSelect2Flags = () => {\n        // Format options\n        const optionFormat = (item) => {\n            if ( !item.id ) {\n                return item.text;\n            }\n\n            var span = document.createElement('span');\n            var template = '';\n\n            template += '<img src=\"' + item.element.getAttribute('data-kt-select2-country') + '\" class=\"rounded-circle h-20px me-2\" alt=\"image\"/>';\n            template += item.text;\n\n            span.innerHTML = template;\n\n            return $(span);\n        }\n\n        // Init Select2 --- more info: https://select2.org/\n        $('[data-kt-ecommerce-settings-type=\"select2_flags\"]').select2({\n            placeholder: \"Select a country\",\n            minimumResultsForSearch: Infinity,\n            templateSelection: optionFormat,\n            templateResult: optionFormat\n        });\n    }\n\n    // Public methods\n    return {\n        init: function () {\n\n            initForms();\n            initTagify();\n            initSelect2Flags();\n\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTAppEcommerceSettings.init();\n});\n"]}