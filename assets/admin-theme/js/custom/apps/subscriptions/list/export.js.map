{"version":3,"file":"export.js","names":["KTSubscriptionsExport","element","submitButton","cancelButton","closeButton","validator","form","modal","init","document","querySelector","bootstrap","Modal","FormValidation","formValidation","fields","date","validators","notEmpty","message","plugins","trigger","Trigger","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","addEventListener","e","preventDefault","validate","then","status","console","log","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","hide","showCancelButton","cancelButtonText","value","reset","dismiss","datepicker","$","flatpickr","altInput","altFormat","dateFormat","mode","initForm","KTUtil","onDOMContentLoaded"],"sources":["apps/subscriptions/list/export.js"],"mappings":"AAAA,aAGA,IAAIA,sBAAwB,WACxB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EA6JJ,MAAO,CAEHC,KAAM,WAEFP,EAAUQ,SAASC,cAAc,kCACjCH,EAAQ,IAAII,UAAUC,MAAMX,GAE5BK,EAAOG,SAASC,cAAc,iCAC9BR,EAAeI,EAAKI,cAAc,mCAClCP,EAAeG,EAAKI,cAAc,mCAClCN,EAAcH,EAAQS,cAAc,kCAlKxCL,EAAYQ,eAAeC,eACvBR,EACA,CACIS,OAAQ,CACJC,KAAQ,CACJC,WAAY,CACRC,SAAU,CACNC,QAAS,6BAKzBC,QAAS,CACLC,QAAS,IAAIR,eAAeO,QAAQE,QACpCX,UAAW,IAAIE,eAAeO,QAAQG,WAAW,CAC7CC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAO/BxB,EAAayB,iBAAiB,SAAS,SAAUC,GAC7CA,EAAEC,iBAGExB,GACAA,EAAUyB,WAAWC,MAAK,SAAUC,GAChCC,QAAQC,IAAI,cAEE,SAAVF,GACA9B,EAAaiC,aAAa,oBAAqB,MAG/CjC,EAAakC,UAAW,EAExBC,YAAW,WACPnC,EAAaoC,gBAAgB,qBAE7BC,KAAKC,KAAK,CACNC,KAAM,gDACNC,KAAM,UACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,qBAEpBf,MAAK,SAAUgB,GACVA,EAAOC,cACPzC,EAAM0C,OAGN/C,EAAakC,UAAW,EAEhC,GAGJ,GAAG,MAEHG,KAAKC,KAAK,CACNC,KAAM,sEACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAI/B,GAER,IAEA3C,EAAawB,iBAAiB,SAAS,SAAUC,GAC7CA,EAAEC,iBAEFU,KAAKC,KAAK,CACNC,KAAM,yCACNC,KAAM,UACNQ,kBAAkB,EAClBP,gBAAgB,EAChBC,kBAAmB,kBACnBO,iBAAkB,aAClBN,YAAa,CACTC,cAAe,kBACf3C,aAAc,0BAEnB4B,MAAK,SAAUgB,GACVA,EAAOK,OACP9C,EAAK+C,QACL9C,EAAM0C,QACoB,WAAnBF,EAAOO,SACdf,KAAKC,KAAK,CACNC,KAAM,qCACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAI/B,GACJ,IAEA1C,EAAYuB,iBAAiB,SAAS,SAAUC,GAC5CA,EAAEC,iBAEFU,KAAKC,KAAK,CACNC,KAAM,yCACNC,KAAM,UACNQ,kBAAkB,EAClBP,gBAAgB,EAChBC,kBAAmB,kBACnBO,iBAAkB,aAClBN,YAAa,CACTC,cAAe,kBACf3C,aAAc,0BAEnB4B,MAAK,SAAUgB,GACVA,EAAOK,OACP9C,EAAK+C,QACL9C,EAAM0C,QACoB,WAAnBF,EAAOO,SACdf,KAAKC,KAAK,CACNC,KAAM,qCACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAI/B,GACJ,IAGW,WACX,MAAMS,EAAajD,EAAKI,cAAc,eAGtC8C,EAAED,GAAYE,UAAU,CACpBC,UAAU,EACVC,UAAW,SACXC,WAAY,QACZC,KAAM,SAEd,CAeQC,EACJ,EAER,CApL4B,GAuL5BC,OAAOC,oBAAmB,WACtBhE,sBAAsBQ,MAC1B","sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTSubscriptionsExport = function () {\n    var element;\n    var submitButton;\n    var cancelButton;\n    var closeButton;\n    var validator;\n    var form;\n    var modal;\n\n    // Init form inputs\n    var handleForm = function () {\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        validator = FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    'date': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Date range is required'\n                            }\n                        }\n                    },\n                },\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n        );\n\n        // Action buttons\n        submitButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            // Validate form before submit\n            if (validator) {\n                validator.validate().then(function (status) {\n                    console.log('validated!');\n\n                    if (status == 'Valid') {\n                        submitButton.setAttribute('data-kt-indicator', 'on');\n\n                        // Disable submit button whilst loading\n                        submitButton.disabled = true;\n\n                        setTimeout(function () {\n                            submitButton.removeAttribute('data-kt-indicator');\n\n                            Swal.fire({\n                                text: \"Customer list has been successfully exported!\",\n                                icon: \"success\",\n                                buttonsStyling: false,\n                                confirmButtonText: \"Ok, got it!\",\n                                customClass: {\n                                    confirmButton: \"btn btn-primary\"\n                                }\n                            }).then(function (result) {\n                                if (result.isConfirmed) {\n                                    modal.hide();\n\n                                    // Enable submit button after loading\n                                    submitButton.disabled = false;\n                                }\n                            });\n\n                            //form.submit(); // Submit form\n                        }, 2000);\n                    } else {\n                        Swal.fire({\n                            text: \"Sorry, looks like there are some errors detected, please try again.\",\n                            icon: \"error\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn btn-primary\"\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        cancelButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            Swal.fire({\n                text: \"Are you sure you would like to cancel?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, cancel it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                    confirmButton: \"btn btn-primary\",\n                    cancelButton: \"btn btn-active-light\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\t\n                    modal.hide(); // Hide modal\t      \t\t\t\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Your form has not been cancelled!.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\",\n                        }\n                    });\n                }\n            });\n        });\n\n        closeButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            Swal.fire({\n                text: \"Are you sure you would like to cancel?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, cancel it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                    confirmButton: \"btn btn-primary\",\n                    cancelButton: \"btn btn-active-light\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\t\n                    modal.hide(); // Hide modal\t\t      \n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Your form has not been cancelled!.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\",\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    var initForm = function () {\n        const datepicker = form.querySelector(\"[name=date]\");\n\n        // Handle datepicker range -- For more info on flatpickr plugin, please visit: https://flatpickr.js.org/\n        $(datepicker).flatpickr({\n            altInput: true,\n            altFormat: \"F j, Y\",\n            dateFormat: \"Y-m-d\",\n            mode: \"range\"\n        });\n    }\n\n    return {\n        // Public functions\n        init: function () {\n            // Elements\n            element = document.querySelector('#kt_subscriptions_export_modal');\n            modal = new bootstrap.Modal(element);\n\n            form = document.querySelector('#kt_subscriptions_export_form');\n            submitButton = form.querySelector('#kt_subscriptions_export_submit');\n            cancelButton = form.querySelector('#kt_subscriptions_export_cancel');\n            closeButton = element.querySelector('#kt_subscriptions_export_close');\n\n            handleForm();\n            initForm();\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTSubscriptionsExport.init();\n});"]}