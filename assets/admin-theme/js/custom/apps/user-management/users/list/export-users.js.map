{"version":3,"file":"export-users.js","names":["KTModalExportUsers","element","document","getElementById","form","querySelector","modal","bootstrap","Modal","init","validator","FormValidation","formValidation","fields","format","validators","notEmpty","message","plugins","trigger","Trigger","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","submitButton","addEventListener","e","preventDefault","validate","then","status","console","log","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","hide","showCancelButton","cancelButtonText","cancelButton","value","reset","dismiss","initForm","KTUtil","onDOMContentLoaded"],"sources":["apps/user-management/users/list/export-users.js"],"mappings":"AAAA,aAGA,IAAIA,mBAAqB,WAErB,MAAMC,EAAUC,SAASC,eAAe,yBAClCC,EAAOH,EAAQI,cAAc,+BAC7BC,EAAQ,IAAIC,UAAUC,MAAMP,GAuJlC,MAAO,CAEHQ,KAAM,YAtJK,WAGX,IAAIC,EAAYC,eAAeC,eAC3BR,EACA,CACIS,OAAQ,CACJC,OAAU,CACNC,WAAY,CACRC,SAAU,CACNC,QAAS,8BAKzBC,QAAS,CACLC,QAAS,IAAIR,eAAeO,QAAQE,QACpCb,UAAW,IAAII,eAAeO,QAAQG,WAAW,CAC7CC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAO/B,MAAMC,EAAexB,EAAQI,cAAc,yCAC3CoB,EAAaC,iBAAiB,SAAS,SAAUC,GAC7CA,EAAEC,iBAGElB,GACAA,EAAUmB,WAAWC,MAAK,SAAUC,GAChCC,QAAQC,IAAI,cAEE,SAAVF,GACAN,EAAaS,aAAa,oBAAqB,MAG/CT,EAAaU,UAAW,EAExBC,YAAW,WACPX,EAAaY,gBAAgB,qBAE7BC,KAAKC,KAAK,CACNC,KAAM,4CACNC,KAAM,UACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,qBAEpBf,MAAK,SAAUgB,GACVA,EAAOC,cACPzC,EAAM0C,OAGNvB,EAAaU,UAAW,EAEhC,GAGJ,GAAG,MAEHG,KAAKC,KAAK,CACNC,KAAM,sEACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAI/B,GAER,IAGqB5C,EAAQI,cAAc,yCAC9BqB,iBAAiB,SAAS,SAAUC,GAC7CA,EAAEC,iBAEFU,KAAKC,KAAK,CACNC,KAAM,yCACNC,KAAM,UACNQ,kBAAkB,EAClBP,gBAAgB,EAChBC,kBAAmB,kBACnBO,iBAAkB,aAClBN,YAAa,CACTC,cAAe,kBACfM,aAAc,0BAEnBrB,MAAK,SAAUgB,GACVA,EAAOM,OACPhD,EAAKiD,QACL/C,EAAM0C,QACoB,WAAnBF,EAAOQ,SACdhB,KAAKC,KAAK,CACNC,KAAM,qCACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAI/B,GACJ,IAGoB5C,EAAQI,cAAc,wCAC9BqB,iBAAiB,SAAS,SAAUC,GAC5CA,EAAEC,iBAEFU,KAAKC,KAAK,CACNC,KAAM,yCACNC,KAAM,UACNQ,kBAAkB,EAClBP,gBAAgB,EAChBC,kBAAmB,kBACnBO,iBAAkB,aAClBN,YAAa,CACTC,cAAe,kBACfM,aAAc,0BAEnBrB,MAAK,SAAUgB,GACVA,EAAOM,OACPhD,EAAKiD,QACL/C,EAAM0C,QACoB,WAAnBF,EAAOQ,SACdhB,KAAKC,KAAK,CACNC,KAAM,qCACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAI/B,GACJ,GACJ,CAKQU,EACJ,EAER,CAjKyB,GAoKzBC,OAAOC,oBAAmB,WACtBzD,mBAAmBS,MACvB","sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTModalExportUsers = function () {\n    // Shared variables\n    const element = document.getElementById('kt_modal_export_users');\n    const form = element.querySelector('#kt_modal_export_users_form');\n    const modal = new bootstrap.Modal(element);\n\n    // Init form inputs\n    var initForm = function () {\n\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        var validator = FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    'format': {\n                        validators: {\n                            notEmpty: {\n                                message: 'File format is required'\n                            }\n                        }\n                    },\n                },\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n        );\n\n        // Submit button handler\n        const submitButton = element.querySelector('[data-kt-users-modal-action=\"submit\"]');\n        submitButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            // Validate form before submit\n            if (validator) {\n                validator.validate().then(function (status) {\n                    console.log('validated!');\n\n                    if (status == 'Valid') {\n                        submitButton.setAttribute('data-kt-indicator', 'on');\n\n                        // Disable submit button whilst loading\n                        submitButton.disabled = true;\n\n                        setTimeout(function () {\n                            submitButton.removeAttribute('data-kt-indicator');\n\n                            Swal.fire({\n                                text: \"User list has been successfully exported!\",\n                                icon: \"success\",\n                                buttonsStyling: false,\n                                confirmButtonText: \"Ok, got it!\",\n                                customClass: {\n                                    confirmButton: \"btn btn-primary\"\n                                }\n                            }).then(function (result) {\n                                if (result.isConfirmed) {\n                                    modal.hide();\n\n                                    // Enable submit button after loading\n                                    submitButton.disabled = false;\n                                }\n                            });\n\n                            //form.submit(); // Submit form\n                        }, 2000);\n                    } else {\n                        Swal.fire({\n                            text: \"Sorry, looks like there are some errors detected, please try again.\",\n                            icon: \"error\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn btn-primary\"\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        // Cancel button handler\n        const cancelButton = element.querySelector('[data-kt-users-modal-action=\"cancel\"]');\n        cancelButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            Swal.fire({\n                text: \"Are you sure you would like to cancel?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, cancel it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                    confirmButton: \"btn btn-primary\",\n                    cancelButton: \"btn btn-active-light\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\t\n                    modal.hide(); // Hide modal\t\t\t\t\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Your form has not been cancelled!.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\",\n                        }\n                    });\n                }\n            });\n        });\n\n        // Close button handler\n        const closeButton = element.querySelector('[data-kt-users-modal-action=\"close\"]');\n        closeButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            Swal.fire({\n                text: \"Are you sure you would like to cancel?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, cancel it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                    confirmButton: \"btn btn-primary\",\n                    cancelButton: \"btn btn-active-light\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\t\n                    modal.hide(); // Hide modal\t\t\t\t\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Your form has not been cancelled!.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\",\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    return {\n        // Public functions\n        init: function () {\n            initForm();\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTModalExportUsers.init();\n});"]}