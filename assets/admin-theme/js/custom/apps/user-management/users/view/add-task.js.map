{"version":3,"file":"add-task.js","names":["KTUsersAddTask","element","document","getElementById","form","querySelector","modal","bootstrap","Modal","init","$","flatpickr","dateFormat","validator","FormValidation","formValidation","fields","task_duedate","validators","notEmpty","message","task_name","plugins","trigger","Trigger","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","addEventListener","e","preventDefault","Swal","fire","text","icon","showCancelButton","buttonsStyling","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","result","value","reset","hide","dismiss","submitButton","validate","status","console","log","setAttribute","disabled","setTimeout","removeAttribute","isConfirmed","initAddTask","querySelectorAll","forEach","el","resetButton","taskForm","task_status","on","revalidateField","KTUtil","onDOMContentLoaded"],"sources":["apps/user-management/users/view/add-task.js"],"mappings":"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","sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTUsersAddTask = function () {\n    // Shared variables\n    const element = document.getElementById('kt_modal_add_task');\n    const form = element.querySelector('#kt_modal_add_task_form');\n    const modal = new bootstrap.Modal(element);\n\n    // Init add task modal\n    var initAddTask = () => {\n\n        // Init flatpickr -- for more info: https://flatpickr.js.org/\n        $(\"#kt_modal_add_task_datepicker\").flatpickr({\n            dateFormat: \"Y-m-d\",\n        });\n\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        var validator = FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    'task_duedate': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Task due date is required'\n                            }\n                        }\n                    },\n                    'task_name': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Task name is required'\n                            }\n                        }\n                    },\n                },\n\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n        );\n\n        // Close button handler\n        const closeButton = element.querySelector('[data-kt-users-modal-action=\"close\"]');\n        closeButton.addEventListener('click', e => {\n            e.preventDefault();\n\n            Swal.fire({\n                text: \"Are you sure you would like to cancel?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, cancel it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                    confirmButton: \"btn btn-primary\",\n                    cancelButton: \"btn btn-active-light\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\t\n                    modal.hide(); // Hide modal\t\t\t\t\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Your form has not been cancelled!.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\",\n                        }\n                    });\n                }\n            });\n        });\n\n        // Cancel button handler\n        const cancelButton = element.querySelector('[data-kt-users-modal-action=\"cancel\"]');\n        cancelButton.addEventListener('click', e => {\n            e.preventDefault();\n\n            Swal.fire({\n                text: \"Are you sure you would like to cancel?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, cancel it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                    confirmButton: \"btn btn-primary\",\n                    cancelButton: \"btn btn-active-light\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\t\n                    modal.hide(); // Hide modal\t\t\t\t\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Your form has not been cancelled!.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\",\n                        }\n                    });\n                }\n            });\n        });\n\n        // Submit button handler\n        const submitButton = element.querySelector('[data-kt-users-modal-action=\"submit\"]');\n        submitButton.addEventListener('click', function (e) {\n            // Prevent default button action\n            e.preventDefault();\n\n            // Validate form before submit\n            if (validator) {\n                validator.validate().then(function (status) {\n                    console.log('validated!');\n\n                    if (status == 'Valid') {\n                        // Show loading indication\n                        submitButton.setAttribute('data-kt-indicator', 'on');\n\n                        // Disable button to avoid multiple click \n                        submitButton.disabled = true;\n\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                        setTimeout(function () {\n                            // Remove loading indication\n                            submitButton.removeAttribute('data-kt-indicator');\n\n                            // Enable button\n                            submitButton.disabled = false;\n\n                            // Show popup confirmation \n                            Swal.fire({\n                                text: \"Form has been successfully submitted!\",\n                                icon: \"success\",\n                                buttonsStyling: false,\n                                confirmButtonText: \"Ok, got it!\",\n                                customClass: {\n                                    confirmButton: \"btn btn-primary\"\n                                }\n                            }).then(function (result) {\n                                if (result.isConfirmed) {\n                                    modal.hide();\n                                }\n                            });\n\n                            //form.submit(); // Submit form\n                        }, 2000);\n                    } else {\n                        // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                        Swal.fire({\n                            text: \"Sorry, looks like there are some errors detected, please try again.\",\n                            icon: \"error\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn btn-primary\"\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n\n    // Init update task status\n    var initUpdateTaskStatus = () => {\n        const allTaskMenus = document.querySelectorAll('[data-kt-menu-id=\"kt-users-tasks\"]');\n\n        allTaskMenus.forEach(el => {\n            const resetButton = el.querySelector('[data-kt-users-update-task-status=\"reset\"]');\n            const submitButton = el.querySelector('[data-kt-users-update-task-status=\"submit\"]');\n            const taskForm = el.querySelector('[data-kt-menu-id=\"kt-users-tasks-form\"]');\n\n            // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n            var validator = FormValidation.formValidation(\n                taskForm,\n                {\n                    fields: {\n                        'task_status': {\n                            validators: {\n                                notEmpty: {\n                                    message: 'Task due date is required'\n                                }\n                            }\n                        },\n                    },\n\n                    plugins: {\n                        trigger: new FormValidation.plugins.Trigger(),\n                        bootstrap: new FormValidation.plugins.Bootstrap5({\n                            rowSelector: '.fv-row',\n                            eleInvalidClass: '',\n                            eleValidClass: ''\n                        })\n                    }\n                }\n            );\n\n            // Revalidate country field. For more info, plase visit the official plugin site: https://select2.org/\n            $(taskForm.querySelector('[name=\"task_status\"]')).on('change', function () {\n                // Revalidate the field when an option is chosen\n                validator.revalidateField('task_status');\n            });\n\n            // Reset action handler\n            resetButton.addEventListener('click', e => {\n                e.preventDefault();\n\n                Swal.fire({\n                    text: \"Are you sure you would like to reset?\",\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    buttonsStyling: false,\n                    confirmButtonText: \"Yes, reset it!\",\n                    cancelButtonText: \"No, return\",\n                    customClass: {\n                        confirmButton: \"btn btn-primary\",\n                        cancelButton: \"btn btn-active-light\"\n                    }\n                }).then(function (result) {\n                    if (result.value) {\n                        taskForm.reset(); // Reset form\t\t\n                        el.hide();\n                    } else if (result.dismiss === 'cancel') {\n                        Swal.fire({\n                            text: \"Your form was not reset!.\",\n                            icon: \"error\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn btn-primary\",\n                            }\n                        });\n                    }\n                });\n            });\n\n            // Submit action handler\n            submitButton.addEventListener('click', e => {\n                e.preventDefault();\n\n                // Validate form before submit\n                if (validator) {\n                    validator.validate().then(function (status) {\n                        console.log('validated!');\n\n                        if (status == 'Valid') {\n                            // Show loading indication\n                            submitButton.setAttribute('data-kt-indicator', 'on');\n\n                            // Disable button to avoid multiple click \n                            submitButton.disabled = true;\n\n                            // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                            setTimeout(function () {\n                                // Remove loading indication\n                                submitButton.removeAttribute('data-kt-indicator');\n\n                                // Enable button\n                                submitButton.disabled = false;\n\n                                // Show popup confirmation \n                                Swal.fire({\n                                    text: \"Form has been successfully submitted!\",\n                                    icon: \"success\",\n                                    buttonsStyling: false,\n                                    confirmButtonText: \"Ok, got it!\",\n                                    customClass: {\n                                        confirmButton: \"btn btn-primary\"\n                                    }\n                                }).then(function (result) {\n                                    if (result.isConfirmed) {\n                                        el.hide();\n                                    }\n                                });\n\n                                //taskForm.submit(); // Submit form\n                            }, 2000);\n                        } else {\n                            // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                            Swal.fire({\n                                text: \"Sorry, looks like there are some errors detected, please try again.\",\n                                icon: \"error\",\n                                buttonsStyling: false,\n                                confirmButtonText: \"Ok, got it!\",\n                                customClass: {\n                                    confirmButton: \"btn btn-primary\"\n                                }\n                            }).then(function(){\n                                //el.show();\n                            });\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    return {\n        // Public functions\n        init: function () {\n            initAddTask();\n            initUpdateTaskStatus();\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTUsersAddTask.init();\n});"]}