{"version":3,"sources":["typedjs.bundle.js","../src/defaults.js","../src/initializer.js","../src/html-parser.js","../src/typed.js"],"names":["t","s","exports","module","define","amd","self","Typed","this","Object","assign","bind","arguments","length","e","n","prototype","hasOwnProperty","call","apply","strings","stringsElement","typeSpeed","startDelay","shuffle","backSpeed","fadeOut","smartBackspace","fadeOutDelay","fadeOutClass","Infinity","cursorChar","loopCount","showCursor","bindInputFocusEvents","autoInsertCss","attr","onBegin","contentType","onComplete","onStringTyped","preStringTyped","onLastStringBackspaced","arrayPos","onTypingResumed","onTypingPaused","onReset","onStop","onStart","onDestroy","initializer","Initializer","_proto","load","querySelector","el","i","options","elementId","document","isInput","tagName","cursorBlinking","elContent","getAttribute","textContent","backDelay","isPaused","trim","r","Array","slice","children","innerHTML","stringsLength","getCurrentElContent","currentElContent","strPos","unshift","sequence","stopNum","loop","curLoop","status","curString","curStrPos","typingComplete","appendCursorAnimationCss","appendFadeOutAnimationCss","value","setAttribute","createElement","body","appendChild","css","cssDataName","htmlParser","HTMLParser","typeHtmlChars","curChar","substring","charAt","backSpaceHtmlChars","begin","toggle","pause","start","stop","toggleBlinking","typewrite","backspace","destroy","reset","restart","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","insertCursor","_this","shuffleStringsIfNeeded","bindFocusEvents","setTimeout","_this2","classList","contains","remove","humanize","humanizer","numChars","pauseTime","substr","test","skip","exec","parseInt","temporaryPause","stringBeforeSkip","stringSkipped","stringAfterSkip","doneTyping","keepTyping","setPauseStatus","nextString","_this3","complete","_this4","initFadeOut","curStringAtPosition","isTyping","isBlinking","add","speed","Math","round","random","sort","_this5","className","str","_this6","addEventListener","insertBefore","nextSibling"],"mappings":"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","file":"typedjs.bundle.js","sourcesContent":[null,"/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {},\n};\n\nexport default defaults;\n","import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.cssText =\n        'clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;';\n\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    if (self.currentElContent && self.currentElContent.length > 0) {\n      self.strPos = self.currentElContent.length - 1;\n      self.strings.unshift(self.currentElContent);\n    }\n\n    // the order of strings\n    self.sequence = [];\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0,\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    if (self.autoInsertCss) {\n      this.appendCursorAnimationCss(self);\n      this.appendFadeOutAnimationCss(self);\n    }\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendCursorAnimationCss(self) {\n    const cssDataName = 'data-typed-js-cursor-css';\n\n    if (!self.showCursor || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n\n  appendFadeOutAnimationCss(self) {\n    const cssDataName = 'data-typed-fadeout-js-css';\n\n    if (!self.fadeOut || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n","/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substring(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substring(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n","import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // If the strPos is 0, we're starting from the beginning of a string\n      // else, we're starting with a previous string that needs to be backspaced first\n      if (this.strPos === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        this.backspace(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substring(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substring(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substring(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, false);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substring(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substring(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.setAttribute('aria-hidden', true);\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n"]}