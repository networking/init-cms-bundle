
.imageContainer {
    position: relative;
}
.image {
    opacity: 1;
    display: block;
    transition: .5s ease;
    backface-visibility: hidden;
}
.middle {
    transition: .5s ease;
    opacity: 0;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    text-align: center;
}
.imageContainer:hover .image {
    opacity: 0.3;
}
.imageContainer:hover .middle {
    opacity: 1;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/