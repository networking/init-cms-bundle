{"version":3,"file":"imageEditor.7fb7ffb9.css","mappings":";;;AACA,gBACI,iBACJ,CAEA,OAII,0BAA2B,CAF3B,aAAc,CADd,SAIJ,CAEA,eAJI,mBAaJ,CATA,QAKI,QAAS,CAHT,SAAU,CACV,iBAAkB,CAKlB,iBAAkB,CAJlB,OAAQ,CAER,8BAAgC,CAChC,kCAEJ,CAEA,6BACI,UACJ,CAEA,8BACI,SACJ,C","sources":["webpack://init-cms-bundle/./assets/js/components/Editor.vue"],"sourcesContent":["<style>\n.imageContainer {\n    position: relative;\n}\n\n.image {\n    opacity: 1;\n    display: block;\n    transition: .5s ease;\n    backface-visibility: hidden;\n}\n\n.middle {\n    transition: .5s ease;\n    opacity: 0;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    -ms-transform: translate(-50%, -50%);\n    text-align: center;\n}\n\n.imageContainer:hover .image {\n    opacity: 0.3;\n}\n\n.imageContainer:hover .middle {\n    opacity: 1;\n}\n</style>\n<template>\n    <div class=\"imageEditorApp py-10\">\n        <div class=\"imageContainer d-flex justify-content-center align-items-center\">\n<!--            <img :src=\"imageURL\" class=\"img-responsive image\" @contextmenu.prevent=\"$refs.menu.open\">-->\n            <img :src=\"imageURL\" class=\"img-fluid center-block image\">\n            <div class=\"middle\">\n                <div class=\"text\"><a href=\"\" class=\"btn btn-default\" @click.prevent=\"editImage\"><i class=\"fa fa-magic fa-small\"></i> {{ $t('edit_image')}}</a></div>\n            </div>\n        </div>\n        <div class=\"alert mt-10\" :class=\"[alertType === 'error'?'alert-danger':'alert-success']\" v-if=\"alert\" role=\"alert\" v-html=\"alertMessage\"></div>\n        <div id=\"imageModal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n            <div class=\"modal-dialog  modal-fullscreen \" role=\"document\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n\n                        <h4 class=\"modal-title\">{{ $t('created_image') }}</h4>\n\n                        <!--begin::Close-->\n                        <div class=\"btn btn-icon btn-sm btn-active-light-primary ms-2\" data-bs-dismiss=\"modal\" aria-label=\"Close\">\n                            <i class=\"ki-outline ki-cross fs-1\"></i>\n                        </div>\n                    </div>\n                    <div class=\"modal-body align-center\">\n                        <div class=\"row\">\n                            <div class=\"col-md-6 align-center\">\n                                <h3>{{ $t('original_image') }}</h3>\n                                <p><img :src=\"imageURL\" class=\"img-fluid center-block\"/></p></div>\n                            <div class=\"col-md-6 align-center\">\n                                <h3>{{ $t('new_image') }}</h3>\n                                <p><img :src=\"newImage\" class=\"img-fluid center-block\"/></p></div>\n                        </div>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-sm btn-light\" data-bs-dismiss=\"modal\">{{ $t('cancel') }}</button>\n                        <button type=\"button\" class=\"btn btn-sm btn-warning\" @click.prevent=\"updateImage\">{{ $t('replace_image') }}</button>\n                        <button type=\"button\" class=\"btn btn-sm btn-primary\" @click.prevent=\"cloneImage\">{{ $t('create_new_image') }}</button>\n                    </div>\n                </div><!-- /.modal-content -->\n            </div><!-- /.modal-dialog -->\n        </div><!-- /.modal -->\n        <div id=\"confirmModal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n            <div class=\"modal-dialog\" role=\"document\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h4 class=\"modal-title\">{{ $t('are_you_sure') }}</h4>\n                    <!--begin::Close-->\n                    <div class=\"btn btn-icon btn-sm btn-active-light-primary ms-2\" data-bs-dismiss=\"modal\" aria-label=\"Close\">\n                        <i class=\"ki-outline ki-cross fs-1\"></i>\n                    </div>\n                </div>\n                <div class=\"modal-body\">\n                    <p>\n                        {{ $t('message.cannot_be_undone') }}\n                        </p>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-sm btn-warning\" @click.prevent=\"confirmUpdate\">{{ $t('continue') }}</button>\n                    <button type=\"button\" class=\"btn btn-sm btn-light\" @click.prevent=\"rejectUpdate\">{{ $t('cancel') }}</button>\n                </div>\n            </div><!-- /.modal-content -->\n        </div><!-- /.modal-dialog -->\n        </div><!-- /.modal -->\n        <div id=\"editorModal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n            <div class=\"modal-dialog modal-fullscreen\" role=\"document\">\n                <div class=\"modal-content\">\n                    <div id=\"imageEditor\" class=\"h-100\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</template>\n<script>\n    import axios from 'axios';\n    import FilerobotImageEditor, {\n        TABS,\n        TOOLS,\n    }from 'filerobot-image-editor';\n\n    const ALLOWED_FILE_EXTENTIONS = ['gif', 'jpg', 'jpeg', 'png'];\n    let imageContainer = document.getElementById('image-container');\n    let axiosConfig = {headers: {'X-Requested-With': 'XMLHttpRequest'}};\n    let langauge = 'de'//imageContainer.getAttribute('data-lang');\n\n    export default {\n        name: 'Editor',\n        mounted() {\n            this.imageURL = imageContainer.getAttribute('data-image-src');\n            this.id = imageContainer.getAttribute('data-image-id');\n            this.context = imageContainer.getAttribute('data-image-context');\n            this.provider = imageContainer.getAttribute('data-image-provider');\n            this.fileExtension = this.imageURL.slice((this.imageURL.lastIndexOf(\".\") - 1 >>> 0) + 2);\n\n            this.imageModal = new bootstrap.Modal(document.getElementById('imageModal'), {\n                keyboard: false\n            })\n\n            this.confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'), {\n                keyboard: false\n            })\n\n            this.editorModal = new bootstrap.Modal(document.getElementById('editorModal'), {\n                keyboard: false\n            })\n        },\n        data() {\n            this.$i18n.locale = langauge;\n            return {\n                locale: langauge,\n                imageURL: '',\n                id: '',\n                context: '',\n                provider: '',\n                imageEditor: '',\n                newImage: '',\n                alert: false,\n                alertMessage: false,\n                alertType: false,\n                fileExtension: '',\n                imageModal: {},\n                confirmModal: {},\n                editorModal: {},\n                config: {},\n            }\n        },\n        watch: {\n            locale (val) {\n                this.$i18n.locale = val\n            }\n        },\n        methods: {\n            editImage(){\n                this.alertMessage = false;\n                if(!ALLOWED_FILE_EXTENTIONS.includes(this.fileExtension.toLowerCase())){\n                    this.alert = true;\n                    this.alertType = 'error';\n                    this.alertMessage = this.$i18n.t('not_allowed_extension');\n                    return;\n                }\n\n                this.alert = false;\n                this.alertType = false;\n                this.alertMessage = false;\n                this.open(this.imageURL);\n            },\n            open(url) {\n                this.config.source = url\n                this.imageEditor = new FilerobotImageEditor( document.querySelector('#imageEditor'),\n                    {source: url, language: this.locale});\n                this.editorModal.show()\n\n                this.imageEditor.render({\n                    onClose: (closingReason) => {\n                        this.imageEditor.terminate();\n                        this.editorModal.hide()\n                    },\n                    onBeforeSave: (imageFileInfo) => {\n                        return false\n                    },\n                    onSave: (imageData, imageDesignState) => {\n                       this.download(imageData)\n                    }\n                });\n            },\n            download({ fullName, mimeType, imageCanvas }){\n                this.newImage = imageCanvas.toDataURL();\n                this.alert = false;\n                this.alertType = false;\n                this.alertMessage = false;\n                this.imageModal.show()\n                this.editorModal.hide()\n                return false;\n            },\n            cloneImage(){\n                this.imageModal.hide()\n                axios\n                    .post('/admin/cms/media/clone', {\n                        'id': this.id,\n                        'clone': true,\n                        'provider': this.provider,\n                        'context': this.context,\n                        'file': this.newImage\n                    }, axiosConfig).\n                then(response => {\n                    this.alert = true;\n\n                    if(response.data.success){\n                        this.alertMessage = this.$t('message.cloned', {'url': response.data.url});\n                        this.alertType = 'success';\n                    }else{\n                        this.alertMessage = response.data.error;\n                        this.alertType = 'error';\n                    }\n                }).catch(function (error) {\n                    console.log(error);\n                });\n            },\n            updateImage(){\n\n                this.imageModal.hide()\n                this.confirmModal.show()\n            },\n            rejectUpdate(){\n\n                this.imageModal.show()\n                this.confirmModal.hide()\n            },\n            confirmUpdate(){\n                this.confirmModal.hide()\n\n                axios\n                    .post('/admin/cms/media/clone', {\n                        'id': this.id,\n                        'clone': false,\n                        'provider': this.provider,\n                        'context': this.context,\n                        'file': this.newImage\n                    }, axiosConfig).\n                then(response => {\n                    if(response.data.success){\n                        window.location.href = response.data.url;\n                    }else{\n                        this.alert = true;\n                        this.alertMessage = response.data.error;\n                        this.alertType = 'error';\n                    }\n                }).catch(function (error) {\n                    console.log(error);\n                });\n            }\n        }\n    };\n</script>\n"],"names":[],"sourceRoot":""}