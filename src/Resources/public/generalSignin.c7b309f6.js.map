{"version":3,"file":"generalSignin.c7b309f6.js","mappings":"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","sources":["webpack://init-cms-bundle/./node_modules/.pnpm/@simplewebauthn+browser@13.2.2/node_modules/@simplewebauthn/browser/esm/helpers/browserSupportsWebAuthn.js","webpack://init-cms-bundle/./node_modules/.pnpm/@simplewebauthn+browser@13.2.2/node_modules/@simplewebauthn/browser/esm/helpers/webAuthnError.js","webpack://init-cms-bundle/./node_modules/.pnpm/@simplewebauthn+browser@13.2.2/node_modules/@simplewebauthn/browser/esm/helpers/webAuthnAbortService.js","webpack://init-cms-bundle/./node_modules/.pnpm/@simplewebauthn+browser@13.2.2/node_modules/@simplewebauthn/browser/esm/helpers/bufferToBase64URLString.js","webpack://init-cms-bundle/./node_modules/.pnpm/@simplewebauthn+browser@13.2.2/node_modules/@simplewebauthn/browser/esm/helpers/base64URLStringToBuffer.js","webpack://init-cms-bundle/./node_modules/.pnpm/@simplewebauthn+browser@13.2.2/node_modules/@simplewebauthn/browser/esm/helpers/browserSupportsWebAuthnAutofill.js","webpack://init-cms-bundle/./node_modules/.pnpm/@simplewebauthn+browser@13.2.2/node_modules/@simplewebauthn/browser/esm/helpers/toPublicKeyCredentialDescriptor.js","webpack://init-cms-bundle/./node_modules/.pnpm/@simplewebauthn+browser@13.2.2/node_modules/@simplewebauthn/browser/esm/helpers/toAuthenticatorAttachment.js","webpack://init-cms-bundle/./node_modules/.pnpm/@simplewebauthn+browser@13.2.2/node_modules/@simplewebauthn/browser/esm/methods/startAuthentication.js","webpack://init-cms-bundle/./node_modules/.pnpm/@simplewebauthn+browser@13.2.2/node_modules/@simplewebauthn/browser/esm/helpers/identifyAuthenticationError.js","webpack://init-cms-bundle/./node_modules/.pnpm/@simplewebauthn+browser@13.2.2/node_modules/@simplewebauthn/browser/esm/helpers/isValidDomain.js","webpack://init-cms-bundle/./assets/cms/authentication/webauthn/client.js","webpack://init-cms-bundle/./assets/cms/authentication/sign-in/general.js"],"sourcesContent":["/**\n * Determine if the browser is capable of Webauthn\n */\nexport function browserSupportsWebAuthn() {\n    return _browserSupportsWebAuthnInternals.stubThis(globalThis?.PublicKeyCredential !== undefined &&\n        typeof globalThis.PublicKeyCredential === 'function');\n}\n/**\n * Make it possible to stub the return value during testing\n * @ignore Don't include this in docs output\n */\nexport const _browserSupportsWebAuthnInternals = {\n    stubThis: (value) => value,\n};\n","/**\n * A custom Error used to return a more nuanced error detailing _why_ one of the eight documented\n * errors in the spec was raised after calling `navigator.credentials.create()` or\n * `navigator.credentials.get()`:\n *\n * - `AbortError`\n * - `ConstraintError`\n * - `InvalidStateError`\n * - `NotAllowedError`\n * - `NotSupportedError`\n * - `SecurityError`\n * - `TypeError`\n * - `UnknownError`\n *\n * Error messages were determined through investigation of the spec to determine under which\n * scenarios a given error would be raised.\n */\nexport class WebAuthnError extends Error {\n    constructor({ message, code, cause, name, }) {\n        // @ts-ignore: help Rollup understand that `cause` is okay to set\n        super(message, { cause });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = name ?? cause.name;\n        this.code = code;\n    }\n}\n","class BaseWebAuthnAbortService {\n    constructor() {\n        Object.defineProperty(this, \"controller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    createNewAbortSignal() {\n        // Abort any existing calls to navigator.credentials.create() or navigator.credentials.get()\n        if (this.controller) {\n            const abortError = new Error('Cancelling existing WebAuthn API call for new one');\n            abortError.name = 'AbortError';\n            this.controller.abort(abortError);\n        }\n        const newController = new AbortController();\n        this.controller = newController;\n        return newController.signal;\n    }\n    cancelCeremony() {\n        if (this.controller) {\n            const abortError = new Error('Manually cancelling existing WebAuthn API call');\n            abortError.name = 'AbortError';\n            this.controller.abort(abortError);\n            this.controller = undefined;\n        }\n    }\n}\n/**\n * A service singleton to help ensure that only a single WebAuthn ceremony is active at a time.\n *\n * Users of **@simplewebauthn/browser** shouldn't typically need to use this, but it can help e.g.\n * developers building projects that use client-side routing to better control the behavior of\n * their UX in response to router navigation events.\n */\nexport const WebAuthnAbortService = new BaseWebAuthnAbortService();\n","/**\n * Convert the given array buffer into a Base64URL-encoded string. Ideal for converting various\n * credential response ArrayBuffers to string for sending back to the server as JSON.\n *\n * Helper method to compliment `base64URLStringToBuffer`\n */\nexport function bufferToBase64URLString(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let str = '';\n    for (const charCode of bytes) {\n        str += String.fromCharCode(charCode);\n    }\n    const base64String = btoa(str);\n    return base64String.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n","/**\n * Convert from a Base64URL-encoded string to an Array Buffer. Best used when converting a\n * credential ID from a JSON string to an ArrayBuffer, like in allowCredentials or\n * excludeCredentials\n *\n * Helper method to compliment `bufferToBase64URLString`\n */\nexport function base64URLStringToBuffer(base64URLString) {\n    // Convert from Base64URL to Base64\n    const base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');\n    /**\n     * Pad with '=' until it's a multiple of four\n     * (4 - (85 % 4 = 1) = 3) % 4 = 3 padding\n     * (4 - (86 % 4 = 2) = 2) % 4 = 2 padding\n     * (4 - (87 % 4 = 3) = 1) % 4 = 1 padding\n     * (4 - (88 % 4 = 0) = 4) % 4 = 0 padding\n     */\n    const padLength = (4 - (base64.length % 4)) % 4;\n    const padded = base64.padEnd(base64.length + padLength, '=');\n    // Convert to a binary string\n    const binary = atob(padded);\n    // Convert binary string to buffer\n    const buffer = new ArrayBuffer(binary.length);\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return buffer;\n}\n","import { browserSupportsWebAuthn } from './browserSupportsWebAuthn.js';\n/**\n * Determine if the browser supports conditional UI, so that WebAuthn credentials can\n * be shown to the user in the browser's typical password autofill popup.\n */\nexport function browserSupportsWebAuthnAutofill() {\n    if (!browserSupportsWebAuthn()) {\n        return _browserSupportsWebAuthnAutofillInternals.stubThis(new Promise((resolve) => resolve(false)));\n    }\n    /**\n     * I don't like the `as unknown` here but there's a `declare var PublicKeyCredential` in\n     * TS' DOM lib that's making it difficult for me to just go `as PublicKeyCredentialFuture` as I\n     * want. I think I'm fine with this for now since it's _supposed_ to be temporary, until TS types\n     * have a chance to catch up.\n     */\n    const globalPublicKeyCredential = globalThis\n        .PublicKeyCredential;\n    if (globalPublicKeyCredential?.isConditionalMediationAvailable === undefined) {\n        return _browserSupportsWebAuthnAutofillInternals.stubThis(new Promise((resolve) => resolve(false)));\n    }\n    return _browserSupportsWebAuthnAutofillInternals.stubThis(globalPublicKeyCredential.isConditionalMediationAvailable());\n}\n// Make it possible to stub the return value during testing\nexport const _browserSupportsWebAuthnAutofillInternals = {\n    stubThis: (value) => value,\n};\n","import { base64URLStringToBuffer } from './base64URLStringToBuffer.js';\nexport function toPublicKeyCredentialDescriptor(descriptor) {\n    const { id } = descriptor;\n    return {\n        ...descriptor,\n        id: base64URLStringToBuffer(id),\n        /**\n         * `descriptor.transports` is an array of our `AuthenticatorTransportFuture` that includes newer\n         * transports that TypeScript's DOM lib is ignorant of. Convince TS that our list of transports\n         * are fine to pass to WebAuthn since browsers will recognize the new value.\n         */\n        transports: descriptor.transports,\n    };\n}\n","const attachments = ['cross-platform', 'platform'];\n/**\n * If possible coerce a `string` value into a known `AuthenticatorAttachment`\n */\nexport function toAuthenticatorAttachment(attachment) {\n    if (!attachment) {\n        return;\n    }\n    if (attachments.indexOf(attachment) < 0) {\n        return;\n    }\n    return attachment;\n}\n","import { bufferToBase64URLString } from '../helpers/bufferToBase64URLString.js';\nimport { base64URLStringToBuffer } from '../helpers/base64URLStringToBuffer.js';\nimport { browserSupportsWebAuthn } from '../helpers/browserSupportsWebAuthn.js';\nimport { browserSupportsWebAuthnAutofill } from '../helpers/browserSupportsWebAuthnAutofill.js';\nimport { toPublicKeyCredentialDescriptor } from '../helpers/toPublicKeyCredentialDescriptor.js';\nimport { identifyAuthenticationError } from '../helpers/identifyAuthenticationError.js';\nimport { WebAuthnAbortService } from '../helpers/webAuthnAbortService.js';\nimport { toAuthenticatorAttachment } from '../helpers/toAuthenticatorAttachment.js';\n/**\n * Begin authenticator \"login\" via WebAuthn assertion\n *\n * @param optionsJSON Output from **@simplewebauthn/server**'s `generateAuthenticationOptions()`\n * @param useBrowserAutofill (Optional) Initialize conditional UI to enable logging in via browser autofill prompts. Defaults to `false`.\n * @param verifyBrowserAutofillInput (Optional) Ensure a suitable `<input>` element is present when `useBrowserAutofill` is `true`. Defaults to `true`.\n */\nexport async function startAuthentication(options) {\n    // @ts-ignore: Intentionally check for old call structure to warn about improper API call\n    if (!options.optionsJSON && options.challenge) {\n        console.warn('startAuthentication() was not called correctly. It will try to continue with the provided options, but this call should be refactored to use the expected call structure instead. See https://simplewebauthn.dev/docs/packages/browser#typeerror-cannot-read-properties-of-undefined-reading-challenge for more information.');\n        // @ts-ignore: Reassign the options, passed in as a positional argument, to the expected variable\n        options = { optionsJSON: options };\n    }\n    const { optionsJSON, useBrowserAutofill = false, verifyBrowserAutofillInput = true, } = options;\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    // We need to avoid passing empty array to avoid blocking retrieval\n    // of public key\n    let allowCredentials;\n    if (optionsJSON.allowCredentials?.length !== 0) {\n        allowCredentials = optionsJSON.allowCredentials?.map(toPublicKeyCredentialDescriptor);\n    }\n    // We need to convert some values to Uint8Arrays before passing the credentials to the navigator\n    const publicKey = {\n        ...optionsJSON,\n        challenge: base64URLStringToBuffer(optionsJSON.challenge),\n        allowCredentials,\n    };\n    // Prepare options for `.get()`\n    const getOptions = {};\n    /**\n     * Set up the page to prompt the user to select a credential for authentication via the browser's\n     * input autofill mechanism.\n     */\n    if (useBrowserAutofill) {\n        if (!(await browserSupportsWebAuthnAutofill())) {\n            throw Error('Browser does not support WebAuthn autofill');\n        }\n        // Check for an <input> with \"webauthn\" in its `autocomplete` attribute\n        const eligibleInputs = document.querySelectorAll(\"input[autocomplete$='webauthn']\");\n        // WebAuthn autofill requires at least one valid input\n        if (eligibleInputs.length < 1 && verifyBrowserAutofillInput) {\n            throw Error('No <input> with \"webauthn\" as the only or last value in its `autocomplete` attribute was detected');\n        }\n        // `CredentialMediationRequirement` doesn't know about \"conditional\" yet as of\n        // typescript@4.6.3\n        getOptions.mediation = 'conditional';\n        // Conditional UI requires an empty allow list\n        publicKey.allowCredentials = [];\n    }\n    // Finalize options\n    getOptions.publicKey = publicKey;\n    // Set up the ability to cancel this request if the user attempts another\n    getOptions.signal = WebAuthnAbortService.createNewAbortSignal();\n    // Wait for the user to complete assertion\n    let credential;\n    try {\n        credential = (await navigator.credentials.get(getOptions));\n    }\n    catch (err) {\n        throw identifyAuthenticationError({ error: err, options: getOptions });\n    }\n    if (!credential) {\n        throw new Error('Authentication was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let userHandle = undefined;\n    if (response.userHandle) {\n        userHandle = bufferToBase64URLString(response.userHandle);\n    }\n    // Convert values to base64 to make it easier to send back to the server\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            authenticatorData: bufferToBase64URLString(response.authenticatorData),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            signature: bufferToBase64URLString(response.signature),\n            userHandle,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\n","import { isValidDomain } from './isValidDomain.js';\nimport { WebAuthnError } from './webAuthnError.js';\n/**\n * Attempt to intuit _why_ an error was raised after calling `navigator.credentials.get()`\n */\nexport function identifyAuthenticationError({ error, options, }) {\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal instanceof AbortSignal) {\n            // https://www.w3.org/TR/webauthn-2/#sctn-createCredential (Step 16)\n            return new WebAuthnError({\n                message: 'Authentication ceremony was sent an abort signal',\n                code: 'ERROR_CEREMONY_ABORTED',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'NotAllowedError') {\n        /**\n         * Pass the error directly through. Platforms are overloading this error beyond what the spec\n         * defines and we don't want to overwrite potentially useful error messages.\n         */\n        return new WebAuthnError({\n            message: error.message,\n            code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',\n            cause: error,\n        });\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = globalThis.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            // https://www.w3.org/TR/webauthn-2/#sctn-discover-from-external-source (Step 5)\n            return new WebAuthnError({\n                message: `${globalThis.location.hostname} is an invalid domain`,\n                code: 'ERROR_INVALID_DOMAIN',\n                cause: error,\n            });\n        }\n        else if (publicKey.rpId !== effectiveDomain) {\n            // https://www.w3.org/TR/webauthn-2/#sctn-discover-from-external-source (Step 6)\n            return new WebAuthnError({\n                message: `The RP ID \"${publicKey.rpId}\" is invalid for this domain`,\n                code: 'ERROR_INVALID_RP_ID',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        // https://www.w3.org/TR/webauthn-2/#sctn-op-get-assertion (Step 1)\n        // https://www.w3.org/TR/webauthn-2/#sctn-op-get-assertion (Step 12)\n        return new WebAuthnError({\n            message: 'The authenticator was unable to process the specified options, or could not create a new assertion signature',\n            code: 'ERROR_AUTHENTICATOR_GENERAL_ERROR',\n            cause: error,\n        });\n    }\n    return error;\n}\n","/**\n * A simple test to determine if a hostname is a properly-formatted domain name\n *\n * A \"valid domain\" is defined here: https://url.spec.whatwg.org/#valid-domain\n *\n * Regex sourced from here:\n * https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch08s15.html\n */\nexport function isValidDomain(hostname) {\n    return (\n    // Consider localhost valid as well since it's okay wrt Secure Contexts\n    hostname === 'localhost' ||\n        /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/i.test(hostname));\n}\n","import { startRegistration, startAuthentication } from '@simplewebauthn/browser';\n\nexport async function _fetch(path, payload = '') {\n    const headers = {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n    };\n    if (payload && !(payload instanceof FormData)) {\n        payload = JSON.stringify(payload);\n    }\n    const res = await fetch(path, {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: headers,\n        body: payload,\n    });\n    if (res.status === 200 || res.status === 201) {\n        // Server authentication succeeded\n        return res.json();\n    } else {\n        // Server authentication failed\n        const result = await res.json();\n\n        if(result.message){\n            throw new Error(result.message);\n        }\n\n        throw new Error(result.error);\n    }\n}\n\n\nexport async function registerCredential(username, displayName) {\n\n    let data = {\n        username: username,\n        displayName: displayName,\n        authenticatorSelection: {\n            userVerification: 'preferred',\n        },\n    }\n\n    const options = await _fetch('/admin/register/options', data);\n\n    let attResp;\n    try {\n        // Pass the options to the authenticator and wait for a response\n        attResp = await startRegistration(options);\n    } catch (error) {\n\n        throw error;\n    }\n\n    return await _fetch(CMSRouting.generate('initcms_webauthn_register_response'), attResp);\n\n}\nexport async function authenticate(username) {\n    let payload = {\n        requireUserVerification: 'preferred',\n    }\n\n    if(username){\n        payload.username = username;\n    }\n    const options = await _fetch('/admin/assertion/options', payload);\n    if(username && options.allowCredentials === undefined){\n        throw new Error('no_credentials');\n    }\n\n\n    let asseResp;\n    try {\n        // Pass the options to the authenticator and wait for a response\n        asseResp = await startAuthentication(options);\n    } catch (error) {\n        throw error;\n    }\n\n    return _fetch('/admin/assertion', asseResp);\n}\n\nexport async function unregisterCredential(credId) {\n    return _fetch(CMSRouting.generate('admin_networking_initcms_user_remove_webauthn_key') + `?credId=${encodeURIComponent(credId)}`);\n}\n\nexport async function updateCredential(credId, name) {\n    return _fetch(CMSRouting.generate('admin_networking_initcms_user_rename_webauthn_key') + `?credId=${encodeURIComponent(credId)}&name=${encodeURIComponent(name)}`);\n}\n","\"use strict\";\n\n\nimport {authenticate} from \"../webauthn/client\";\nimport { browserSupportsWebAuthnAutofill, platformAuthenticatorIsAvailable } from '@simplewebauthn/browser';\nlet KTSigninGeneral = function () {\n    // Elements\n    let form;\n    let submitButton;\n    let validator;\n    let signInWithPasskeyButton;\n    let signInWithUsernameAndPasswordLink;\n    let signInWithPasskeyContainer;\n    let signInWithUsernameAndPasswordContainer;\n\n    const lang = localStorage.getItem(\"kt_auth_lang\")??document.getElementsByTagName('html')[0].getAttribute('lang');\n\n    const texts = {\n        'en': {\n            'email_invalid': 'The value is not a valid email address',\n            'email_empty': 'Email address is required',\n            'password_empty': 'The password is required',\n            'login_success': 'You have successfully logged in!',\n            'login_error': 'Sorry, looks like there are some errors detected, please try again.',\n            'ok': 'Ok, got it!'\n        },\n        'de': {\n            'email_invalid': 'Der Wert ist keine gültige E-Mail-Adresse',\n            'email_empty': 'E-Mail-Adresse ist erforderlich',\n            'password_empty': 'Das Passwort ist erforderlich',\n            'login_success': 'Sie haben sich erfolgreich angemeldet!',\n            'login_error': 'Entschuldigung, es scheint, dass einige Fehler erkannt wurden, bitte versuchen Sie es erneut.',\n            'ok': 'Ok, verstanden!'\n        },\n        'fr': {\n            'email_invalid': 'La valeur n\\'est pas une adresse e-mail valide',\n            'email_empty': 'L\\'adresse e-mail est requise',\n            'password_empty': 'Le mot de passe est requis',\n            'login_success': 'Vous vous êtes connecté avec succès!',\n            'login_error': 'Désolé, il semble qu\\'il y ait des erreurs détectées, veuillez réessayer.',\n            'ok': 'Ok, compris!'\n        },\n        'it': {\n            'email_invalid': 'Il valore non è un indirizzo e-mail valido',\n            'email_empty': 'L\\'indirizzo e-mail è richiesto',\n            'password_empty': 'La password è richiesta',\n            'login_success': 'L\\'accesso è stato effettuato con successo!',\n            'login_error': 'Spiacente, sembra che siano stati rilevati degli errori, si prega di riprovare.',\n            'ok': 'Ok, capito!'\n        },\n    }\n\n    let translate = function (text) {\n\n        switch (lang) {\n            case 'German':\n            case 'de':\n                return texts['de'][text];\n            case 'Italian':\n            case 'it':\n                return texts['it'][text];\n            case 'French':\n            case 'fr':\n                return texts['fr'][text];\n            default:\n                return texts['en'][text];\n\n        }\n    }\n\n    // Handle form\n    let handleValidation = function (e) {\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        validator = FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    '_username': {\n                        validators: {\n                            notEmpty: {\n                                message: translate('email_empty')\n                            }\n                        }\n                    },\n                    '_password': {\n                        validators: {\n                            notEmpty: {\n                                message: translate('password_empty')\n                            }\n                        }\n                    }\n                },\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',  // comment to enable invalid state icons\n                        eleValidClass: '' // comment to enable valid state icons\n                    })\n                }\n            }\n        );\n    }\n\n\n    let handleSubmitAjax = async function (e) {\n        // Handle form submit\n        submitButton.addEventListener('click', function (e) {\n            // Prevent button default action\n            e.preventDefault();\n\n            // Validate form\n            validator.validate().then(function (status) {\n                if (status === 'Valid') {\n                    // Show loading indication\n                    submitButton.setAttribute('data-kt-indicator', 'on');\n\n                    // Disable button to avoid multiple click\n                    submitButton.disabled = true;\n                    // form.submit();\n                    // return;\n\n                    let formData = new FormData(form);\n\n                    let loginInfo = {}\n                    formData.forEach( (value, key) => {\n                        loginInfo[key] = value;\n                    })\n\n                    axios.post(CMSRouting.generate('cms_api_login'), loginInfo, {...axiosConfig})\n                        .then((response) => {\n                            submitButton.disabled = false;\n                            submitButton.removeAttribute('data-kt-indicator');\n                            let redirect = response.data.redirect;\n                            Swal.fire({\n                                    text: translate('login_success'),\n                                    icon: \"success\",\n                                    timer: 1000,\n                                    showConfirmButton: false,\n                                }).then(() => {\n                                    let host =  window.location.protocol + '//' + window.location.host\n                                    if(redirect.indexOf(host) === -1 || redirect.indexOf('http') === -1) {\n                                        redirect = host + redirect\n                                    }\n                                    location.href = redirect\n                                });\n                        })\n                        .catch((error) => {\n                            submitButton.disabled = false;\n                            submitButton.removeAttribute('data-kt-indicator');\n                            let data = error.response.data\n\n                            Swal.fire({\n                                text: data.error,\n                                icon: \"error\",\n                                buttonsStyling: false,\n                                confirmButtonText: translate('ok'),\n                                customClass: {\n                                    confirmButton: \"btn btn-primary\"\n                                }\n                            });\n                            submitButton.disabled = false;\n                        })\n\n                } else {\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                    Swal.fire({\n                        text: translate('login_error'),\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: translate('ok'),\n                        customClass: {\n                            confirmButton: \"btn btn-primary\"\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    let isValidUrl = function(url) {\n        try {\n            new URL(url);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    let webauthnSignin = async function(username){\n        try{\n            // Is conditional UI available in this browser?\n            const cma = await PublicKeyCredential.isConditionalMediationAvailable();\n            if (cma) {\n                const result = await authenticate(username);\n                if (result && 'ok' === result.status) {\n                    return location.href = document.querySelector('#redirect_route').value\n                }\n\n\n                throw new Error(result)\n            }\n        }catch (e) {\n            let message = e.message;\n\n            if(e.name === 'Error'){\n                message = translate('login_error');\n            }\n\n            if(e.name === 'NotAllowedError'){\n                return signInWithUsernameAndPasswordLink.click()\n            }\n\n            if(e.message === 'no_credentials'){\n                return signInWithUsernameAndPasswordLink.click()\n            }\n\n            Swal.fire({\n                text: message,\n                icon: \"error\",\n                buttonsStyling: false,\n                confirmButtonText: translate('ok'),\n                customClass: {\n                    confirmButton: \"btn btn-primary\"\n                }\n            });\n        }\n    }\n\n    // Public functions\n    return {\n        // Initialization\n        init: function () {\n            form = document.querySelector('#kt_sign_in_form');\n            submitButton = document.querySelector('#kt_sign_in_submit');\n            signInWithUsernameAndPasswordContainer = document.querySelector('#kt_sign_in_with_username_and_password_container');\n            let webauthnEnabled = document.querySelector(\"meta[name='webauthn-enabled']\").getAttribute(\"content\");\n\n            if (\n                webauthnEnabled &&\n                window.PublicKeyCredential &&\n                PublicKeyCredential.isConditionalMediationAvailable\n            ) {\n                signInWithPasskeyButton = document.querySelector('#kt_sign_in_with_passkey');\n                signInWithUsernameAndPasswordLink = document.querySelector('#kt_sign_in_with_username_and_password');\n                signInWithPasskeyContainer = document.querySelector('#kt_sign_in_with_passkey_container');\n\n\n                let typingTimer;                //timer identifier\n                let doneTypingInterval = 1000;  //time in ms (5 seconds)\n                let usernameInput = document.querySelector('#username');\n                const usernameEvent = () => {\n                    clearTimeout(typingTimer);\n                    if (usernameInput.value) {\n                        typingTimer = setTimeout(doneTyping, doneTypingInterval);\n                    }\n                }\n\n                let eventListener = usernameInput.addEventListener('keyup', usernameEvent);\n\n                function doneTyping () {\n                    signInWithPasskeyButton.click()\n                }\n\n                signInWithPasskeyButton.addEventListener('click', function (e) {\n                    e.preventDefault();\n                    try {\n                        webauthnSignin(usernameInput.value);\n                    } catch (e) {\n\n                        // A NotAllowedError indicates that the user canceled the operation.\n                        if (e.name !== \"NotAllowedError\") {\n                            //CMSAdmin.createInitCmsMessageBox('error', e.message);\n                        }\n                    }\n                })\n\n                signInWithUsernameAndPasswordLink.addEventListener('click', function (e) {\n                    e.preventDefault();\n                    usernameInput.removeEventListener('keyup', usernameEvent);\n                    signInWithPasskeyContainer.classList.add('d-none');\n                    signInWithUsernameAndPasswordContainer.classList.remove('d-none');\n\n                })\n            }\n\n            handleValidation();\n\n            if (isValidUrl(submitButton.closest('form').getAttribute('action'))) {\n                handleSubmitAjax(); // use for ajax submit\n            }\n        }\n    };\n}();\n\n// On document ready\ndocument.addEventListener('DOMContentLoaded', () => {\n    KTSigninGeneral.init();\n});\n"],"names":["_browserSupportsWebAuthnInternals","stubThis","undefined","globalThis","PublicKeyCredential","value","Error","constructor","message","code","cause","name","super","Object","defineProperty","this","enumerable","configurable","writable","createNewAbortSignal","controller","abortError","abort","newController","AbortController","signal","cancelCeremony","buffer","bytes","Uint8Array","str","charCode","String","fromCharCode","btoa","replace","base64URLString","base64","padLength","length","padded","padEnd","binary","atob","ArrayBuffer","i","charCodeAt","_browserSupportsWebAuthnAutofillInternals","descriptor","id","transports","attachments","attachment","indexOf","async","startAuthentication","options","optionsJSON","challenge","console","warn","useBrowserAutofill","verifyBrowserAutofillInput","allowCredentials","map","publicKey","getOptions","Promise","resolve","globalPublicKeyCredential","isConditionalMediationAvailable","browserSupportsWebAuthnAutofill","document","querySelectorAll","mediation","credential","navigator","credentials","get","err","error","AbortSignal","effectiveDomain","location","hostname","test","rpId","identifyAuthenticationError","rawId","response","type","userHandle","authenticatorData","clientDataJSON","signature","clientExtensionResults","getClientExtensionResults","authenticatorAttachment","_fetch","path","payload","FormData","JSON","stringify","res","fetch","method","headers","body","status","json","result","KTSigninGeneral","form","submitButton","validator","signInWithPasskeyButton","signInWithUsernameAndPasswordLink","signInWithPasskeyContainer","signInWithUsernameAndPasswordContainer","lang","localStorage","getItem","getElementsByTagName","getAttribute","texts","translate","text","webauthnSignin","username","requireUserVerification","asseResp","authenticate","href","querySelector","e","click","Swal","fire","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","init","window","typingTimer","doneTypingInterval","usernameInput","usernameEvent","clearTimeout","setTimeout","doneTyping","addEventListener","preventDefault","removeEventListener","classList","add","remove","FormValidation","formValidation","fields","validators","notEmpty","plugins","trigger","Trigger","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","url","URL","isValidUrl","closest","validate","then","setAttribute","disabled","formData","loginInfo","forEach","key","axios","post","CMSRouting","generate","axiosConfig","removeAttribute","redirect","data","timer","showConfirmButton","host","protocol","catch","handleSubmitAjax"],"sourceRoot":""}