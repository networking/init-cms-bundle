{"version":3,"file":"generalSignin.915af5f2.js","mappings":"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","sources":["webpack://init-cms-bundle/./assets/cms/authentication/sign-in/general.js"],"sourcesContent":["\"use strict\";\n\n\n// Class definition\nlet KTSigninGeneral = function () {\n    // Elements\n    let form;\n    let submitButton;\n    let validator;\n\n    const lang = localStorage.getItem(\"kt_auth_lang\")??document.getElementsByTagName('html')[0].getAttribute('lang');\n\n    const texts = {\n        'en': {\n            'email_invalid': 'The value is not a valid email address',\n            'email_empty': 'Email address is required',\n            'password_empty': 'The password is required',\n            'login_success': 'You have successfully logged in!',\n            'login_error': 'Sorry, looks like there are some errors detected, please try again.',\n            'ok': 'Ok, got it!'\n        },\n        'de': {\n            'email_invalid': 'Der Wert ist keine gültige E-Mail-Adresse',\n            'email_empty': 'E-Mail-Adresse ist erforderlich',\n            'password_empty': 'Das Passwort ist erforderlich',\n            'login_success': 'Sie haben sich erfolgreich angemeldet!',\n            'login_error': 'Entschuldigung, es scheint, dass einige Fehler erkannt wurden, bitte versuchen Sie es erneut.',\n            'ok': 'Ok, verstanden!'\n        },\n        'fr': {\n            'email_invalid': 'La valeur n\\'est pas une adresse e-mail valide',\n            'email_empty': 'L\\'adresse e-mail est requise',\n            'password_empty': 'Le mot de passe est requis',\n            'login_success': 'Vous vous êtes connecté avec succès!',\n            'login_error': 'Désolé, il semble qu\\'il y ait des erreurs détectées, veuillez réessayer.',\n            'ok': 'Ok, compris!'\n        },\n        'it': {\n            'email_invalid': 'Il valore non è un indirizzo e-mail valido',\n            'email_empty': 'L\\'indirizzo e-mail è richiesto',\n            'password_empty': 'La password è richiesta',\n            'login_success': 'L\\'accesso è stato effettuato con successo!',\n            'login_error': 'Spiacente, sembra che siano stati rilevati degli errori, si prega di riprovare.',\n            'ok': 'Ok, capito!'\n        },\n    }\n\n    let translate = function (text) {\n\n        switch (lang) {\n            case 'German':\n            case 'de':\n                return texts['de'][text];\n            case 'Italian':\n            case 'it':\n                return texts['it'][text];\n            case 'French':\n            case 'fr':\n                return texts['fr'][text];\n            default:\n                return texts['en'][text];\n\n        }\n    }\n\n    // Handle form\n    let handleValidation = function (e) {\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        validator = FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    '_username': {\n                        validators: {\n                            regexp: {\n                                regexp: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$|^sysadmin$/,\n                                message: translate('email_invalid'),\n                            },\n                            notEmpty: {\n                                message: translate('email_empty')\n                            }\n                        }\n                    },\n                    '_password': {\n                        validators: {\n                            notEmpty: {\n                                message: translate('password_empty')\n                            }\n                        }\n                    }\n                },\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',  // comment to enable invalid state icons\n                        eleValidClass: '' // comment to enable valid state icons\n                    })\n                }\n            }\n        );\n    }\n\n\n    let handleSubmitAjax = async function (e) {\n        let CMSRouting = await CMSAdmin.getRouting();\n        // Handle form submit\n        submitButton.addEventListener('click', function (e) {\n            // Prevent button default action\n            e.preventDefault();\n\n            // Validate form\n            validator.validate().then(function (status) {\n                if (status === 'Valid') {\n                    // Show loading indication\n                    submitButton.setAttribute('data-kt-indicator', 'on');\n\n                    // Disable button to avoid multiple click\n                    submitButton.disabled = true;\n                    // form.submit();\n                    // return;\n\n                    let formData = new FormData(form);\n\n                    let loginInfo = {}\n                    formData.forEach( (value, key) => {\n                        loginInfo[key] = value;\n                    })\n\n                    axios.post(CMSRouting.generate('cms_api_login'), loginInfo, {...axiosConfig})\n                        .then((response) => {\n                            submitButton.disabled = false;\n                            submitButton.removeAttribute('data-kt-indicator');\n                            let redirect = response.data.redirect;\n                            Swal.fire({\n                                    text: translate('login_success'),\n                                    type: \"success\",\n                                    icon: \"success\",\n                                    timer: 1000,\n                                    showConfirmButton: false,\n                                }).then(() => {\n                                    let host =  window.location.protocol + '//' + window.location.host\n                                    if(redirect.indexOf(host) === -1 || redirect.indexOf('http') === -1) {\n                                        redirect = host + redirect\n                                    }\n                                    location.href = redirect\n                                });\n                        })\n                        .catch((error) => {\n                            submitButton.disabled = false;\n                            submitButton.removeAttribute('data-kt-indicator');\n                            let data = error.response.data\n\n                            Swal.fire({\n                                text: data.error,\n                                icon: \"error\",\n                                buttonsStyling: false,\n                                confirmButtonText: translate('ok'),\n                                customClass: {\n                                    confirmButton: \"btn btn-primary\"\n                                }\n                            });\n                            submitButton.disabled = false;\n                        })\n\n                } else {\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                    Swal.fire({\n                        text: translate('login_error'),\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: translate('ok'),\n                        customClass: {\n                            confirmButton: \"btn btn-primary\"\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    let isValidUrl = function(url) {\n        try {\n            new URL(url);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Public functions\n    return {\n        // Initialization\n        init: function () {\n            form = document.querySelector('#kt_sign_in_form');\n            submitButton = document.querySelector('#kt_sign_in_submit');\n\n            handleValidation();\n\n            if (isValidUrl(submitButton.closest('form').getAttribute('action'))) {\n                handleSubmitAjax(); // use for ajax submit\n            }\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTSigninGeneral.init();\n});\n"],"names":["KTSigninGeneral","form","submitButton","validator","lang","localStorage","getItem","document","getElementsByTagName","getAttribute","texts","translate","text","init","querySelector","FormValidation","formValidation","fields","validators","regexp","message","notEmpty","plugins","trigger","Trigger","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","url","URL","e","isValidUrl","closest","async","CMSRouting","CMSAdmin","getRouting","addEventListener","preventDefault","validate","then","status","setAttribute","disabled","formData","FormData","loginInfo","forEach","value","key","axios","post","generate","axiosConfig","response","removeAttribute","redirect","data","Swal","fire","type","icon","timer","showConfirmButton","host","window","location","protocol","indexOf","href","catch","error","buttonsStyling","confirmButtonText","customClass","confirmButton","handleSubmitAjax","KTUtil","onDOMContentLoaded"],"sourceRoot":""}