{"version":3,"file":"update-role.js","names":["KTUsersUpdatePermissions","element","document","getElementById","form","querySelector","modal","bootstrap","Modal","init","validator","FormValidation","formValidation","fields","role_name","validators","notEmpty","message","plugins","trigger","Trigger","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","addEventListener","e","preventDefault","Swal","fire","text","icon","showCancelButton","buttonsStyling","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","result","value","hide","reset","dismiss","submitButton","validate","status","console","log","setAttribute","disabled","setTimeout","removeAttribute","isConfirmed","initUpdatePermissions","selectAll","allCheckboxes","querySelectorAll","forEach","c","checked","target","handleSelectAll","KTUtil","onDOMContentLoaded"],"sources":["apps/user-management/roles/view/update-role.js"],"mappings":"AAAA,aAGA,IAAIA,yBAA2B,WAE3B,MAAMC,EAAUC,SAASC,eAAe,wBAClCC,EAAOH,EAAQI,cAAc,8BAC7BC,EAAQ,IAAIC,UAAUC,MAAMP,GAmKlC,MAAO,CAEHQ,KAAM,WAlKkB,MAGxB,IAAIC,EAAYC,eAAeC,eAC3BR,EACA,CACIS,OAAQ,CACJC,UAAa,CACTC,WAAY,CACRC,SAAU,CACNC,QAAS,4BAMzBC,QAAS,CACLC,QAAS,IAAIR,eAAeO,QAAQE,QACpCb,UAAW,IAAII,eAAeO,QAAQG,WAAW,CAC7CC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAOXvB,EAAQI,cAAc,wCAC9BoB,iBAAiB,SAASC,IAClCA,EAAEC,iBAEFC,KAAKC,KAAK,CACNC,KAAM,wCACNC,KAAM,UACNC,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAmB,iBACnBC,iBAAkB,aAClBC,YAAa,CACTC,cAAe,kBACfC,aAAc,0BAEnBC,MAAK,SAAUC,GACVA,EAAOC,OACPnC,EAAMoC,MAEd,GAAE,IAIezC,EAAQI,cAAc,yCAC9BoB,iBAAiB,SAASC,IACnCA,EAAEC,iBAEFC,KAAKC,KAAK,CACNC,KAAM,yCACNC,KAAM,UACNC,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAmB,kBACnBC,iBAAkB,aAClBC,YAAa,CACTC,cAAe,kBACfC,aAAc,0BAEnBC,MAAK,SAAUC,GACVA,EAAOC,OACPrC,EAAKuC,QACLrC,EAAMoC,QACoB,WAAnBF,EAAOI,SACdhB,KAAKC,KAAK,CACNC,KAAM,qCACNC,KAAM,QACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,oBAI/B,GAAE,IAIN,MAAMQ,EAAe5C,EAAQI,cAAc,yCAC3CwC,EAAapB,iBAAiB,SAAS,SAAUC,GAE7CA,EAAEC,iBAGEjB,GACAA,EAAUoC,WAAWP,MAAK,SAAUQ,GAChCC,QAAQC,IAAI,cAEE,SAAVF,GAEAF,EAAaK,aAAa,oBAAqB,MAG/CL,EAAaM,UAAW,EAGxBC,YAAW,WAEPP,EAAaQ,gBAAgB,qBAG7BR,EAAaM,UAAW,EAGxBvB,KAAKC,KAAK,CACNC,KAAM,wCACNC,KAAM,UACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,qBAEpBE,MAAK,SAAUC,GACVA,EAAOc,aACPhD,EAAMoC,MAEd,GAGJ,GAAG,MAGHd,KAAKC,KAAK,CACNC,KAAM,sEACNC,KAAM,QACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,oBAI/B,GAER,GAAE,EAsBEkB,GAlBgB,MAEpB,MAAMC,EAAYpD,EAAKC,cAAc,wBAC/BoD,EAAgBrD,EAAKsD,iBAAiB,qBAG5CF,EAAU/B,iBAAiB,UAAUC,IAGjC+B,EAAcE,SAAQC,IAClBA,EAAEC,QAAUnC,EAAEoC,OAAOD,OAAO,GAC9B,GACJ,EAOEE,EACJ,EAER,CA9K+B,GAiL/BC,OAAOC,oBAAmB,WACtBjE,yBAAyBS,MAC7B","sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTUsersUpdatePermissions = function () {\n    // Shared variables\n    const element = document.getElementById('kt_modal_update_role');\n    const form = element.querySelector('#kt_modal_update_role_form');\n    const modal = new bootstrap.Modal(element);\n\n    // Init add schedule modal\n    var initUpdatePermissions = () => {\n\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        var validator = FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    'role_name': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Role name is required'\n                            }\n                        }\n                    },\n                },\n\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n        );\n\n        // Close button handler\n        const closeButton = element.querySelector('[data-kt-roles-modal-action=\"close\"]');\n        closeButton.addEventListener('click', e => {\n            e.preventDefault();\n\n            Swal.fire({\n                text: \"Are you sure you would like to close?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, close it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                    confirmButton: \"btn btn-primary\",\n                    cancelButton: \"btn btn-active-light\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    modal.hide(); // Hide modal\t\t\t\t\n                }\n            });\n        });\n\n        // Cancel button handler\n        const cancelButton = element.querySelector('[data-kt-roles-modal-action=\"cancel\"]');\n        cancelButton.addEventListener('click', e => {\n            e.preventDefault();\n\n            Swal.fire({\n                text: \"Are you sure you would like to cancel?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, cancel it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                    confirmButton: \"btn btn-primary\",\n                    cancelButton: \"btn btn-active-light\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\t\n                    modal.hide(); // Hide modal\t\t\t\t\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Your form has not been cancelled!.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\",\n                        }\n                    });\n                }\n            });\n        });\n\n        // Submit button handler\n        const submitButton = element.querySelector('[data-kt-roles-modal-action=\"submit\"]');\n        submitButton.addEventListener('click', function (e) {\n            // Prevent default button action\n            e.preventDefault();\n\n            // Validate form before submit\n            if (validator) {\n                validator.validate().then(function (status) {\n                    console.log('validated!');\n\n                    if (status == 'Valid') {\n                        // Show loading indication\n                        submitButton.setAttribute('data-kt-indicator', 'on');\n\n                        // Disable button to avoid multiple click \n                        submitButton.disabled = true;\n\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                        setTimeout(function () {\n                            // Remove loading indication\n                            submitButton.removeAttribute('data-kt-indicator');\n\n                            // Enable button\n                            submitButton.disabled = false;\n\n                            // Show popup confirmation \n                            Swal.fire({\n                                text: \"Form has been successfully submitted!\",\n                                icon: \"success\",\n                                buttonsStyling: false,\n                                confirmButtonText: \"Ok, got it!\",\n                                customClass: {\n                                    confirmButton: \"btn btn-primary\"\n                                }\n                            }).then(function (result) {\n                                if (result.isConfirmed) {\n                                    modal.hide();\n                                }\n                            });\n\n                            //form.submit(); // Submit form\n                        }, 2000);\n                    } else {\n                        // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                        Swal.fire({\n                            text: \"Sorry, looks like there are some errors detected, please try again.\",\n                            icon: \"error\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn btn-primary\"\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n\n    // Select all handler\n    const handleSelectAll = () => {\n        // Define variables\n        const selectAll = form.querySelector('#kt_roles_select_all');\n        const allCheckboxes = form.querySelectorAll('[type=\"checkbox\"]');\n\n        // Handle check state\n        selectAll.addEventListener('change', e => {\n\n            // Apply check state to all checkboxes\n            allCheckboxes.forEach(c => {\n                c.checked = e.target.checked;\n            });\n        });\n    }\n\n    return {\n        // Public functions\n        init: function () {\n            initUpdatePermissions();\n            handleSelectAll();\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTUsersUpdatePermissions.init();\n});"]}