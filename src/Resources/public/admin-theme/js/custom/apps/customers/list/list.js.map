{"version":3,"file":"list.js","names":["KTCustomersList","datatable","filterMonth","filterPayment","table","handleDeleteRows","querySelectorAll","forEach","d","addEventListener","e","preventDefault","parent","target","closest","customerName","innerText","Swal","fire","text","icon","showCancelButton","buttonsStyling","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","result","value","row","$","remove","draw","dismiss","initToggleToolbar","checkboxes","deleteSelected","document","querySelector","c","setTimeout","toggleToolbars","checked","toolbarBase","toolbarSelected","selectedCount","allCheckboxes","checkedState","count","innerHTML","classList","add","init","dateRow","realDate","moment","format","setAttribute","DataTable","info","order","columnDefs","orderable","targets","on","KTMenu","search","monthValue","val","paymentValue","r","filterString","trigger","KTUtil","onDOMContentLoaded"],"sources":["apps/customers/list/list.js"],"mappings":"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","sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTCustomersList = function () {\n    // Define shared variables\n    var datatable;\n    var filterMonth;\n    var filterPayment;\n    var table\n\n    // Private functions\n    var initCustomerList = function () {\n        // Set date data order\n        const tableRows = table.querySelectorAll('tbody tr');\n\n        tableRows.forEach(row => {\n            const dateRow = row.querySelectorAll('td');\n            const realDate = moment(dateRow[5].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 5th column in table\n            dateRow[5].setAttribute('data-order', realDate);\n        });\n\n        // Init datatable --- more info on datatables: https://datatables.net/manual/\n        datatable = $(table).DataTable({\n            \"info\": false,\n            'order': [],\n            'columnDefs': [\n                { orderable: false, targets: 0 }, // Disable ordering on column 0 (checkbox)\n                { orderable: false, targets: 6 }, // Disable ordering on column 6 (actions)\n            ]\n        });\n\n        // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\n        datatable.on('draw', function () {\n            initToggleToolbar();\n            handleDeleteRows();\n            toggleToolbars();\n            KTMenu.init(); // reinit KTMenu instances \n        });\n    }\n\n    // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n    var handleSearchDatatable = () => {\n        const filterSearch = document.querySelector('[data-kt-customer-table-filter=\"search\"]');\n        filterSearch.addEventListener('keyup', function (e) {\n            datatable.search(e.target.value).draw();\n        });\n    }\n\n    // Filter Datatable\n    var handleFilterDatatable = () => {\n        // Select filter options\n        filterMonth = $('[data-kt-customer-table-filter=\"month\"]');\n        filterPayment = document.querySelectorAll('[data-kt-customer-table-filter=\"payment_type\"] [name=\"payment_type\"]');\n        const filterButton = document.querySelector('[data-kt-customer-table-filter=\"filter\"]');\n\n        // Filter datatable on submit\n        filterButton.addEventListener('click', function () {\n            // Get filter values\n            const monthValue = filterMonth.val();\n            let paymentValue = '';\n\n            // Get payment value\n            filterPayment.forEach(r => {\n                if (r.checked) {\n                    paymentValue = r.value;\n                }\n\n                // Reset payment value if \"All\" is selected\n                if (paymentValue === 'all') {\n                    paymentValue = '';\n                }\n            });\n\n            // Build filter string from filter options\n            const filterString = monthValue + ' ' + paymentValue;\n\n            // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\n            datatable.search(filterString).draw();\n        });\n    }\n\n    // Delete customer\n    var handleDeleteRows = () => {\n        // Select all delete buttons\n        const deleteButtons = table.querySelectorAll('[data-kt-customer-table-filter=\"delete_row\"]');\n\n        deleteButtons.forEach(d => {\n            // Delete button on click\n            d.addEventListener('click', function (e) {\n                e.preventDefault();\n\n                // Select parent row\n                const parent = e.target.closest('tr');\n\n                // Get customer name\n                const customerName = parent.querySelectorAll('td')[1].innerText;\n\n                // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n                Swal.fire({\n                    text: \"Are you sure you want to delete \" + customerName + \"?\",\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    buttonsStyling: false,\n                    confirmButtonText: \"Yes, delete!\",\n                    cancelButtonText: \"No, cancel\",\n                    customClass: {\n                        confirmButton: \"btn fw-bold btn-danger\",\n                        cancelButton: \"btn fw-bold btn-active-light-primary\"\n                    }\n                }).then(function (result) {\n                    if (result.value) {\n                        Swal.fire({\n                            text: \"You have deleted \" + customerName + \"!.\",\n                            icon: \"success\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn fw-bold btn-primary\",\n                            }\n                        }).then(function () {\n                            // Remove current row\n                            datatable.row($(parent)).remove().draw();\n                        });\n                    } else if (result.dismiss === 'cancel') {\n                        Swal.fire({\n                            text: customerName + \" was not deleted.\",\n                            icon: \"error\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn fw-bold btn-primary\",\n                            }\n                        });\n                    }\n                });\n            })\n        });\n    }\n\n    // Reset Filter\n    var handleResetForm = () => {\n        // Select reset button\n        const resetButton = document.querySelector('[data-kt-customer-table-filter=\"reset\"]');\n\n        // Reset datatable\n        resetButton.addEventListener('click', function () {\n            // Reset month\n            filterMonth.val(null).trigger('change');\n\n            // Reset payment type\n            filterPayment[0].checked = true;\n\n            // Reset datatable --- official docs reference: https://datatables.net/reference/api/search()\n            datatable.search('').draw();\n        });\n    }\n\n    // Init toggle toolbar\n    var initToggleToolbar = () => {\n        // Toggle selected action toolbar\n        // Select all checkboxes\n        const checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\n\n        // Select elements\n        const deleteSelected = document.querySelector('[data-kt-customer-table-select=\"delete_selected\"]');\n\n        // Toggle delete selected toolbar\n        checkboxes.forEach(c => {\n            // Checkbox on click event\n            c.addEventListener('click', function () {\n                setTimeout(function () {\n                    toggleToolbars();\n                }, 50);\n            });\n        });\n\n        // Deleted selected rows\n        deleteSelected.addEventListener('click', function () {\n            // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n            Swal.fire({\n                text: \"Are you sure you want to delete selected customers?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, delete!\",\n                cancelButtonText: \"No, cancel\",\n                customClass: {\n                    confirmButton: \"btn fw-bold btn-danger\",\n                    cancelButton: \"btn fw-bold btn-active-light-primary\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    Swal.fire({\n                        text: \"You have deleted all selected customers!.\",\n                        icon: \"success\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn fw-bold btn-primary\",\n                        }\n                    }).then(function () {\n                        // Remove all selected customers\n                        checkboxes.forEach(c => {\n                            if (c.checked) {\n                                datatable.row($(c.closest('tbody tr'))).remove().draw();\n                            }\n                        });\n\n                        // Remove header checked box\n                        const headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\n                        headerCheckbox.checked = false;\n                    });\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Selected customers was not deleted.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn fw-bold btn-primary\",\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    // Toggle toolbars\n    const toggleToolbars = () => {\n        // Define variables\n        const toolbarBase = document.querySelector('[data-kt-customer-table-toolbar=\"base\"]');\n        const toolbarSelected = document.querySelector('[data-kt-customer-table-toolbar=\"selected\"]');\n        const selectedCount = document.querySelector('[data-kt-customer-table-select=\"selected_count\"]');\n\n        // Select refreshed checkbox DOM elements \n        const allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]');\n\n        // Detect checkboxes state & count\n        let checkedState = false;\n        let count = 0;\n\n        // Count checked boxes\n        allCheckboxes.forEach(c => {\n            if (c.checked) {\n                checkedState = true;\n                count++;\n            }\n        });\n\n        // Toggle toolbars\n        if (checkedState) {\n            selectedCount.innerHTML = count;\n            toolbarBase.classList.add('d-none');\n            toolbarSelected.classList.remove('d-none');\n        } else {\n            toolbarBase.classList.remove('d-none');\n            toolbarSelected.classList.add('d-none');\n        }\n    }\n\n    // Public methods\n    return {\n        init: function () {\n            table = document.querySelector('#kt_customers_table');\n            \n            if (!table) {\n                return;\n            }\n\n            initCustomerList();\n            initToggleToolbar();\n            handleSearchDatatable();\n            handleFilterDatatable();\n            handleDeleteRows();\n            handleResetForm();\n        }\n    }\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTCustomersList.init();\n});"]}