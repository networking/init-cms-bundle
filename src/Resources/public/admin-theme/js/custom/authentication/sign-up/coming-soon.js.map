{"version":3,"file":"coming-soon.js","names":["KTSignupComingSoon","form","submitButton","validator","counterDays","counterHours","counterMinutes","counterSeconds","init","currentTime","countDownDate","count","document","querySelector","FormValidation","formValidation","fields","email","validators","regexp","message","notEmpty","plugins","trigger","Trigger","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","addEventListener","e","preventDefault","validate","then","status","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","value","redirectUrl","getAttribute","location","href","Date","getTime","now","distance","days","Math","floor","hours","minutes","seconds","innerHTML","setInterval","KTUtil","onDOMContentLoaded"],"sources":["authentication/sign-up/coming-soon.js"],"mappings":"AAAA,aAGA,IAAIA,mBAAqB,WAErB,IAAIC,EACAC,EACHC,EAEGC,EACAC,EACAC,EACAC,EAgIJ,MAAO,CAEHC,KAAM,WAnCQ,IAEVC,EACAC,EAEAC,EA+BAV,EAAOW,SAASC,cAAc,wBAC9BX,EAAeU,SAASC,cAAc,0BA/HrCZ,IAKLE,EAAYW,eAAeC,eAChCd,EACA,CACCe,OAAQ,CACPC,MAAS,CACUC,WAAY,CACRC,OAAQ,CACJA,OAAQ,6BACRC,QAAS,0CAElCC,SAAU,CACTD,QAAS,gCAKbE,QAAS,CACRC,QAAS,IAAIT,eAAeQ,QAAQE,QACpCC,UAAW,IAAIX,eAAeQ,QAAQI,WAAW,CAC9BC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAM/B3B,EAAa4B,iBAAiB,SAAS,SAAUC,GAC7CA,EAAEC,iBAGF7B,EAAU8B,WAAWC,MAAK,SAAUC,GAClB,SAAVA,GAEAjC,EAAakC,aAAa,oBAAqB,MAG/ClC,EAAamC,UAAW,EAGxBC,YAAW,WAEPpC,EAAaqC,gBAAgB,qBAG7BrC,EAAamC,UAAW,EAGxBG,KAAKC,KAAK,CACNC,KAAM,uEACNC,KAAM,UACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,qBAEpBb,MAAK,SAAUc,GACd,GAAIA,EAAOC,YAAa,CACpBhD,EAAKY,cAAc,kBAAkBqC,MAAO,GAI5C,IAAIC,EAAclD,EAAKmD,aAAa,wBAChCD,IACAE,SAASC,KAAOH,EAExB,CACJ,GACJ,GAAG,MAGHX,KAAKC,KAAK,CACNC,KAAM,sEACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAI/B,GACV,MA4CU3C,EAAcQ,SAASC,cAAc,mCAEjCR,EAAeO,SAASC,cAAc,iCACtCP,EAAiBM,SAASC,cAAc,mCACxCN,EAAiBK,SAASC,cAAc,mCA3C5CJ,EAAc,IAAI8C,KAClB7C,EAAgB,IAAI6C,KAAK9C,EAAY+C,UAAY,OAA2B,KAAsB,KAAgBA,UAElH7C,EAAQ,WAER,IAAI8C,GAAM,IAAIF,MAAOC,UAGjBE,EAAWhD,EAAgB+C,EAG3BE,EAAOC,KAAKC,MAAMH,EAAW,OAC7BI,EAAQF,KAAKC,MAAOH,EAAW,MAAyB,MACxDK,EAAUH,KAAKC,MAAOH,EAAW,KAAoB,KACrDM,EAAUJ,KAAKC,MAAOH,EAAW,IAAe,KAGjDtD,IAAaA,EAAY6D,UAAYN,GACrCtD,IAAcA,EAAa4D,UAAYH,GACvCxD,IAAgBA,EAAe2D,UAAYF,GAC3CxD,IAAgBA,EAAe0D,UAAYD,EAClD,EAGQE,YAAYvD,EAAO,KAG3BA,IAoBA,EAER,CA3JyB,GA8JzBwD,OAAOC,oBAAmB,WACtBpE,mBAAmBQ,MACvB","sourcesContent":["\"use strict\";\n\n// Class Definition\nvar KTSignupComingSoon = function() {\n    // Elements\n    var form;\n    var submitButton;\n\tvar validator; \n\n    var counterDays;\n    var counterHours;\n    var counterMinutes;\n    var counterSeconds;\n\n    var handleForm = function(e) {\n        var validation;\t\t \n\n        if( !form ) {\n            return;\n        }        \n\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        validator = FormValidation.formValidation(\n\t\t\tform,\n\t\t\t{\n\t\t\t\tfields: {\t\t\t\t\t\n\t\t\t\t\t'email': {\n                        validators: {\n                            regexp: {\n                                regexp: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n                                message: 'The value is not a valid email address',\n                            },\n\t\t\t\t\t\t\tnotEmpty: {\n\t\t\t\t\t\t\t\tmessage: 'Email address is required'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t},\n\t\t\t\tplugins: {\n\t\t\t\t\ttrigger: new FormValidation.plugins.Trigger(),\n\t\t\t\t\tbootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n\t\t\t\t}\n\t\t\t}\n\t\t);\t\t\n\n        submitButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            // Validate form\n            validator.validate().then(function (status) {\n                if (status == 'Valid') {\n                    // Show loading indication\n                    submitButton.setAttribute('data-kt-indicator', 'on');\n\n                    // Disable button to avoid multiple click \n                    submitButton.disabled = true;\n\n                    // Simulate ajax request\n                    setTimeout(function() {\n                        // Hide loading indication\n                        submitButton.removeAttribute('data-kt-indicator');\n\n                        // Enable button\n                        submitButton.disabled = false;\n\n                        // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                        Swal.fire({\n                            text: \"We have received your request. You will be notified once we go live.\",\n                            icon: \"success\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn btn-primary\"\n                            }\n                        }).then(function (result) {\n                            if (result.isConfirmed) { \n                                form.querySelector('[name=\"email\"]').value= \"\";                            \n                                //form.submit();\n\n                                //form.submit(); // submit form\n                                var redirectUrl = form.getAttribute('data-kt-redirect-url');\n                                if (redirectUrl) {\n                                    location.href = redirectUrl;\n                                }\n                            }\n                        });\n                    }, 2000);   \t\t\t\t\t\t\n                } else {\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                    Swal.fire({\n                        text: \"Sorry, looks like there are some errors detected, please try again.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\"\n                        }\n                    });\n                }\n            });\n\t\t});\n    }\n\n    var initCounter = function() {\n        // Set the date we're counting down to\n        var currentTime = new Date(); \n        var countDownDate = new Date(currentTime.getTime() + 1000 * 60 * 60 * 24 * 15 + 1000 * 60 * 60 * 10 + 1000 * 60 * 15).getTime();\n\n        var count = function() {\n            // Get todays date and time\n            var now = new Date().getTime();\n\n            // Find the distance between now an the count down date\n            var distance = countDownDate - now;\n\n            // Time calculations for days, hours, minutes and seconds\n            var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n            var seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n            // Display the result\n            if(counterDays) counterDays.innerHTML = days; \n            if(counterHours) counterHours.innerHTML = hours;\n            if(counterMinutes) counterMinutes.innerHTML = minutes;\n            if(counterSeconds) counterSeconds.innerHTML = seconds;\n        };\n\n        // Update the count down every 1 second\n        var x = setInterval(count, 1000);\n\n        // Initial count\n        count();\n    }\n\n    // Public Functions\n    return {\n        // public functions\n        init: function() {\n            form = document.querySelector('#kt_coming_soon_form');\n            submitButton = document.querySelector('#kt_coming_soon_submit');\n           \n            handleForm();\n\n            counterDays = document.querySelector('#kt_coming_soon_counter_days');\n            if (counterDays) {                \n                counterHours = document.querySelector('#kt_coming_soon_counter_hours');\n                counterMinutes = document.querySelector('#kt_coming_soon_counter_minutes');\n                counterSeconds = document.querySelector('#kt_coming_soon_counter_seconds');\n                \n                initCounter();\n            }\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function() {\n    KTSignupComingSoon.init();\n});\n"]}