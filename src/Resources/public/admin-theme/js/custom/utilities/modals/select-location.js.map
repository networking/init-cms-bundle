{"version":3,"file":"select-location.js","names":["KTModalSelectLocation","locationSelectTarget","modal","selectedlocation","mapInitialized","init","document","querySelector","addEventListener","value","innerHTML","L","geocodeService","leaflet","map","center","zoom","tileLayer","attribution","addTo","esri","Geocoding","markerLayer","layerGroup","leafletIcon","divIcon","html","bgPos","iconAnchor","popupAnchor","className","on","e","reverse","latlng","run","error","result","clearLayers","address","Match_addr","marker","icon","bindPopup","closeButton","openPopup","Swal","fire","buttonsStyling","confirmButtonText","customClass","confirmButton","then","initMap","KTUtil","onDOMContentLoaded"],"sources":["utilities/modals/select-location.js"],"mappings":"AAAA,aAGA,IAAIA,sBAAwB,WAExB,IAAIC,EAGAC,EACAC,EAAmB,GACnBC,GAAiB,EA+ErB,MAAO,CACHC,KAAM,YAEXH,EAAQI,SAASC,cAAc,gCAMtBN,EAAuBK,SAASC,cAAc,oCACvBD,SAASC,cAAc,oCAtB7BC,iBAAiB,SAAS,WACvCP,IACIA,EAAqBQ,MACrBR,EAAqBQ,MAAQN,EAE7BF,EAAqBS,UAAYP,EAG7C,IAkBID,EAAMM,iBAAiB,kBAAkB,WAChCJ,KA3FH,WAEV,GAAKO,EAAL,CAKA,IAWIC,EAXAC,EAAUF,EAAEG,IAAI,+BAAgC,CAChDC,OAAQ,CAAC,QAAS,QAClBC,KAAM,KAIVL,EAAEM,UAAU,qDAAsD,CAC9DC,YAAa,8EACdC,MAAMN,GAKLD,OAD4B,IAArBD,EAAES,KAAKC,UACGV,EAAES,KAAKR,iBAEPD,EAAES,KAAKC,UAAUT,iBAItC,IAAIU,EAAcX,EAAEY,aAAaJ,MAAMN,GAGnCW,EAAcb,EAAEc,QAAQ,CACxBC,KAAM,gEACNC,MAAO,CAAC,GAAI,IACZC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,IAClBC,UAAW,mBAIfjB,EAAQkB,GAAG,SAAS,SAAUC,GAC1BpB,EAAeqB,UAAUC,OAAOF,EAAEE,QAAQC,KAAI,SAAUC,EAAOC,GACvDD,IAGJd,EAAYgB,cACZnC,EAAmBkC,EAAOE,QAAQC,WAClC7B,EAAE8B,OAAOJ,EAAOH,OAAQ,CAAEQ,KAAMlB,IAAeL,MAAMG,GAAaqB,UAAUN,EAAOE,QAAQC,WAAY,CAAEI,aAAa,IAASC,YAG/HC,KAAKC,KAAK,CACNrB,KAAM,yCAA2CvB,EAA3C,mEACNuC,KAAM,UACNM,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,qBAEpBC,MAAK,SAAUf,GAElB,IACJ,GACJ,GAxDA,CAyDJ,CA+BgBgB,GACAjD,GAAiB,EAEzB,IACJ,EAER,CA5G4B,GA+G5BkD,OAAOC,oBAAmB,WACtBvD,sBAAsBK,MAC1B","sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTModalSelectLocation = function () {\n    // Private variables\n    var locationSelectTarget;\n    var locationSelectButton;\n\n    var modal;\n    var selectedlocation = '';\n    var mapInitialized = false;\n\n    // Private functions\n    var initMap = function() {\n        // Check if Leaflet is included\n        if (!L) {\n            return;\n        }\n\n        // Define Map Location\n        var leaflet = L.map('kt_modal_select_location_map', {\n            center: [40.725, -73.985],\n            zoom: 30\n        });\n\n        // Init Leaflet Map. For more info check the plugin's documentation: https://leafletjs.com/\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: '&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(leaflet);\n\n        // Set Geocoding\n        var geocodeService;\n        if (typeof L.esri.Geocoding === 'undefined') {\n            geocodeService = L.esri.geocodeService();\n        } else {\n            geocodeService = L.esri.Geocoding.geocodeService();\n        }\n\n        // Define Marker Layer\n        var markerLayer = L.layerGroup().addTo(leaflet);\n\n        // Set Custom SVG icon marker\n        var leafletIcon = L.divIcon({\n            html: `<i class=\"ki-solid ki-geolocation text-primary fs-3x\"></span>`,\n            bgPos: [10, 10],\n            iconAnchor: [20, 37],\n            popupAnchor: [0, -37],\n            className: 'leaflet-marker'\n        });\n\n        // Map onClick Action\n        leaflet.on('click', function (e) {\n            geocodeService.reverse().latlng(e.latlng).run(function (error, result) {\n                if (error) {\n                    return;\n                }\n                markerLayer.clearLayers();\n                selectedlocation = result.address.Match_addr;\n                L.marker(result.latlng, { icon: leafletIcon }).addTo(markerLayer).bindPopup(result.address.Match_addr, { closeButton: false }).openPopup();\n\n                // Show popup confirmation. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                Swal.fire({\n                    html: '<div class=\"mb-2\">Your selected - <b>\"' + selectedlocation + '\"</b>.</div>' + 'Click on the \"Apply\" button to select this location.',\n                    icon: \"success\",\n                    buttonsStyling: false,\n                    confirmButtonText: \"Ok, got it!\",\n                    customClass: {\n                        confirmButton: \"btn btn-primary\"\n                    }\n                }).then(function (result) {\n                    // Confirmed\n                });\n            });\n        });\n    }\n\n    var handleSelection = function() {\n        locationSelectButton.addEventListener('click', function() {\n            if (locationSelectTarget) {\n                if (locationSelectTarget.value) {\n                    locationSelectTarget.value = selectedlocation;\n                } else {\n                    locationSelectTarget.innerHTML = selectedlocation;\n                }\n            }\n        });\n    }\n\n    // Public methods\n    return {\n        init: function () {\n            // Elements\n\t\t\tmodal = document.querySelector('#kt_modal_select_location');\n\n\t\t\tif (!modal) {\n\t\t\t\treturn;\n\t\t\t}\n            \n            locationSelectTarget = document.querySelector('#kt_modal_select_location_target');\n            locationSelectButton = document.querySelector('#kt_modal_select_location_button');\n\n            handleSelection();\n            \n            modal.addEventListener('shown.bs.modal', function () {\n                if (!mapInitialized) {\n                    initMap();\n                    mapInitialized = true;\n                }                \n            });\n        }\n    }\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function() {\n    KTModalSelectLocation.init();\n});\n"]}