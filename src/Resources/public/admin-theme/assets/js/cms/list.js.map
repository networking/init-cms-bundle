{"version":3,"file":"list.js","names":["CMSList","datatable","table","listDialog","advanceFilterToggle","handleDeleteRows","querySelectorAll","forEach","d","addEventListener","e","preventDefault","parent","target","closest","customerName","innerText","Swal","fire","text","icon","showCancelButton","buttonsStyling","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","result","value","row","$","remove","draw","dismiss","createBatchDialog","event","stopPropagation","initializeDialog","action","document","querySelector","form","formData","FormData","append","fetch","getAttribute","method","body","headers","response","html","innerHTML","show","CMSAdmin","createSelect2","bootstrap","Modal","height","width","initToggleToolbar","c","setTimeout","toggleToolbars","toggleAdvancedFilters","filter","classList","contains","add","toolbarBase","toolbarSelected","selectedCount","allCheckboxes","checkedState","count","checked","init","DataTable","order","columnDefs","orderable","targets","lengthMenu","on","KTMenu","search","KTUtil","onDOMContentLoaded"],"sources":["list.js"],"mappings":"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","sourcesContent":["\"use strict\";\n\n// Class definition\nvar CMSList = function () {\n    // Define shared variables\n    var datatable;\n    var filterMonth;\n    var filterPayment;\n    var table\n    var listDialog\n    var advanceFilters;\n    var advanceFilterToggle\n\n    // Private functions\n    var initCustomerList = function () {\n        // Set date data order\n        const tableRows = table.querySelectorAll('tbody tr');\n\n        tableRows.forEach(row => {\n            // const dateRow = row.querySelectorAll('td');\n            // const realDate = moment(dateRow[5].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 5th column in table\n            // dateRow[5].setAttribute('data-order', realDate);\n        });\n\n        // Init datatable --- more info on datatables: https://datatables.net/manual/\n        datatable = $(table).DataTable({\n            'order': [],\n            'columnDefs': [\n                { orderable: false, targets: [0,'no_sorting'] },\n            ],\n            \"lengthMenu\": [[20, 50, 100, -1], [20, 50, 100, \"All\"]],\n        });\n\n        // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\n        datatable.on('draw', function () {\n            initToggleToolbar();\n            handleDeleteRows();\n            toggleToolbars();\n            KTMenu.init(); // reinit KTMenu instances \n        });\n    }\n\n    // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n    var handleSearchDatatable = () => {\n        const filterSearch = document.querySelector('[data-kt-list-table-filter=\"search\"]');\n        filterSearch.addEventListener('keyup', function (e) {\n            table.querySelector('[data-kt-check=\"true\"]').checked = false;\n            const allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]');\n            allCheckboxes.forEach(c => {\n                c.checked = false;\n            })\n            datatable.search(e.target.value).draw();\n\n        });\n    }\n\n    // Filter Datatable\n    // var handleFilterDatatable = () => {\n    //     // Select filter options\n    //     filterMonth = $('[data-kt-list-table-filter=\"month\"]');\n    //     filterPayment = document.querySelectorAll('[data-kt-list-table-filter=\"payment_type\"] [name=\"payment_type\"]');\n    //     const filterButton = document.querySelector('[data-kt-list-table-filter=\"filter\"]');\n    //\n    //     // Filter datatable on submit\n    //     filterButton.addEventListener('click', function () {\n    //         // Get filter values\n    //         const monthValue = filterMonth.val();\n    //         let paymentValue = '';\n    //\n    //         // Get payment value\n    //         filterPayment.forEach(r => {\n    //             if (r.checked) {\n    //                 paymentValue = r.value;\n    //             }\n    //\n    //             // Reset payment value if \"All\" is selected\n    //             if (paymentValue === 'all') {\n    //                 paymentValue = '';\n    //             }\n    //         });\n    //\n    //         // Build filter string from filter options\n    //         const filterString = monthValue + ' ' + paymentValue;\n    //\n    //         // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\n    //         datatable.search(filterString).draw();\n    //     });\n    // }\n\n    // Delete customer\n    var handleDeleteRows = () => {\n        // Select all delete buttons\n        const deleteButtons = table.querySelectorAll('[data-kt-list-table-filter=\"delete_row\"]');\n\n        deleteButtons.forEach(d => {\n            // Delete button on click\n            d.addEventListener('click', function (e) {\n                e.preventDefault();\n\n                // Select parent row\n                const parent = e.target.closest('tr');\n\n                // Get customer name\n                const customerName = parent.querySelectorAll('td')[1].innerText;\n\n                // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n                Swal.fire({\n                    text: \"Are you sure you want to delete \" + customerName + \"?\",\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    buttonsStyling: false,\n                    confirmButtonText: \"Yes, delete!\",\n                    cancelButtonText: \"No, cancel\",\n                    customClass: {\n                        confirmButton: \"btn fw-bold btn-danger\",\n                        cancelButton: \"btn fw-bold btn-active-light-primary\"\n                    }\n                }).then(function (result) {\n                    if (result.value) {\n                        Swal.fire({\n                            text: \"You have deleted \" + customerName + \"!.\",\n                            icon: \"success\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn fw-bold btn-primary\",\n                            }\n                        }).then(function () {\n                            // Remove current row\n                            datatable.row($(parent)).remove().draw();\n                        });\n                    } else if (result.dismiss === 'cancel') {\n                        Swal.fire({\n                            text: customerName + \" was not deleted.\",\n                            icon: \"error\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn fw-bold btn-primary\",\n                            }\n                        });\n                    }\n                });\n            })\n        });\n    }\n\n    var initBatchDialog = () => {\n        document.querySelector('.batch-dialog-link').addEventListener('click', createBatchDialog);\n\n    };\n\n    var createBatchDialog = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        initializeDialog();\n\n        let submit = event.target\n        let action = document.querySelector('[data-kt-list-table-select=\"batch_action\"]').value\n        let form = document.querySelector('#kt-batch-form');\n\n        let formData = new FormData(form);\n\n        formData.append('action', action);\n\n        fetch(form.getAttribute('action'), {\n            method: form.method,\n            body: formData,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n            },\n        }).then(response => {\n            return response.text()\n        }).then(html => {\n            document.querySelector('#list_dialog').querySelector('.modal-content').innerHTML = html;\n            listDialog.show();\n            CMSAdmin.createSelect2();\n        })\n    }\n\n\n    var initializeDialog = () => {\n        if (!listDialog) {\n            listDialog = new bootstrap.Modal(document.querySelector('#list_dialog', { height:'auto', width:650, show:false}))\n        }\n    }\n\n    // Reset Filter\n    var handleResetForm = () => {\n        // Select reset button\n        const resetButton = document.querySelector('[data-kt-list-table-filter=\"reset\"]');\n\n        // Reset datatable\n        resetButton.addEventListener('click', function () {\n            // Reset month\n            filterMonth.val(null).trigger('change');\n\n            // Reset payment type\n            filterPayment[0].checked = true;\n\n            // Reset datatable --- official docs reference: https://datatables.net/reference/api/search()\n            datatable.search('').draw();\n        });\n    }\n\n    // Init toggle toolbar\n    var initToggleToolbar = () => {\n        // Toggle selected action toolbar\n        // Select all checkboxes\n        const checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\n\n        // Select elements\n\n        // Toggle delete selected toolbar\n        checkboxes.forEach(c => {\n            // Checkbox on click event\n            c.addEventListener('click', function () {\n                setTimeout(function () {\n                    toggleToolbars();\n                }, 50);\n            });\n        });\n\n\n    }\n\n    const toggleAdvancedFilters = () => {\n        document.querySelectorAll('.advanced-filter').forEach(filter => {\n            if(filter.classList.contains('d-none')) {\n                return filter.classList.remove('d-none');\n            }\n            filter.classList.add('d-none');\n        });\n    }\n\n    // Toggle toolbars\n    const toggleToolbars = () => {\n        // Define variables\n        const toolbarBase = document.querySelector('[data-kt-list-table-toolbar=\"base\"]');\n        const toolbarSelected = document.querySelector('[data-kt-list-table-toolbar=\"selected\"]');\n        const selectedCount = document.querySelector('[data-kt-list-table-select=\"selected_count\"]');\n\n        // Select refreshed checkbox DOM elements \n        const allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]');\n\n        // Detect checkboxes state & count\n        let checkedState = false;\n        let count = 0;\n\n        // Count checked boxes\n        allCheckboxes.forEach(c => {\n            if (c.checked) {\n                checkedState = true;\n                count++;\n            }\n        });\n\n        // Toggle toolbars\n        if (checkedState) {\n            selectedCount.innerHTML = count;\n            toolbarBase.classList.add('d-none');\n            toolbarSelected.classList.remove('d-none');\n        } else {\n            toolbarBase.classList.remove('d-none');\n            toolbarSelected.classList.add('d-none');\n        }\n    }\n\n    // Public methods\n    return {\n        init: function () {\n            table = document.querySelector('#init_cms_data_table');\n            advanceFilterToggle = document.querySelector('#kt_advance_filter_toggle');\n\n            if (advanceFilterToggle) {\n                advanceFilterToggle.addEventListener('click', toggleAdvancedFilters);\n            }\n\n            if (!table) {\n                return;\n            }\n\n            initCustomerList();\n            initToggleToolbar();\n            handleSearchDatatable();\n            initBatchDialog();\n\n\n            // handleFilterDatatable();\n            // handleDeleteRows();\n            // handleResetForm();\n        }\n    }\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    CMSList.init();\n});"]}