{"version":3,"file":"page-admin.js","names":["Sortable","containers","dropzones","contentTypeList","addBlockUrl","Routing","generate","sortUrl","deleteUrl","initDropZone","length","group","name","pull","put","onEnd","evt","to","classList","remove","onChange","add","forEach","container","acceptLayoutBlock","animation","saveLayoutBlockSort","response","CMSAdmin","createInitCmsMessageBox","data","messageStatus","message","onAdd","dragEl","count","querySelectorAll","item","id","dropzone","parentElement","createItem","dataset","contentType","pageId","zone","newIndex","then","outerHTML","html","catch","error","detail","querySelector","onRemove","from","el","contentBlock","contentTypes","JSON","parse","includes","maxItems","event","callback","zones","adminCode","layoutBlocks","addButtons","addButton","index","sortOrder","layoutBlockIds","layoutBlock","push","submitLayoutSort","undefined","CustomEvent","document","dispatchEvent","async","axios","post","axiosConfig","code","editBlock","e","preventDefault","target","console","log","contains","value","editUrl","displayBlock","getElementById","get","innerHTML","body","cancelEditBlock","saveLayoutBlock","form","closest","config","url","action","method","FormData","enctype","headers","request","status","deleteBlock","Swal","fire","icon","buttonsStyling","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","result","isConfirmed","_method","err","KTUtil","onDOMContentLoaded","on"],"sources":["page-admin.js"],"mappings":"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","sourcesContent":["import Sortable from '../../plugins/custom/sortablejs/sortablejs.bundle.js';\n\nlet containers = null;\nlet dropzones = null;\nlet contentTypeList = null;\nlet addBlockUrl = Routing.generate('admin_networking_initcms_layoutblock_create');\nlet sortUrl = Routing.generate('admin_networking_initcms_layoutblock_updateLayoutBlockSort');\nlet deleteUrl = Routing.generate('admin_networking_initcms_layoutblock_deleteAjax');\nfunction initDropZone(){\n\n\n    if (containers.length === 0) {\n        return false;\n    }\n\n    let contentItems = new Sortable(contentTypeList,{\n        group: {name: 'shared', pull: 'clone', put: false},\n        onEnd: function (/**Event*/evt) {\n            evt.to.classList.remove('bg-light-primary')\n        },\n        onChange: function (/**Event*/evt) {\n            evt.to.classList.add('bg-light-primary')\n        }\n    })\n\n    containers.forEach(function (container) {\n\n        let swappable = new Sortable(container, {\n            group: {name: 'shared', pull: true, put: acceptLayoutBlock },\n            animation: 150,\n            onEnd: function (/**Event*/evt) {\n                saveLayoutBlockSort(evt, (response) => {\n                    CMSAdmin.createInitCmsMessageBox(response.data.messageStatus, response.data.message);\n                })\n            },\n            onAdd: function (/**CustomEvent*/evt, dragEl) {\n\n                let count = evt.to.querySelectorAll('.draggable').length;\n                let item = evt.item;\n\n                if(!item.id){\n\n                    let dropzone = container.parentElement\n                    createItem(item.dataset.contentType, dropzone.dataset.pageId, dropzone.dataset.zone, evt.newIndex-1)\n                        .then((response) => {\n                            item.outerHTML = response.data.html\n                            CMSAdmin.createInitCmsMessageBox(response.data.messageStatus, response.data.message);\n                            saveLayoutBlockSort(evt, (response) => {\n                                CMSAdmin.createInitCmsMessageBox(response.data.messageStatus, response.data.message);\n                            })\n\n                        })\n                        .catch((error) => {\n                            let message = error.response.data.detail\n\n                            CMSAdmin.createInitCmsMessageBox('error', message);\n                        })\n                }\n\n                if(count){\n                    evt.to.querySelector('.empty_layout_block').classList.add(\"d-none\")\n                    return\n                }\n\n                evt.to.querySelector('.empty_layout_block').classList.remove(\"d-none\")\n\n\n            },\n            onRemove: function (/**Event*/evt) {\n                let count = evt.from.querySelectorAll('.draggable').length;\n                if(count){\n                    evt.from.querySelector('.empty_layout_block').classList.add(\"d-none\")\n                    return\n                }\n\n                evt.from.querySelector('.empty_layout_block').classList.remove(\"d-none\")\n\n            }\n        });\n    })\n}\n\nlet acceptLayoutBlock = (to, from, dragEl) => {\n    let container = to.el\n    let contentBlock = dragEl\n    let contentTypes = JSON.parse(container.dataset.contentTypes);\n    if(contentTypes.length > 0){\n        if(!contentTypes.includes(contentBlock.dataset.contentType)){\n            return false\n        }\n    }\n\n    let maxItems = container.dataset.maxItems;\n\n    let count = container.querySelectorAll('.draggable').length;\n\n    if(maxItems > 0){\n        if(count >= maxItems){\n            return false\n        }\n    }\n\n    return true\n}\n\nlet saveLayoutBlockSort = (event, callback) => {\n    // CMSAdmin.createInitCmsMessageBox(xhr.messageStatus, xhr.message);\n\n    let zones = [];\n    let pageId = null;\n    let adminCode = null;\n\n    dropzones.forEach(function (dropzone) {\n        let layoutBlocks = dropzone.querySelectorAll(\".draggable\");\n        let addButtons = dropzone.querySelectorAll(\".add-layout\");\n        let zone = dropzone.dataset.zone\n\n        if(!pageId){\n            pageId = dropzone.dataset.pageId\n        }\n\n        if(!adminCode){\n            adminCode = dropzone.dataset.adminCode\n        }\n\n        addButtons.forEach(function (addButton, index) {\n            addButton.dataset.zone = zone;\n            addButton.dataset.sortOrder = index;\n        })\n\n        let layoutBlockIds = [];\n\n        layoutBlocks.forEach(function (layoutBlock, index) {\n            layoutBlockIds.push(layoutBlock.id);\n        })\n        zones.push({\n            zone: zone,\n            layoutBlocks: layoutBlockIds\n        })\n    })\n\n    submitLayoutSort(zones, pageId, adminCode).then(function (response) {\n        if (callback !== undefined) {\n            callback(response)\n        }\n        const event = new CustomEvent(\"layout:sorted\", response);\n        document.dispatchEvent(event);\n\n    })\n\n};\n\nlet createItem = async(contentType, pageId, zone, sortOrder) => {\n\n    return await axios.post(addBlockUrl+'?subclass='+contentType,  {\n        zone: zone,\n        pageId: pageId,\n        sortOrder: sortOrder\n    }, axiosConfig)\n}\n\nlet  submitLayoutSort = async(zones, pageId, adminCode) => {\n    return await axios.post(sortUrl,  {\n        zones: zones,\n        pageId: pageId,\n        code: adminCode,\n    }, axiosConfig)\n\n}\nlet editBlock = (e) => {\n    e.preventDefault();\n    let el = e.target;\n\n    console.log(el)\n\n    if(el.classList.contains('fa-pen-to-square')){\n        el = el.parentElement\n    }\n    \n    let id = el.dataset.value\n\n    let editUrl = Routing.generate('admin_networking_initcms_layoutblock_edit', {id: id})\n    let displayBlock = document.getElementById('layoutBlockHtml'+id)\n    let editBlock = document.getElementById('editBlockHtml'+id)\n\n    axios.get(editUrl, axiosConfig).\n        then( (response) => {\n            editBlock.innerHTML = response.data.html\n            displayBlock.classList.add('d-none')\n            editBlock.classList.remove('d-none')\n            document.body.dispatchEvent(new CustomEvent('fields:added'))\n        })\n}\n\nlet cancelEditBlock = (e) => {\n    let id = e.target.dataset.value\n    let displayBlock = document.getElementById('layoutBlockHtml'+id)\n    let editBlock = document.getElementById('editBlockHtml'+id)\n    editBlock.classList.add('d-none')\n    editBlock.innerHTML = ''\n    displayBlock.classList.remove('d-none')\n}\n\nlet saveLayoutBlock = (e) => {\n    e.preventDefault();\n    let form = e.target.closest('form')\n    let config = {\n        url: form.action,\n        method: form.method,\n        data: new FormData(form),\n        ...axiosConfig\n    }\n\n    if(form.enctype === 'multipart/form-data'){\n        config.headers['Content-Type'] = 'multipart/form-data'\n    }\n    axios.request(config).then( (response) => {\n        if(response.status === 200){\n            let id = response.data.id\n            let displayBlock = document.getElementById('layoutBlockHtml'+id)\n            let editBlock = document.getElementById('editBlockHtml'+id)\n            editBlock.classList.add('d-none')\n            editBlock.innerHTML = ''\n            displayBlock.classList.remove('d-none')\n            displayBlock.innerHTML = response.data.html\n            CMSAdmin.createInitCmsMessageBox(response.data.status, response.data.message);\n        }\n    }).catch( (error) => {\n        let id = error.response.data.id\n        let editBlock = document.getElementById('editBlockHtml'+id)\n        editBlock.innerHTML = error.response.data.html\n        CMSAdmin.createInitCmsMessageBox('error', error.response.data.message);\n        document.body.dispatchEvent(new CustomEvent('fields:added'))\n    })\n\n}\n\n\nlet deleteBlock = (e) => {\n    e.preventDefault();\n    let el = e.target;\n\n    if(el.classList.contains('fa-trash')){\n        el = el.parentElement\n    }\n\n    let container = el.closest('.draggable-zone')\n\n\n    Swal.fire({\n        html: `Are you sure you want to delete this block?`,\n        icon: \"warning\",\n        buttonsStyling: false,\n        showCancelButton: true,\n        confirmButtonText: \"Ok, got it!\",\n        cancelButtonText: 'Nope, cancel it',\n        customClass: {\n            confirmButton: \"btn btn-danger\",\n            cancelButton: 'btn btn-primary'\n        }\n    }).then((result) => {\n        if (result.isConfirmed) {\n            axios.post(deleteUrl, {\n                id: el.dataset.value,\n                _method: 'DELETE'\n            }).then( (response) => {\n\n                document.querySelector('#layoutBlock_'+el.dataset.value).remove()\n                CMSAdmin.createInitCmsMessageBox(response.data.messageStatus, response.data.message);\n\n\n                if(container.querySelectorAll('.draggable').length){\n                    container.querySelector('.empty_layout_block').classList.add(\"d-none\")\n                    return\n                }\n\n                container.querySelector('.empty_layout_block').classList.remove(\"d-none\")\n                saveLayoutBlockSort();\n            }).catch((err) => {\n\n                console.log(err)\n                CMSAdmin.createInitCmsMessageBox('error', 'Something went wrong');\n            })\n        }\n    })\n}\n\nKTUtil.onDOMContentLoaded(function () {\n    containers = document.querySelectorAll(\".draggable-zone\");\n    dropzones = document.querySelectorAll(\".dropzone\");\n    contentTypeList = document.querySelector(\"#content_item_list\");\n\n    KTUtil.on(document.body,  '.delete_block', 'click', function (e) {\n        deleteBlock(e)\n    })\n\n    KTUtil.on(document.body,  '.edit_block', 'click', function (e) {\n        editBlock(e)\n    })\n\n    KTUtil.on(document.body,  '[data-dismiss=\"edit\"]', 'click', function (e) {\n        cancelEditBlock(e)\n    })\n\n    KTUtil.on(document.body,  '[data-save=\"edit\"]', 'click', function (e) {\n        saveLayoutBlock(e)\n    })\n    initDropZone();\n})"]}