{"version":3,"file":"plugin.js","names":["CKEDITOR","plugins","add","lang","version","requires","bbcodePluginLoaded","onLoad","document","appendStyleSheet","this","path","init","editor","defaultFormat","lastWordCount","lastCharCount","lastParagraphs","limitReachedNotified","snapShot","getSnapshot","timeoutId","notification","dispatchEvent","type","currentLength","maxLength","cEvent","eventInitDict","bubbles","cancelable","detail","CustomEvent","o_O","createEvent","initCustomEvent","defaultConfig","showRemaining","showParagraphs","showWordCount","showCharCount","countBytesAsChars","countSpacesAsChars","countHTML","countLineBreaks","hardLimit","maxWordCount","maxCharCount","maxParagraphs","filter","pasteWarningDuration","wordCountGreaterThanMaxLengthEvent","charCountGreaterThanMaxLengthEvent","wordCountLessThanMaxLengthEvent","charCountLessThanMaxLengthEvent","config","tools","extend","wordcount","ParagraphsRemaining","Paragraphs","WordCountRemaining","WordCount","format","counterId","editorInstance","name","counterElement","getElementById","strip","html","replace","tmp","createElement","innerHTML","textContent","innerText","htmlParser","fragment","fromHtml","writer","basicWriter","applyTo","writeHtml","getHtml","countCharacters","text","normalizedText","fullPage","i","search","RegExp","j","substring","count","stringLength","length","String","partCount","encodeURI","split","countParagraphs","countWords","words","wordIndex","match","splice","updateCounter","paragraphs","wordCount","charCount","fire","firedBy","getData","dataValue","env","gecko","deltaWord","deltaChar","deltaParagraphs","notify","loadSnapshot","Locked","className","limitReached","limitRestored","bbcode","on","event","mode","clearTimeout","setTimeout","bind","elementMode","ELEMENT_MODE_INLINE","data","space","title","message","pasteWarning","duration","isVisible","show","cancel"],"sources":["wordcount/plugin.js"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.html or http://ckeditor.com/license\n */\n\nCKEDITOR.plugins.add(\"wordcount\",\n    {\n        lang:\n            \"ar,bg,ca,cs,da,de,el,en,es,eu,fa,fi,fr,he,hr,hu,it,ko,ja,nl,no,pl,pt,pt-br,ru,sk,sv,tr,uk,zh-cn,zh\", // %REMOVE_LINE_CORE%\n        version: \"1.17.3\",\n        requires: 'htmlwriter,notification,undo',\n        bbcodePluginLoaded: false,\n        onLoad: function() {\n            CKEDITOR.document.appendStyleSheet(this.path + \"css/wordcount.css\");\n        },\n        init: function(editor) {\n            var defaultFormat = \"\",\n                lastWordCount = -1,\n                lastCharCount = -1,\n                lastParagraphs = -1,\n                limitReachedNotified = false,\n                limitRestoredNotified = false,\n                snapShot = editor.getSnapshot(),\n                timeoutId = 0,\n                notification = null;\n\n\n            var dispatchEvent = function(type, currentLength, maxLength) {\n                if (typeof document.dispatchEvent == 'undefined') {\n                    return;\n                }\n\n                type = 'ckeditor.wordcount.' + type;\n\n                var cEvent;\n                var eventInitDict = {\n                    bubbles: false,\n                    cancelable: true,\n                    detail: {\n                        currentLength: currentLength,\n                        maxLength: maxLength\n                    }\n                };\n\n                try {\n                    cEvent = new CustomEvent(type, eventInitDict);\n                } catch (o_O) {\n                    cEvent = document.createEvent('CustomEvent');\n                    cEvent.initCustomEvent(\n                        type,\n                        eventInitDict.bubbles,\n                        eventInitDict.cancelable,\n                        eventInitDict.detail\n                    );\n                }\n\n                document.dispatchEvent(cEvent);\n            };\n\n            // Default Config\n            var defaultConfig = {\n                showRemaining: false,\n                showParagraphs: true,\n                showWordCount: true,\n                showCharCount: false,\n                countBytesAsChars: false,\n                countSpacesAsChars: false,\n                countHTML: false,\n                countLineBreaks: false,\n                hardLimit: true,\n\n                //MAXLENGTH Properties\n                maxWordCount: -1,\n                maxCharCount: -1,\n                maxParagraphs: -1,\n\n                // Filter\n                filter: null,\n\n                // How long to show the 'paste' warning\n                pasteWarningDuration: 0,\n\n                //DisAllowed functions\n                wordCountGreaterThanMaxLengthEvent: function(currentLength, maxLength) {\n                    dispatchEvent('wordCountGreaterThanMaxLengthEvent', currentLength, maxLength);\n                },\n                charCountGreaterThanMaxLengthEvent: function(currentLength, maxLength) {\n                    dispatchEvent('charCountGreaterThanMaxLengthEvent', currentLength, maxLength);\n                },\n\n                //Allowed Functions\n                wordCountLessThanMaxLengthEvent: function(currentLength, maxLength) {\n                    dispatchEvent('wordCountLessThanMaxLengthEvent', currentLength, maxLength);\n                },\n                charCountLessThanMaxLengthEvent: function(currentLength, maxLength) {\n                    dispatchEvent('charCountLessThanMaxLengthEvent', currentLength, maxLength);\n                }\n            };\n\n            // Get Config & Lang\n            var config = CKEDITOR.tools.extend(defaultConfig, editor.config.wordcount || {}, true);\n\n            if (config.showParagraphs) {\n              if (config.maxParagraphs > -1) {\n                  if (config.showRemaining) {\n                      defaultFormat += \"%paragraphsCount% \" + editor.lang.wordcount.ParagraphsRemaining;\n                  } else {\n                      defaultFormat += editor.lang.wordcount.Paragraphs + \" %paragraphsCount%\";\n\n                      defaultFormat += \"/\" + config.maxParagraphs;\n                  }\n              } else {\n                  defaultFormat += editor.lang.wordcount.Paragraphs + \" %paragraphsCount%\";\n              }\n            }\n\n            if (config.showParagraphs && (config.showWordCount || config.showCharCount)) {\n                defaultFormat += \", \";\n            }\n\n            if (config.showWordCount) {\n                if (config.maxWordCount > -1) {\n                    if (config.showRemaining) {\n                        defaultFormat += \"%wordCount% \" + editor.lang.wordcount.WordCountRemaining;\n                    } else {\n                        defaultFormat += editor.lang.wordcount.WordCount + \" %wordCount%\";\n\n                        defaultFormat += \"/\" + config.maxWordCount;\n                    }\n                } else {\n                    defaultFormat += editor.lang.wordcount.WordCount + \" %wordCount%\";\n                }\n            }\n\n            if (config.showCharCount && config.showWordCount) {\n                defaultFormat += \", \";\n            }\n\n            if (config.showCharCount) {\n                if (config.maxCharCount > -1) {\n                    if (config.showRemaining) {\n                        defaultFormat += \"%charCount% \" +\n                            editor.lang.wordcount[config.countHTML\n                                ? \"CharCountWithHTMLRemaining\"\n                                : \"CharCountRemaining\"];\n                    } else {\n                        defaultFormat += editor.lang.wordcount[config.countHTML\n                                ? \"CharCountWithHTML\"\n                                : \"CharCount\"] +\n                            \" %charCount%\";\n\n                        defaultFormat += \"/\" + config.maxCharCount;\n                    }\n                } else {\n                    defaultFormat += editor.lang.wordcount[config.countHTML ? \"CharCountWithHTML\" : \"CharCount\"] +\n                        \" %charCount%\";\n                }\n            }\n\n            var format = defaultFormat;\n\n            bbcodePluginLoaded = typeof editor.plugins.bbcode != 'undefined';\n\n            function counterId(editorInstance) {\n                return \"cke_wordcount_\" + editorInstance.name;\n            }\n\n            function counterElement(editorInstance) {\n                return document.getElementById(counterId(editorInstance));\n            }\n\n            function strip(html) {\n                if (bbcodePluginLoaded) {\n                    // stripping out BBCode tags [...][/...]\n                    return html.replace(/\\[.*?\\]/gi, '');\n                }\n\n                var tmp = document.createElement(\"div\");\n\n                // Add filter before strip\n                html = filter(html);\n\n                tmp.innerHTML = html;\n\n                if (tmp.textContent == \"\" && typeof tmp.innerText == \"undefined\") {\n                    return \"\";\n                }\n\n                return tmp.textContent || tmp.innerText;\n            }\n\n            /**\n             * Implement filter to add or remove before counting\n             * @param html\n             * @returns string\n             */\n            function filter(html) {\n                if (config.filter instanceof CKEDITOR.htmlParser.filter) {\n                    var fragment = CKEDITOR.htmlParser.fragment.fromHtml(html),\n                        writer = new CKEDITOR.htmlParser.basicWriter();\n                    config.filter.applyTo(fragment);\n                    fragment.writeHtml(writer);\n                    return writer.getHtml();\n                }\n                return html;\n            }\n\n            function countCharacters(text) {\n                if (config.countHTML) {\n                    return (filter(text).length);\n                }\n\n                var normalizedText;\n\n                // strip body tags\n                if (editor.config.fullPage) {\n                    var i = text.search(new RegExp(\"<body>\", \"i\"));\n                    if (i != -1) {\n                        var j = text.search(new RegExp(\"</body>\", \"i\"));\n                        text = text.substring(i + 6, j);\n                    }\n\n                }\n\n                normalizedText = text;\n\n                if (!config.countSpacesAsChars) {\n                    normalizedText = text.replace(/\\s/g, \"\").replace(/&nbsp;/g, \"\");\n                }\n\n                if (config.countLineBreaks) {\n                    normalizedText = normalizedText.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n                } else {\n                    normalizedText = normalizedText.replace(/(\\r\\n|\\n|\\r)/gm, \"\").replace(/&nbsp;/gi, \" \");\n                }\n\n                normalizedText = strip(normalizedText).replace(/^([\\t\\r\\n]*)$/, \"\");\n\n                return config.countBytesAsChars ? (countBytes(normalizedText)) : (normalizedText.length);\n            }\n\n            function countBytes(text) {\n                var count = 0, stringLength = text.length, i;\n                text = String(text || \"\");\n                for (i = 0; i < stringLength; i++) {\n                    var partCount = encodeURI(text[i]).split(\"%\").length;\n                    count += partCount == 1 ? 1 : partCount - 1;\n                }\n                return count;\n            }\n\n            function countParagraphs(text) {\n                return (text.replace(/&nbsp;/g, \" \").replace(/(<([^>]+)>)/ig, \"\").replace(/^\\s*$[\\n\\r]{1,}/gm, \"++\")\n                    .split(\"++\").length);\n            }\n\n            function countWords(text) {\n                var normalizedText = text.replace(/(\\r\\n|\\n|\\r)/gm, \" \").replace(/^\\s+|\\s+$/g, \"\")\n                    .replace(\"&nbsp;\", \" \");\n\n                normalizedText = strip(normalizedText);\n\n                var words = normalizedText.split(/\\s+/);\n\n                for (var wordIndex = words.length - 1; wordIndex >= 0; wordIndex--) {\n                    if (words[wordIndex].match(/^([\\s\\t\\r\\n]*)$/)) {\n                        words.splice(wordIndex, 1);\n                    }\n                }\n\n                return (words.length);\n            }\n\n            function limitReached(editorInstance, notify) {\n                limitReachedNotified = true;\n                limitRestoredNotified = false;\n\n                if (config.hardLimit) {\n                    editorInstance.loadSnapshot(snapShot);\n                    // lock editor\n                    editorInstance.config.Locked = 1;\n                }\n\n                if (!notify) {\n                    counterElement(editorInstance).className = \"cke_path_item cke_wordcountLimitReached\";\n                    editorInstance.fire(\"limitReached\", { firedBy: \"wordCount.limitReached\" }, editor);\n                }\n            }\n\n            function limitRestored(editorInstance) {\n                limitRestoredNotified = true;\n                limitReachedNotified = false;\n                editorInstance.config.Locked = 0;\n                snapShot = editor.getSnapshot();\n\n                counterElement(editorInstance).className = \"cke_path_item\";\n            }\n\n            function updateCounter(editorInstance) {\n                if (!counterElement(editorInstance)) {\n                    return;\n                }\n\n                var paragraphs = 0,\n                    wordCount = 0,\n                    charCount = 0,\n                    text;\n\n                // BeforeGetData and getData events are fired when calling\n                // getData(). We can prevent this by passing true as an\n                // argument to getData(). This allows us to fire the events\n                // manually with additional event data: firedBy. This additional\n                // data helps differentiate calls to getData() made by\n                // wordCount plugin from calls made by other plugins/code.\n                editorInstance.fire(\"beforeGetData\", { firedBy: \"wordCount.updateCounter\" }, editor);\n                text = editorInstance.getData(true);\n                editorInstance.fire(\"getData\", { dataValue: text, firedBy: \"wordCount.updateCounter\" }, editor);\n\n                if (text) {\n                    if (config.showCharCount) {\n                        charCount = countCharacters(text);\n                    }\n\n                    if (config.showParagraphs) {\n                        paragraphs = countParagraphs(text);\n                    }\n\n                    if (config.showWordCount) {\n                        wordCount = countWords(text);\n                    }\n                }\n\n                var html = format;\n                if (config.showRemaining) {\n                    if (config.maxCharCount >= 0) {\n                        html = html.replace(\"%charCount%\", config.maxCharCount - charCount);\n                    } else {\n                        html = html.replace(\"%charCount%\", charCount);\n                    }\n\n                    if (config.maxWordCount >= 0) {\n                        html = html.replace(\"%wordCount%\", config.maxWordCount - wordCount);\n                    } else {\n                        html = html.replace(\"%wordCount%\", wordCount);\n                    }\n\n                    if (config.maxParagraphs >= 0) {\n                        html = html.replace(\"%paragraphsCount%\", config.maxParagraphs - paragraphs);\n                    } else {\n                        html = html.replace(\"%paragraphsCount%\", paragraphs);\n                    }\n                } else {\n                    html = html.replace(\"%wordCount%\", wordCount).replace(\"%charCount%\", charCount).replace(\"%paragraphsCount%\", paragraphs);\n                }\n\n                (editorInstance.config.wordcount || (editorInstance.config.wordcount = {})).wordCount = wordCount;\n                (editorInstance.config.wordcount || (editorInstance.config.wordcount = {})).charCount = charCount;\n\n                if (CKEDITOR.env.gecko) {\n                    counterElement(editorInstance).innerHTML = html;\n                } else {\n                    counterElement(editorInstance).innerText = html;\n                }\n\n                if (charCount == lastCharCount && wordCount == lastWordCount && paragraphs == lastParagraphs) {\n                    if (charCount == config.maxCharCount || wordCount == config.maxWordCount || paragraphs > config.maxParagraphs) {\n                        snapShot = editor.getSnapshot();\n                    }\n                    return true;\n                }\n\n                //If the limit is already over, allow the deletion of characters/words. Otherwise,\n                //the user would have to delete at one go the number of offending characters\n                var deltaWord = wordCount - lastWordCount;\n                var deltaChar = charCount - lastCharCount;\n                var deltaParagraphs = paragraphs - lastParagraphs;\n\n                lastWordCount = wordCount;\n                lastCharCount = charCount;\n                lastParagraphs = paragraphs;\n\n                if (lastWordCount == -1) {\n                    lastWordCount = wordCount;\n                }\n                if (lastCharCount == -1) {\n                    lastCharCount = charCount;\n                }\n                if (lastParagraphs == -1) {\n                    lastParagraphs = paragraphs;\n                }\n\n                // Check for word limit and/or char limit\n                if ((config.maxWordCount > -1 && wordCount > config.maxWordCount && deltaWord > 0) ||\n                    (config.maxCharCount > -1 && charCount > config.maxCharCount && deltaChar > 0) ||\n                    (config.maxParagraphs > -1 && paragraphs > config.maxParagraphs && deltaParagraphs > 0)) {\n\n                    limitReached(editorInstance, limitReachedNotified);\n                } else if ((config.maxWordCount == -1 || wordCount <= config.maxWordCount) &&\n                    (config.maxCharCount == -1 || charCount <= config.maxCharCount) &&\n                    (config.maxParagraphs == -1 || paragraphs <= config.maxParagraphs)) {\n\n                    limitRestored(editorInstance);\n                } else {\n                    snapShot = editorInstance.getSnapshot();\n                }\n\n                // update instance\n                editorInstance.wordCount =\n                {\n                    paragraphs: paragraphs,\n                    wordCount: wordCount,\n                    charCount: charCount\n                };\n\n\n                // Fire Custom Events\n                if (config.charCountGreaterThanMaxLengthEvent && config.charCountLessThanMaxLengthEvent) {\n                    if (charCount > config.maxCharCount && config.maxCharCount > -1) {\n                        config.charCountGreaterThanMaxLengthEvent(charCount, config.maxCharCount);\n                    } else {\n                        config.charCountLessThanMaxLengthEvent(charCount, config.maxCharCount);\n                    }\n                }\n\n                if (config.wordCountGreaterThanMaxLengthEvent && config.wordCountLessThanMaxLengthEvent) {\n                    if (wordCount > config.maxWordCount && config.maxWordCount > -1) {\n                        config.wordCountGreaterThanMaxLengthEvent(wordCount, config.maxWordCount);\n\n                    } else {\n                        config.wordCountLessThanMaxLengthEvent(wordCount, config.maxWordCount);\n                    }\n                }\n\n                return true;\n            }\n\n            editor.on(\"key\",\n                function(event) {\n                    if (editor.mode === \"source\") {\n                        clearTimeout(timeoutId);\n                        timeoutId = setTimeout(\n                            updateCounter.bind(this, event.editor),\n                            250\n                        );\n                    }\n                },\n                editor,\n                null,\n                100);\n\n            editor.on(\"change\",\n                function(event) {\n                    clearTimeout(timeoutId);\n                    timeoutId = setTimeout(\n                        updateCounter.bind(this, event.editor),\n                        250\n                    );\n                },\n                editor,\n                null,\n                100);\n\n            editor.on(\"uiSpace\",\n                function(event) {\n                    if (editor.elementMode === CKEDITOR.ELEMENT_MODE_INLINE) {\n                        if (event.data.space == \"top\") {\n                            event.data.html += \"<div class=\\\"cke_wordcount\\\" style=\\\"\\\"\" +\n                                \" title=\\\"\" +\n                                editor.lang.wordcount.title +\n                                \"\\\"\" +\n                                \"><span id=\\\"\" +\n                                counterId(event.editor) +\n                                \"\\\" class=\\\"cke_path_item\\\">&nbsp;</span></div>\";\n                        }\n                    } else {\n                        if (event.data.space == \"bottom\") {\n                            event.data.html += \"<div class=\\\"cke_wordcount\\\" style=\\\"\\\"\" +\n                                \" title=\\\"\" +\n                                editor.lang.wordcount.title +\n                                \"\\\"\" +\n                                \"><span id=\\\"\" +\n                                counterId(event.editor) +\n                                \"\\\" class=\\\"cke_path_item\\\">&nbsp;</span></div>\";\n                        }\n                    }\n\n                },\n                editor,\n                null,\n                100);\n\n            editor.on(\"dataReady\",\n                function(event) {\n                    updateCounter(event.editor);\n                },\n                editor,\n                null,\n                100);\n\n            editor.on(\"paste\",\n                function(event) {\n                    if (config.maxWordCount > 0 || config.maxCharCount > 0 || config.maxParagraphs > 0) {\n\n                        // Check if pasted content is above the limits\n                        var wordCount = -1,\n                            charCount = -1,\n                            paragraphs = -1;\n\n                        // BeforeGetData and getData events are fired when calling\n                        // getData(). We can prevent this by passing true as an\n                        // argument to getData(). This allows us to fire the events\n                        // manually with additional event data: firedBy. This additional\n                        // data helps differentiate calls to getData() made by\n                        // wordCount plugin from calls made by other plugins/code.\n                        event.editor.fire(\"beforeGetData\", { firedBy: \"wordCount.onPaste\" }, event.editor);\n                        var text = event.editor.getData(true);\n                        event.editor.fire(\"getData\", { dataValue: text, firedBy: \"wordCount.onPaste\" }, event.editor);\n\n                        text += event.data.dataValue;\n\n                        if (config.showCharCount) {\n                            charCount = countCharacters(text);\n                        }\n\n                        if (config.showWordCount) {\n                            wordCount = countWords(text);\n                        }\n\n                        if (config.showParagraphs) {\n                            paragraphs = countParagraphs(text);\n                        }\n\n\n                        // Instantiate the notification when needed and only have one instance\n                        if (notification === null) {\n                            notification = new CKEDITOR.plugins.notification(event.editor,\n                                {\n                                    message: event.editor.lang.wordcount.pasteWarning,\n                                    type: 'warning',\n                                    duration: config.pasteWarningDuration\n                                });\n                        }\n\n                        if (config.maxCharCount > 0 && charCount > config.maxCharCount && config.hardLimit) {\n                            if (!notification.isVisible()) {\n                                notification.show();\n                            }\n                            event.cancel();\n                        }\n\n                        if (config.maxWordCount > 0 && wordCount > config.maxWordCount && config.hardLimit) {\n                            if (!notification.isVisible()) {\n                                notification.show();\n                            }\n                            event.cancel();\n                        }\n\n                        if (config.maxParagraphs > 0 && paragraphs > config.maxParagraphs && config.hardLimit) {\n                            if (!notification.isVisible()) {\n                                notification.show();\n                            }\n                            event.cancel();\n                        }\n                    }\n                },\n                editor,\n                null,\n                100);\n\n            editor.on(\"afterPaste\",\n                function(event) {\n                    updateCounter(event.editor);\n                },\n                editor,\n                null,\n                100);\n        }\n    });"]}