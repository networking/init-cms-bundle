{"version":3,"file":"plugin.js","names":["CKEDITOR","plugins","add","requires","ajax","createXMLHttpRequest","env","ie","location","protocol","XMLHttpRequest","e","ActiveXObject","checkStatus","xhr","readyState","status","getResponseText","responseText","getResponseXml","xml","responseXML","firstChild","load","url","callback","getResponseFn","async","open","onreadystatechange","send","post","data","contentType","setRequestHeader","loadXml"],"sources":["ajax/plugin.js"],"mappings":";;;;AAYCA,SAASC,QAAQC,IAAK,OAAQ,CAC7BC,SAAU,QASXH,SAASI,KAAO,WACf,SAASC,IAGR,IAAML,SAASM,IAAIC,IAA2B,SAArBC,SAASC,SACjC,IACC,OAAO,IAAIC,cACZ,CAAE,MAAQC,GACV,CAGD,IACC,OAAO,IAAIC,cAAe,iBAC3B,CAAE,MAAQD,GAAK,CACf,IACC,OAAO,IAAIC,cAAe,oBAC3B,CAAE,MAAQD,GAAK,CAEf,OAAO,IACR,CAEA,SAASE,EAAaC,GAOrB,OAA2B,GAAlBA,EAAIC,aAAuBD,EAAIE,QAAU,KAAOF,EAAIE,OAAS,KAAuB,KAAdF,EAAIE,QAAgC,IAAfF,EAAIE,QAA8B,MAAdF,EAAIE,OAC7H,CAEA,SAASC,EAAiBH,GACzB,OAAKD,EAAaC,GACVA,EAAII,aACL,IACR,CAEA,SAASC,EAAgBL,GACxB,GAAKD,EAAaC,GAAQ,CACzB,IAAIM,EAAMN,EAAIO,YACd,OAAO,IAAIrB,SAASoB,IAAKA,GAAOA,EAAIE,WAAaF,EAAMN,EAAII,aAC5D,CACA,OAAO,IACR,CAEA,SAASK,EAAMC,EAAKC,EAAUC,GAC7B,IAAIC,IAAUF,EAEVX,EAAMT,IAEV,OAAMS,GAGNA,EAAIc,KAAM,MAAOJ,EAAKG,GAEjBA,IAEJb,EAAIe,mBAAqB,WACD,GAAlBf,EAAIC,aACRU,EAAUC,EAAeZ,IACzBA,EAAM,KAER,GAGDA,EAAIgB,KAAM,MAEHH,EAAQ,GAAKD,EAAeZ,IAhB3B,IAiBT,CAwBA,MAAO,CAoBNS,KAAM,SAAUC,EAAKC,GACpB,OAAOF,EAAMC,EAAKC,EAAUR,EAC7B,EAsBAc,KAAM,SAAUP,EAAKQ,EAAMC,EAAaR,GACvC,OAnEF,SAAeD,EAAKQ,EAAMC,EAAaR,EAAUC,GAChD,IAAIZ,EAAMT,IAEV,IAAMS,EACL,OAAO,KAERA,EAAIc,KAAM,OAAQJ,GAAK,GAEvBV,EAAIe,mBAAqB,WACD,GAAlBf,EAAIC,aACHU,GACJA,EAAUC,EAAeZ,IAE1BA,EAAM,KAER,EAEAA,EAAIoB,iBAAkB,eAAgBD,GAAe,oDAErDnB,EAAIgB,KAAME,EACX,CA+CSD,CAAMP,EAAKQ,EAAMC,EAAaR,EAAUR,EAChD,EAoBAkB,QAAS,SAAUX,EAAKC,GACvB,OAAOF,EAAMC,EAAKC,EAAUN,EAC7B,EAEA,CAlKc","sourcesContent":["/* global ActiveXObject */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @fileOverview Defines the {@link CKEDITOR.ajax} object, which stores Ajax methods for\n *\t\tdata loading.\n */\n\n( function() {\n\tCKEDITOR.plugins.add( 'ajax', {\n\t\trequires: 'xml'\n\t} );\n\n\t/**\n\t * Ajax methods for data loading.\n\t *\n\t * @class\n\t * @singleton\n\t */\n\tCKEDITOR.ajax = ( function() {\n\t\tfunction createXMLHttpRequest() {\n\t\t\t// In IE, using the native XMLHttpRequest for local files may throw\n\t\t\t// \"Access is Denied\" errors.\n\t\t\tif ( !CKEDITOR.env.ie || location.protocol != 'file:' ) {\n\t\t\t\ttry {\n\t\t\t\t\treturn new XMLHttpRequest();\n\t\t\t\t} catch ( e ) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\treturn new ActiveXObject( 'Msxml2.XMLHTTP' );\n\t\t\t} catch ( e ) {}\n\t\t\ttry {\n\t\t\t\treturn new ActiveXObject( 'Microsoft.XMLHTTP' );\n\t\t\t} catch ( e ) {}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tfunction checkStatus( xhr ) {\n\t\t\t// HTTP Status Codes:\n\t\t\t//\t 2xx : Success\n\t\t\t//\t 304 : Not Modified\n\t\t\t//\t   0 : Returned when running locally (file://)\n\t\t\t//\t1223 : IE may change 204 to 1223 (see http://dev.jquery.com/ticket/1450)\n\n\t\t\treturn ( xhr.readyState == 4 && ( ( xhr.status >= 200 && xhr.status < 300 ) || xhr.status == 304 || xhr.status === 0 || xhr.status == 1223 ) );\n\t\t}\n\n\t\tfunction getResponseText( xhr ) {\n\t\t\tif ( checkStatus( xhr ) )\n\t\t\t\treturn xhr.responseText;\n\t\t\treturn null;\n\t\t}\n\n\t\tfunction getResponseXml( xhr ) {\n\t\t\tif ( checkStatus( xhr ) ) {\n\t\t\t\tvar xml = xhr.responseXML;\n\t\t\t\treturn new CKEDITOR.xml( xml && xml.firstChild ? xml : xhr.responseText );\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tfunction load( url, callback, getResponseFn ) {\n\t\t\tvar async = !!callback;\n\n\t\t\tvar xhr = createXMLHttpRequest();\n\n\t\t\tif ( !xhr )\n\t\t\t\treturn null;\n\n\t\t\txhr.open( 'GET', url, async );\n\n\t\t\tif ( async ) {\n\t\t\t\t// TODO: perform leak checks on this closure.\n\t\t\t\txhr.onreadystatechange = function() {\n\t\t\t\t\tif ( xhr.readyState == 4 ) {\n\t\t\t\t\t\tcallback( getResponseFn( xhr ) );\n\t\t\t\t\t\txhr = null;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\txhr.send( null );\n\n\t\t\treturn async ? '' : getResponseFn( xhr );\n\t\t}\n\n\t\tfunction post( url, data, contentType, callback, getResponseFn ) {\n\t\t\tvar xhr = createXMLHttpRequest();\n\n\t\t\tif ( !xhr )\n\t\t\t\treturn null;\n\n\t\t\txhr.open( 'POST', url, true );\n\n\t\t\txhr.onreadystatechange = function() {\n\t\t\t\tif ( xhr.readyState == 4 ) {\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tcallback( getResponseFn( xhr ) );\n\t\t\t\t\t}\n\t\t\t\t\txhr = null;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\txhr.setRequestHeader( 'Content-type', contentType || 'application/x-www-form-urlencoded; charset=UTF-8' );\n\n\t\t\txhr.send( data );\n\t\t}\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Loads data from a URL as plain text.\n\t\t\t *\n\t\t\t *\t\t// Load data synchronously.\n\t\t\t *\t\tvar data = CKEDITOR.ajax.load( 'somedata.txt' );\n\t\t\t *\t\talert( data );\n\t\t\t *\n\t\t\t *\t\t// Load data asynchronously.\n\t\t\t *\t\tvar data = CKEDITOR.ajax.load( 'somedata.txt', function( data ) {\n\t\t\t *\t\t\talert( data );\n\t\t\t *\t\t} );\n\t\t\t *\n\t\t\t * @param {String} url The URL from which the data is loaded.\n\t\t\t * @param {Function} [callback] A callback function to be called on\n\t\t\t * data load. If not provided, the data will be loaded\n\t\t\t * synchronously.\n\t\t\t * @returns {String} The loaded data. For asynchronous requests, an\n\t\t\t * empty string. For invalid requests, `null`.\n\t\t\t */\n\t\t\tload: function( url, callback ) {\n\t\t\t\treturn load( url, callback, getResponseText );\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates an asynchronous POST `XMLHttpRequest` of the given `url`, `data` and optional `contentType`.\n\t\t\t * Once the request is done, regardless if it is successful or not, the `callback` is called\n\t\t\t * with `XMLHttpRequest#responseText` or `null` as an argument.\n\t\t\t *\n\t\t\t *\t\tCKEDITOR.ajax.post( 'url/post.php', 'foo=bar', null, function( data ) {\n\t\t\t *\t\t\tconsole.log( data );\n\t\t\t *\t\t} );\n\t\t\t *\n\t\t\t *\t\tCKEDITOR.ajax.post( 'url/post.php', JSON.stringify( { foo: 'bar' } ), 'application/json', function( data ) {\n\t\t\t *\t\t\tconsole.log( data );\n\t\t\t *\t\t} );\n\t\t\t *\n\t\t\t * @since 4.4\n\t\t\t * @param {String} url The URL of the request.\n\t\t\t * @param {String/Object/Array} data Data passed to `XMLHttpRequest#send`.\n\t\t\t * @param {String} [contentType='application/x-www-form-urlencoded; charset=UTF-8'] The value of the `Content-type` header.\n\t\t\t * @param {Function} [callback] A callback executed asynchronously with `XMLHttpRequest#responseText` or `null` as an argument,\n\t\t\t * depending on the `status` of the request.\n\t\t\t */\n\t\t\tpost: function( url, data, contentType, callback ) {\n\t\t\t\treturn post( url, data, contentType, callback, getResponseText );\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Loads data from a URL as XML.\n\t\t\t *\n\t\t\t *\t\t// Load XML synchronously.\n\t\t\t *\t\tvar xml = CKEDITOR.ajax.loadXml( 'somedata.xml' );\n\t\t\t *\t\talert( xml.getInnerXml( '//' ) );\n\t\t\t *\n\t\t\t *\t\t// Load XML asynchronously.\n\t\t\t *\t\tvar data = CKEDITOR.ajax.loadXml( 'somedata.xml', function( xml ) {\n\t\t\t *\t\t\talert( xml.getInnerXml( '//' ) );\n\t\t\t *\t\t} );\n\t\t\t *\n\t\t\t * @param {String} url The URL from which the data is loaded.\n\t\t\t * @param {Function} [callback] A callback function to be called on\n\t\t\t * data load. If not provided, the data will be loaded synchronously.\n\t\t\t * @returns {CKEDITOR.xml} An XML object storing the loaded data. For asynchronous requests, an\n\t\t\t * empty string. For invalid requests, `null`.\n\t\t\t */\n\t\t\tloadXml: function( url, callback ) {\n\t\t\t\treturn load( url, callback, getResponseXml );\n\t\t\t}\n\t\t};\n\t} )();\n\n} )();\n"]}