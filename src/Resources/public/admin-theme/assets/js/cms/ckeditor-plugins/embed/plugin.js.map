{"version":3,"file":"plugin.js","names":["CKEDITOR","plugins","add","icons","hidpi","requires","init","editor","widgetDefinition","embedBase","createWidgetBaseDefinition","config","embed_provider","error","tools","extend","dialog","button","lang","embedbase","allowedContent","requiredContent","providerUrl","template","styleToAllowedContentRules","style","div","propertiesOnly","classes","getClassesArray","attributes","upcast","el","data","name","url","downcast","this","widgets","filter","addElementCallback","FILTER_SKIP_TREE"],"sources":["embed/plugin.js"],"mappings":";;;;CAKA,WACC,aAEAA,SAASC,QAAQC,IAAK,QAAS,CAC9BC,MAAO,QACPC,OAAO,EACPC,SAAU,YAEVC,KAAM,SAAUC,GACf,IAAIC,EAAmBR,SAASC,QAAQQ,UAAUC,2BAA4BH,GAExEA,EAAOI,OAAOC,gBACnBZ,SAASa,MAAO,yBAIjBb,SAASc,MAAMC,OAAQP,EAAkB,CAExCQ,OAAQ,YACRC,OAAQV,EAAOW,KAAKC,UAAUF,OAC9BG,eAAgB,wBAChBC,gBAAiB,uBACjBC,YAAa,IAAItB,SAASuB,SAAUhB,EAAOI,OAAOC,gBAAkB,IAMpEY,2BAA4B,SAAUC,GAIrC,MAAO,CACNC,IAAK,CACJC,gBAAgB,EAChBC,QALYH,EAAMI,kBAMlBC,WAAY,oBAGf,EAEAC,OAAQ,SAAUC,EAAIC,GACrB,GAAgB,OAAXD,EAAGE,MAAiBF,EAAGF,WAAY,mBAGvC,OAFAG,EAAKE,IAAMH,EAAGF,WAAY,oBAEnB,CAET,EAEAM,SAAU,SAAUJ,GACnBA,EAAGF,WAAY,mBAAsBO,KAAKJ,KAAKE,GAChD,IACE,GAGH5B,EAAO+B,QAAQpC,IAAK,QAASM,GAG7BD,EAAOgC,OAAOC,oBAAoB,SAAUR,GAC3C,GAAK,oBAAqBA,EAAGF,WAC5B,OAAO9B,SAASyC,gBAElB,GACD,GAGA,CAlEF","sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n( function() {\n\t'use strict';\n\n\tCKEDITOR.plugins.add( 'embed', {\n\t\ticons: 'embed', // %REMOVE_LINE_CORE%\n\t\thidpi: true, // %REMOVE_LINE_CORE%\n\t\trequires: 'embedbase',\n\n\t\tinit: function( editor ) {\n\t\t\tvar widgetDefinition = CKEDITOR.plugins.embedBase.createWidgetBaseDefinition( editor );\n\n\t\t\tif ( !editor.config.embed_provider ) {\n\t\t\t\tCKEDITOR.error( 'embed-no-provider-url' );\n\t\t\t}\n\n\t\t\t// Extend the base definition with additional properties.\n\t\t\tCKEDITOR.tools.extend( widgetDefinition, {\n\t\t\t\t// Use a dialog exposed by the embedbase plugin.\n\t\t\t\tdialog: 'embedBase',\n\t\t\t\tbutton: editor.lang.embedbase.button,\n\t\t\t\tallowedContent: 'div[!data-oembed-url]',\n\t\t\t\trequiredContent: 'div[data-oembed-url]',\n\t\t\t\tproviderUrl: new CKEDITOR.template( editor.config.embed_provider || '' ),\n\n\t\t\t\t// The filter element callback actually allows all divs with data-oembed-url,\n\t\t\t\t// so registering styles to the filter is virtually unnecessary because\n\t\t\t\t// classes won't be filtered out. However, registering them will make filter.check() work\n\t\t\t\t// which may be important in some cases.\n\t\t\t\tstyleToAllowedContentRules: function( style ) {\n\t\t\t\t\t// Retrieve classes defined in the style.\n\t\t\t\t\tvar classes = style.getClassesArray();\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdiv: {\n\t\t\t\t\t\t\tpropertiesOnly: true,\n\t\t\t\t\t\t\tclasses: classes,\n\t\t\t\t\t\t\tattributes: '!data-oembed-url'\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\tupcast: function( el, data ) {\n\t\t\t\t\tif ( el.name == 'div' && el.attributes[ 'data-oembed-url' ] ) {\n\t\t\t\t\t\tdata.url = el.attributes[ 'data-oembed-url' ];\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tdowncast: function( el ) {\n\t\t\t\t\tel.attributes[ 'data-oembed-url' ] = this.data.url;\n\t\t\t\t}\n\t\t\t}, true );\n\n\t\t\t// Register the definition as 'embed' widget.\n\t\t\teditor.widgets.add( 'embed', widgetDefinition );\n\n\t\t\t// Do not filter contents of the div[data-oembed-url] at all.\n\t\t\teditor.filter.addElementCallback( function( el ) {\n\t\t\t\tif ( 'data-oembed-url' in el.attributes ) {\n\t\t\t\t\treturn CKEDITOR.FILTER_SKIP_TREE;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );\n\n} )();\n\n/**\n * A template for the URL of the provider endpoint. This URL will be queried for each resource to be embedded.\n *\n * It uses the following parameters:\n *\n *\t* `url` &ndash; The URL of the requested media, e.g. `https://twitter.com/ckeditor/status/401373919157821441`.\n *\t* `callback` &ndash; The name of the globally available callback used for JSONP requests.\n *\n * For example:\n *\n *\t\tconfig.embed_provider = '//example.com/api/oembed-proxy?resource-url={url}&callback={callback}';\n *\n * By default CKEditor does not use any provider, although there is a ready-to-use URL available via Iframely:\n *\n *\t\tconfig.embed_provider = '//ckeditor.iframe.ly/api/oembed?url={url}&callback={callback}'\n *\n * However, this endpoint contains certain limitations, e.g. it cannot embed Google Maps content.\n * It is recommended to set up an account on the [Iframely](https://iframely.com/) service for\n * better control over embedded content.\n *\n * Read more in the {@glink features/media_embed documentation}\n * and see the {@glink examples/mediaembed example}.\n *\n * Refer to {@link CKEDITOR.plugins.embedBase.baseDefinition#providerUrl} for more information about content providers.\n *\n * **Important note:** Prior to version 4.7.0 this configuration option defaulted to the\n * `//ckeditor.iframe.ly/api/oembed?url={url}&callback={callback}` string.\n *\n * @since 4.5.0\n * @cfg {String} [embed_provider='']\n * @member CKEDITOR.config\n */\n"]}