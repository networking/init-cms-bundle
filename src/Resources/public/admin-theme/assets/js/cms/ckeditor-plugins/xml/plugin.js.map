{"version":3,"file":"plugin.js","names":["CKEDITOR","plugins","add","xml","xmlObjectOrData","baseXml","data","replace","window","ActiveXObject","e","err","async","resolveExternals","validateOnParse","loadXML","DOMParser","parseFromString","this","prototype","selectSingleNode","xpath","contextNode","evaluate","result","singleNodeValue","selectNodes","nodes","node","iterateNext","push","getInnerXml","firstChild","XMLSerializer","serializeToString","nextSibling","length","join"],"sources":["xml/plugin.js"],"mappings":";;;;AAYCA,SAASC,QAAQC,IAAK,MAAO,CAAC,GAY9BF,SAASG,IAAM,SAAUC,GACxB,IAAIC,EAAU,KAEd,GAA+B,iBAAnBD,EACXC,EAAUD,MACN,CACJ,IAAIE,GAASF,GAAmB,IAAKG,QAAS,UAAW,KAKzD,GAAK,kBAAmBC,OAAS,CAChC,IACCH,EAAU,IAAII,cAAe,qBAC9B,CAAE,MAAQC,GACT,IACCL,EAAU,IAAII,cAAe,mBAC9B,CAAE,MAAQE,GAAO,CAClB,CAEKN,IACJA,EAAQO,OAAQ,EAChBP,EAAQQ,kBAAmB,EAC3BR,EAAQS,iBAAkB,EAC1BT,EAAQU,QAAST,GAEnB,MACUE,OAAOQ,YAChBX,GAAU,IAAMW,WAAcC,gBAAiBX,EAAM,YAEvD,CAOAY,KAAKb,QAAUA,CAChB,EAEAL,SAASG,IAAIgB,UAAY,CAgBxBC,iBAAkB,SAAUC,EAAOC,GAClC,IAAIjB,EAAUa,KAAKb,QAEnB,GAAKiB,IAAiBA,EAAcjB,GAAY,CAC/C,GAAK,qBAAsBiB,EAC1B,OAAOA,EAAYF,iBAAkBC,GACjC,GAAKhB,EAAQkB,SAAW,CAC5B,IAAIC,EAASnB,EAAQkB,SAAUF,EAAOC,EAAa,KAAM,EAAG,MAC5D,OAASE,GAAUA,EAAOC,iBAAqB,IAChD,CACD,CAEA,OAAO,IACR,EAmBAC,YAAa,SAAUL,EAAOC,GAC7B,IAAIjB,EAAUa,KAAKb,QAClBsB,EAAQ,GAET,GAAKL,IAAiBA,EAAcjB,GAAY,CAC/C,GAAK,gBAAiBiB,EACrB,OAAOA,EAAYI,YAAaL,GAC5B,GAAKhB,EAAQkB,SAAW,CAC5B,IAAIC,EAASnB,EAAQkB,SAAUF,EAAOC,EAAa,KAAM,EAAG,MAE5D,GAAKE,EAEJ,IADA,IAAII,EACMA,EAAOJ,EAAOK,eACvBF,EAAMG,KAAMF,EAEf,CACD,CAEA,OAAOD,CACR,EAiBAI,YAAa,SAAUV,EAAOC,GAC7B,IAAIM,EAAOV,KAAKE,iBAAkBC,EAAOC,GACxCnB,EAAM,GACP,GAAKyB,EAEJ,IADAA,EAAOA,EAAKI,WACJJ,GACFA,EAAKzB,IACTA,EAAI2B,KAAMF,EAAKzB,KACNK,OAAOyB,eAChB9B,EAAI2B,MAAM,IAAMG,eAAkBC,kBAAmBN,IAEtDA,EAAOA,EAAKO,YAId,OAAOhC,EAAIiC,OAASjC,EAAIkC,KAAM,IAAO,IACtC","sourcesContent":["/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @fileOverview Defines the {@link CKEDITOR.xml} class, which represents a\n *\t\tloaded XML document.\n */\n\n( function() {\n\t/* global ActiveXObject */\n\tCKEDITOR.plugins.add( 'xml', {} );\n\n\t/**\n\t * Represents a loaded XML document.\n\t *\n\t *\t\tvar xml = new CKEDITOR.xml( '<books><book title=\"My Book\" /></books>' );\n\t *\n\t * @class\n\t * @constructor Creates xml class instance.\n\t * @param {Object/String} xmlObjectOrData A native XML (DOM document) object or\n\t * a string containing the XML definition to be loaded.\n\t */\n\tCKEDITOR.xml = function( xmlObjectOrData ) {\n\t\tvar baseXml = null;\n\n\t\tif ( typeof xmlObjectOrData == 'object' )\n\t\t\tbaseXml = xmlObjectOrData;\n\t\telse {\n\t\t\tvar data = ( xmlObjectOrData || '' ).replace( /&nbsp;/g, '\\xA0' );\n\n\t\t\t// Check ActiveXObject before DOMParser, because IE10+ support both, but\n\t\t\t// there's no XPath support in DOMParser instance.\n\t\t\t// Also, the only check for ActiveXObject which still works in IE11+ is with `in` operator.\n\t\t\tif ( 'ActiveXObject' in window ) {\n\t\t\t\ttry {\n\t\t\t\t\tbaseXml = new ActiveXObject( 'MSXML2.DOMDocument' );\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbaseXml = new ActiveXObject( 'Microsoft.XmlDom' );\n\t\t\t\t\t} catch ( err ) {}\n\t\t\t\t}\n\n\t\t\t\tif ( baseXml ) {\n\t\t\t\t\tbaseXml.async = false;\n\t\t\t\t\tbaseXml.resolveExternals = false;\n\t\t\t\t\tbaseXml.validateOnParse = false;\n\t\t\t\t\tbaseXml.loadXML( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( window.DOMParser ) {\n\t\t\t\tbaseXml = ( new DOMParser() ).parseFromString( data, 'text/xml' );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * The native XML (DOM document) used by the class instance.\n\t\t *\n\t\t * @property {Object}\n\t\t */\n\t\tthis.baseXml = baseXml;\n\t};\n\n\tCKEDITOR.xml.prototype = {\n\t\t/**\n\t\t * Get a single node from the XML document, based on a XPath query.\n\t\t *\n\t\t *\t\t// Create the XML instance.\n\t\t *\t\tvar xml = new CKEDITOR.xml( '<list><item id=\"test1\" /><item id=\"test2\" /></list>' );\n\t\t *\t\t// Get the first <item> node.\n\t\t *\t\tvar itemNode = <b>xml.selectSingleNode( 'list/item' )</b>;\n\t\t *\t\t// Alert \"item\".\n\t\t *\t\talert( itemNode.nodeName );\n\t\t *\n\t\t * @param {String} xpath The XPath query to execute.\n\t\t * @param {Object} [contextNode] The XML DOM node to be used as the context\n\t\t * for the XPath query. The document root is used by default.\n\t\t * @returns {Object} A XML node element or null if the query has no results.\n\t\t */\n\t\tselectSingleNode: function( xpath, contextNode ) {\n\t\t\tvar baseXml = this.baseXml;\n\n\t\t\tif ( contextNode || ( contextNode = baseXml ) ) {\n\t\t\t\tif ( 'selectSingleNode' in contextNode ) // IEs\n\t\t\t\t\treturn contextNode.selectSingleNode( xpath );\n\t\t\t\telse if ( baseXml.evaluate ) { // Others\n\t\t\t\t\tvar result = baseXml.evaluate( xpath, contextNode, null, 9, null );\n\t\t\t\t\treturn ( result && result.singleNodeValue ) || null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\n\t\t/**\n\t\t * Gets a list node from the XML document, based on a XPath query.\n\t\t *\n\t\t *\t\t// Create the XML instance.\n\t\t *\t\tvar xml = new CKEDITOR.xml( '<list><item id=\"test1\" /><item id=\"test2\" /></list>' );\n\t\t *\t\t// Get all <item> nodes.\n\t\t *\t\tvar itemNodes = xml.selectNodes( 'list/item' );\n\t\t *\t\t// Alert \"item\" twice, one for each <item>.\n\t\t *\t\tfor ( var i = 0; i < itemNodes.length; i++ )\n\t\t *\t\t\talert( itemNodes[i].nodeName );\n\t\t *\n\t\t * @param {String} xpath The XPath query to execute.\n\t\t * @param {Object} [contextNode] The XML DOM node to be used as the context\n\t\t * for the XPath query. The document root is used by default.\n\t\t * @returns {Array} An array containing all matched nodes. The array will\n\t\t * be empty if the query has no results.\n\t\t */\n\t\tselectNodes: function( xpath, contextNode ) {\n\t\t\tvar baseXml = this.baseXml,\n\t\t\t\tnodes = [];\n\n\t\t\tif ( contextNode || ( contextNode = baseXml ) ) {\n\t\t\t\tif ( 'selectNodes' in contextNode ) // IEs\n\t\t\t\t\treturn contextNode.selectNodes( xpath );\n\t\t\t\telse if ( baseXml.evaluate ) { // Others\n\t\t\t\t\tvar result = baseXml.evaluate( xpath, contextNode, null, 5, null );\n\n\t\t\t\t\tif ( result ) {\n\t\t\t\t\t\tvar node;\n\t\t\t\t\t\twhile ( ( node = result.iterateNext() ) )\n\t\t\t\t\t\t\tnodes.push( node );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn nodes;\n\t\t},\n\n\t\t/**\n\t\t * Gets the string representation of hte inner contents of a XML node,\n\t\t * based on a XPath query.\n\t\t *\n\t\t *\t\t// Create the XML instance.\n\t\t *\t\tvar xml = new CKEDITOR.xml( '<list><item id=\"test1\" /><item id=\"test2\" /></list>' );\n\t\t *\t\t// Alert \"<item id=\"test1\" /><item id=\"test2\" />\".\n\t\t *\t\talert( xml.getInnerXml( 'list' ) );\n\t\t *\n\t\t * @param {String} xpath The XPath query to execute.\n\t\t * @param {Object} [contextNode] The XML DOM node to be used as the context\n\t\t * for the XPath query. The document root is used by default.\n\t\t * @returns {String} The textual representation of the inner contents of\n\t\t * the node or null if the query has no results.\n\t\t */\n\t\tgetInnerXml: function( xpath, contextNode ) {\n\t\t\tvar node = this.selectSingleNode( xpath, contextNode ),\n\t\t\t\txml = [];\n\t\t\tif ( node ) {\n\t\t\t\tnode = node.firstChild;\n\t\t\t\twhile ( node ) {\n\t\t\t\t\tif ( node.xml ) // IEs\n\t\t\t\t\t\txml.push( node.xml );\n\t\t\t\t\telse if ( window.XMLSerializer ) // Others\n\t\t\t\t\t\txml.push( ( new XMLSerializer() ).serializeToString( node ) );\n\n\t\t\t\t\tnode = node.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn xml.length ? xml.join( '' ) : null;\n\t\t}\n\t};\n} )();\n"]}