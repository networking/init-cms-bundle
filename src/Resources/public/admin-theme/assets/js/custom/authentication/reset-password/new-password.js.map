{"version":3,"file":"new-password.js","names":["KTAuthNewPassword","form","submitButton","validator","passwordMeter","validatePassword","getScore","init","document","querySelector","KTPasswordMeter","getInstance","FormValidation","formValidation","fields","password","validators","notEmpty","message","callback","input","value","length","identical","compare","toc","plugins","trigger","Trigger","event","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","addEventListener","this","updateFieldStatus","url","URL","e","isValidUrl","getAttribute","preventDefault","revalidateField","validate","then","status","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","reset","redirectUrl","location","href","axios","post","closest","FormData","response","catch","error","KTUtil","onDOMContentLoaded"],"sources":["authentication/reset-password/new-password.js"],"mappings":"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","sourcesContent":["\"use strict\";\n\n// Class Definition\nvar KTAuthNewPassword = function() {\n    // Elements\n    var form;\n    var submitButton;\n    var validator;\n    var passwordMeter;\n\n    var handleForm = function(e) {\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        validator = FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    'password': {\n                        validators: {\n                            notEmpty: {\n                                message: 'The password is required'\n                            },\n                            callback: {\n                                message: 'Please enter valid password',\n                                callback: function(input) {\n                                    if (input.value.length > 0) {\n                                        return validatePassword();\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    'confirm-password': {\n                        validators: {\n                            notEmpty: {\n                                message: 'The password confirmation is required'\n                            },\n                            identical: {\n                                compare: function() {\n                                    return form.querySelector('[name=\"password\"]').value;\n                                },\n                                message: 'The password and its confirm are not the same'\n                            }\n                        }\n                    },\n                    'toc': {\n                        validators: {\n                            notEmpty: {\n                                message: 'You must accept the terms and conditions'\n                            }\n                        }\n                    }\n                },\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger({\n                        event: {\n                            password: false\n                        }\n                    }),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',  // comment to enable invalid state icons\n                        eleValidClass: '' // comment to enable valid state icons\n                    })\n                }\n            }\n        );\n\n        form.querySelector('input[name=\"password\"]').addEventListener('input', function() {\n            if (this.value.length > 0) {\n                validator.updateFieldStatus('password', 'NotValidated');\n            }\n        });\n    }\n\n\n    var handleSubmitDemo = function (e) {\n        submitButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            validator.revalidateField('password');\n\n            validator.validate().then(function(status) {\n                if (status == 'Valid') {\n                    // Show loading indication\n                    submitButton.setAttribute('data-kt-indicator', 'on');\n\n                    // Disable button to avoid multiple click\n                    submitButton.disabled = true;\n\n                    // Simulate ajax request\n                    setTimeout(function() {\n                        // Hide loading indication\n                        submitButton.removeAttribute('data-kt-indicator');\n\n                        // Enable button\n                        submitButton.disabled = false;\n\n                        // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                        Swal.fire({\n                            text: \"You have successfully reset your password!\",\n                            icon: \"success\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn btn-primary\"\n                            }\n                        }).then(function (result) {\n                            if (result.isConfirmed) {\n                                form.querySelector('[name=\"password\"]').value= \"\";\n                                form.querySelector('[name=\"confirm-password\"]').value= \"\";\n                                passwordMeter.reset();  // reset password meter\n                                //form.submit();\n\n                                var redirectUrl = form.getAttribute('data-kt-redirect-url');\n                                if (redirectUrl) {\n                                    location.href = redirectUrl;\n                                }\n                            }\n                        });\n                    }, 1500);\n                } else {\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                    Swal.fire({\n                        text: \"Sorry, looks like there are some errors detected, please try again.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\"\n                        }\n                    });\n                }\n            });\n        });\n\n    }\n\n    var handleSubmitAjax = function (e) {\n        // Handle form submit\n        submitButton.addEventListener('click', function (e) {\n            // Prevent button default action\n            e.preventDefault();\n\n            validator.revalidateField('password');\n\n            // Validate form\n            validator.validate().then(function (status) {\n                if (status == 'Valid') {\n                    // Show loading indication\n                    submitButton.setAttribute('data-kt-indicator', 'on');\n\n                    // Disable button to avoid multiple click\n                    submitButton.disabled = true;\n\n                    // Check axios library docs: https://axios-http.com/docs/intro\n                    axios.post(submitButton.closest('form').getAttribute('action'), new FormData(form)).then(function (response) {\n                        if (response) {\n                            form.reset();\n\n                            const redirectUrl = form.getAttribute('data-kt-redirect-url');\n\n                            if (redirectUrl) {\n                                location.href = redirectUrl;\n                            }\n                        } else {\n                            // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                            Swal.fire({\n                                text: \"Sorry, the email is incorrect, please try again.\",\n                                icon: \"error\",\n                                buttonsStyling: false,\n                                confirmButtonText: \"Ok, got it!\",\n                                customClass: {\n                                    confirmButton: \"btn btn-primary\"\n                                }\n                            });\n                        }\n                    }).catch(function (error) {\n                        Swal.fire({\n                            text: \"Sorry, looks like there are some errors detected, please try again.\",\n                            icon: \"error\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn btn-primary\"\n                            }\n                        });\n                    }).then(() => {\n                        // Hide loading indication\n                        submitButton.removeAttribute('data-kt-indicator');\n\n                        // Enable button\n                        submitButton.disabled = false;\n                    });\n                } else {\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                    Swal.fire({\n                        text: \"Sorry, looks like there are some errors detected, please try again.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\"\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    var validatePassword = function() {\n        return  (passwordMeter.getScore() > 50);\n    }\n\n    var isValidUrl = function(url) {\n        try {\n            new URL(url);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Public Functions\n    return {\n        // public functions\n        init: function() {\n            form = document.querySelector('#kt_new_password_form');\n            submitButton = document.querySelector('#kt_new_password_submit');\n            passwordMeter = KTPasswordMeter.getInstance(form.querySelector('[data-kt-password-meter=\"true\"]'));\n\n            handleForm();\n\n            if (isValidUrl(form.getAttribute('action'))) {\n                handleSubmitAjax(); // use for ajax submit\n            } else {\n                handleSubmitDemo(); // used for demo purposes only\n            }\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function() {\n    KTAuthNewPassword.init();\n});\n"]}