/*!***********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[7].use[0]!./assets/js/components/Editor.vue?vue&type=style&index=0&id=46f9af64&lang=css ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************/
.imageContainer{position:relative}.image{backface-visibility:hidden;display:block;opacity:1}.image,.middle{transition:.5s ease}.middle{left:50%;opacity:0;position:absolute;text-align:center;top:50%;transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%)}.imageContainer:hover .image{opacity:.3}.imageContainer:hover .middle{opacity:1}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VFZGl0b3IuY3NzIiwibWFwcGluZ3MiOiI7OztBQUNBLGdCQUNJLGlCQUNKLENBRUEsT0FJSSwwQkFBMkIsQ0FGM0IsYUFBYyxDQURkLFNBSUosQ0FFQSxlQUpJLG1CQWFKLENBVEEsUUFLSSxRQUFTLENBSFQsU0FBVSxDQUNWLGlCQUFrQixDQUtsQixpQkFBa0IsQ0FKbEIsT0FBUSxDQUVSLDhCQUFnQyxDQUNoQyxrQ0FFSixDQUVBLDZCQUNJLFVBQ0osQ0FFQSw4QkFDSSxTQUNKLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbml0LWNtcy1idW5kbGUvLi9hc3NldHMvanMvY29tcG9uZW50cy9FZGl0b3IudnVlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzdHlsZT5cbi5pbWFnZUNvbnRhaW5lciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uaW1hZ2Uge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgdHJhbnNpdGlvbjogLjVzIGVhc2U7XG4gICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuXG4ubWlkZGxlIHtcbiAgICB0cmFuc2l0aW9uOiAuNXMgZWFzZTtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDUwJTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLmltYWdlQ29udGFpbmVyOmhvdmVyIC5pbWFnZSB7XG4gICAgb3BhY2l0eTogMC4zO1xufVxuXG4uaW1hZ2VDb250YWluZXI6aG92ZXIgLm1pZGRsZSB7XG4gICAgb3BhY2l0eTogMTtcbn1cbjwvc3R5bGU+XG48dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImltYWdlRWRpdG9yQXBwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbWFnZUNvbnRhaW5lclwiPlxuPCEtLSAgICAgICAgICAgIDxpbWcgOnNyYz1cImltYWdlVVJMXCIgY2xhc3M9XCJpbWctcmVzcG9uc2l2ZSBpbWFnZVwiIEBjb250ZXh0bWVudS5wcmV2ZW50PVwiJHJlZnMubWVudS5vcGVuXCI+LS0+XG4gICAgICAgICAgICA8aW1nIDpzcmM9XCJpbWFnZVVSTFwiIGNsYXNzPVwiaW1nLXJlc3BvbnNpdmUgY2VudGVyLWJsb2NrIGltYWdlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWlkZGxlXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHRcIj48YSBocmVmPVwiXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBAY2xpY2sucHJldmVudD1cImVkaXRJbWFnZVwiPjxpIGNsYXNzPVwiZmEgZmEtbWFnaWMgZmEtc21hbGxcIj48L2k+IHt7ICR0KCdlZGl0X2ltYWdlJyl9fTwvYT48L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGJyPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgXCIgOmNsYXNzPVwiW2FsZXJ0VHlwZSA9PT0gJ2Vycm9yJz8nYWxlcnQtZGFuZ2VyJzonYWxlcnQtc3VjY2VzcyddXCIgdi1pZj1cImFsZXJ0XCIgcm9sZT1cImFsZXJ0XCIgdi1odG1sPVwiYWxlcnRNZXNzYWdlXCI+PC9kaXY+XG4gICAgICAgIDxicj5cbiAgICAgICAgPGRpdiBpZD1cImltYWdlTW9kYWxcIiBjbGFzcz1cIm1vZGFsIGZhZGVcIiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImRpYWxvZ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZyAgbW9kYWwtZnVsbFwiIHJvbGU9XCJkb2N1bWVudFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9XCJtb2RhbC10aXRsZVwiPnt7ICR0KCdjcmVhdGVkX2ltYWdlJykgfX08L2g0PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHkgYWxpZ24tY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC02IGFsaWduLWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+e3sgJHQoJ29yaWdpbmFsX2ltYWdlJykgfX08L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48aW1nIDpzcmM9XCJpbWFnZVVSTFwiIGNsYXNzPVwiaW1nLXJlc3BvbnNpdmUgY2VudGVyLWJsb2NrXCIvPjwvcD48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTYgYWxpZ24tY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57eyAkdCgnbmV3X2ltYWdlJykgfX08L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48aW1nIDpzcmM9XCJuZXdJbWFnZVwiIGNsYXNzPVwiaW1nLXJlc3BvbnNpdmUgY2VudGVyLWJsb2NrXCIvPjwvcD48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiPnt7ICR0KCdjYW5jZWwnKSB9fTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXdhcm5pbmdcIiBAY2xpY2sucHJldmVudD1cInVwZGF0ZUltYWdlXCI+e3sgJHQoJ3JlcGxhY2VfaW1hZ2UnKSB9fTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBAY2xpY2sucHJldmVudD1cImNsb25lSW1hZ2VcIj57eyAkdCgnY3JlYXRlX25ld19pbWFnZScpIH19PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PjwhLS0gLy5tb2RhbC1jb250ZW50IC0tPlxuICAgICAgICAgICAgPC9kaXY+PCEtLSAvLm1vZGFsLWRpYWxvZyAtLT5cbiAgICAgICAgPC9kaXY+PCEtLSAvLm1vZGFsIC0tPlxuICAgICAgICA8ZGl2IGlkPVwiY29uZmlybU1vZGFsXCIgY2xhc3M9XCJtb2RhbCBmYWRlXCIgdGFiaW5kZXg9XCItMVwiIHJvbGU9XCJkaWFsb2dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZ1wiIHJvbGU9XCJkb2N1bWVudFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+e3sgJHQoJ2FyZV95b3Vfc3VyZScpIH19PC9oND5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0KCdtZXNzYWdlLmNhbm5vdF9iZV91bmRvbmUnKSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXdhcm5pbmdcIiBAY2xpY2sucHJldmVudD1cImNvbmZpcm1VcGRhdGVcIj57eyAkdCgnY29udGludWUnKSB9fTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIEBjbGljay5wcmV2ZW50PVwicmVqZWN0VXBkYXRlXCI+e3sgJHQoJ2NhbmNlbCcpIH19PC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj48IS0tIC8ubW9kYWwtY29udGVudCAtLT5cbiAgICAgICAgPC9kaXY+PCEtLSAvLm1vZGFsLWRpYWxvZyAtLT5cbiAgICA8L2Rpdj48IS0tIC8ubW9kYWwgLS0+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbiAgICBpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuICAgIGltcG9ydCAnYm9vdHN0cmFwJztcbiAgICBpbXBvcnQgRmlsZXJvYm90SW1hZ2VFZGl0b3IgZnJvbSAnLi9pbWFnZUVkaXRvcic7XG5cbiAgICBjb25zdCBBTExPV0VEX0ZJTEVfRVhURU5USU9OUyA9IFsnZ2lmJywgJ2pwZycsICdqcGVnJywgJ3BuZyddO1xuICAgIGNvbnN0IExBTkdVQUdFUyA9IFsnZGUnLCAnZW4nXTtcbiAgICBsZXQgaW1hZ2VDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1hZ2UtY29udGFpbmVyJyk7XG4gICAgbGV0IGF4aW9zQ29uZmlnID0ge2hlYWRlcnM6IHsnWC1SZXF1ZXN0ZWQtV2l0aCc6ICdYTUxIdHRwUmVxdWVzdCd9fTtcbiAgICBsZXQgbGFuZ2F1Z2UgPSBpbWFnZUNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGFuZycpO1xuICAgIGlmKCFMQU5HVUFHRVMuaW5jbHVkZXMobGFuZ2F1Z2UpKXtcbiAgICAgICAgbGFuZ2F1Z2UgPSAnZW4nO1xuICAgIH1cblxuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgbmFtZTogJ0VkaXRvcicsXG4gICAgICAgIG1vdW50ZWQoKSB7XG4gICAgICAgICAgICBsZXQgY29uZmlnID0ge1xuICAgICAgICAgICAgICAgIGNvbG9yU2NoZW1lOiAnbGlnaHQnLFxuICAgICAgICAgICAgICAgIHRvb2xzOiBbJ2FkanVzdCcsICdlZmZlY3RzJywgJ2ZpbHRlcnMnLCAncm90YXRlJywnY3JvcCcsJ3Jlc2l6ZSddLFxuICAgICAgICAgICAgICAgIGxhbmd1YWdlOiBsYW5nYXVnZSxcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgZW46IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd0b29sYmFyLmRvd25sb2FkJzogJ1NhdmUnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJoZWFkZXIuaW1hZ2VfZWRpdG9yX3RpdGxlXCI6IFwiQmlsZCBiZWFyYml0ZW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidG9vbGJhci5kb3dubG9hZFwiOiBcIlNwZWljaGVyblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0b29sYmFyLnNhdmVcIjogXCJTcGVpY2hlcm5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidG9vbGJhci5hcHBseVwiOiBcIkFud2VuZGVuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRvb2xiYXIuY2FuY2VsXCI6IFwiQWJicmVjaGVuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRvb2xiYXIuZ29fYmFja1wiOiBcIlp1csO8Y2tcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidG9vbGJhci5hZGp1c3RcIjogXCJBbnBhc3NlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0b29sYmFyLmVmZmVjdHNcIjogXCJFZmZla3RlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRvb2xiYXIuZmlsdGVyc1wiOiBcIkZpbHRlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0b29sYmFyLm9yaWVudGF0aW9uXCI6IFwiT3JpZW50aWVydW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRvb2xiYXIuY3JvcFwiOiBcIlp1c2NobmVpZGVuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRvb2xiYXIucmVzaXplXCI6IFwiR3LDtsOfZSDDpG5kZXJuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRvb2xiYXIud2F0ZXJtYXJrXCI6IFwiV2Fzc2VyemVpY2hlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhZGp1c3QuYnJpZ2h0bmVzc1wiOiBcIkhlbGxpZ2tlaXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYWRqdXN0LmNvbnRyYXN0XCI6IFwiS29udHJhc3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYWRqdXN0LmV4cG9zdXJlXCI6IFwiQmVsaWNodHVuZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhZGp1c3Quc2F0dXJhdGlvblwiOiBcIkZhcmJzw6R0dGlndW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm9yaWVudGF0aW9uLnJvdGF0ZV9sXCI6IFwiTmFjaCBsaW5rcyBkcmVoZW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwib3JpZW50YXRpb24ucm90YXRlX3JcIjogXCJOYWNoIHJlY2h0cyBkcmVoZW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwib3JpZW50YXRpb24uZmxpcF9oXCI6IFwiSG9yaXpvbnRhbCBzcGllZ2VsblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmllbnRhdGlvbi5mbGlwX3ZcIjogXCJWZXJ0aWthbCBzcGllZ2VsblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwcmVfcmVzaXplLnRpdGxlXCI6IFwiTcO2Y2h0ZW4gU2llIGRpZSBBdWZsw7ZzdW5nIHJlZHV6aWVyZW4sIGJldm9yIFNpZSBkYXMgQmlsZCBiZWFyYmVpdGVuP1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwcmVfcmVzaXplLmtlZXBfb3JpZ2luYWxfcmVzb2x1dGlvblwiOiBcIk9yaWdpbmFsYXVmbMO2c3VuZyBiZWliZWhhbHRlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwcmVfcmVzaXplLnJlc2l6ZV9uX2NvbnRpbnVlXCI6IFwiR3LDtsOfZSDDpG5kZXJuICYgZm9ydHNldHplblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmb290ZXIucmVzZXRcIjogXCJadXLDvGNrc2V0emVuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZvb3Rlci51bmRvXCI6IFwiUsO8Y2tnw6RuZ2lnIG1hY2hlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmb290ZXIucmVkb1wiOiBcIldpZWRlcmhvbGVuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNwaW5uZXIubGFiZWxcIjogXCJWZXJhcmJlaXR1bmcuLi5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwid2FybmluZy50b29fYmlnX3Jlc29sdXRpb25cIjogXCJEaWUgQXVmbMO2c3VuZyBkZXMgQmlsZGVzIGlzdCB6dSBncm/DnyBmw7xyIGRhcyBXZWIuIEVzIGthbm4genUgUHJvYmxlbWVuIG1pdCBkZXIgTGVpc3R1bmcgZGVzIEJpbGRiZWFyYmVpdHVuZ3Nwcm9ncmFtbXMgZsO8aHJlbi5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbW9uLndpZHRoXCI6IFwiYnJlaXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbW1vbi5oZWlnaHRcIjogXCJow7ZoZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21tb24uY3VzdG9tXCI6IFwiYmVudXR6ZXJkZWZpbmllcnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbW9uLm9yaWdpbmFsXCI6IFwiT3JpZ2luYWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbW9uLnNxdWFyZVwiOiBcInF1YWRyYXRpc2NoXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbW1vbi5vcGFjaXR5XCI6IFwiT3Bheml0w6R0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbW1vbi5hcHBseV93YXRlcm1hcmtcIjogXCJXYXNzZXJ6ZWljaGVuIGFud2VuZGVuXCJcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbWFnZUVkaXRvciA9IG5ldyBGaWxlcm9ib3RJbWFnZUVkaXRvcihjb25maWcsIHRoaXMuZG93bmxvYWQpO1xuICAgICAgICAgICAgdGhpcy5pbWFnZVVSTCA9IGltYWdlQ29udGFpbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS1pbWFnZS1zcmMnKTtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBpbWFnZUNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW1hZ2UtaWQnKTtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dCA9IGltYWdlQ29udGFpbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS1pbWFnZS1jb250ZXh0Jyk7XG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyID0gaW1hZ2VDb250YWluZXIuZ2V0QXR0cmlidXRlKCdkYXRhLWltYWdlLXByb3ZpZGVyJyk7XG4gICAgICAgICAgICB0aGlzLmZpbGVFeHRlbnNpb24gPSB0aGlzLmltYWdlVVJMLnNsaWNlKCh0aGlzLmltYWdlVVJMLmxhc3RJbmRleE9mKFwiLlwiKSAtIDEgPj4+IDApICsgMik7XG4gICAgICAgIH0sXG4gICAgICAgIGRhdGEoKSB7XG4gICAgICAgICAgICB0aGlzLiRpMThuLmxvY2FsZSA9IGxhbmdhdWdlO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBsb2NhbGU6ICdlbicsXG4gICAgICAgICAgICAgICAgaW1hZ2VVUkw6ICcnLFxuICAgICAgICAgICAgICAgIGlkOiAnJyxcbiAgICAgICAgICAgICAgICBjb250ZXh0OiAnJyxcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogJycsXG4gICAgICAgICAgICAgICAgaW1hZ2VFZGl0b3I6ICcnLFxuICAgICAgICAgICAgICAgIG5ld0ltYWdlOiAnJyxcbiAgICAgICAgICAgICAgICBhbGVydDogZmFsc2UsXG4gICAgICAgICAgICAgICAgYWxlcnRNZXNzYWdlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhbGVydFR5cGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGZpbGVFeHRlbnNpb246ICcnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3YXRjaDoge1xuICAgICAgICAgICAgbG9jYWxlICh2YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRpMThuLmxvY2FsZSA9IHZhbFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXRob2RzOiB7XG4gICAgICAgICAgICBlZGl0SW1hZ2UoKXtcbiAgICAgICAgICAgICAgICB0aGlzLmFsZXJ0TWVzc2FnZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmKCFBTExPV0VEX0ZJTEVfRVhURU5USU9OUy5pbmNsdWRlcyh0aGlzLmZpbGVFeHRlbnNpb24pKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGVydCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxlcnRUeXBlID0gJ2Vycm9yJztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGVydE1lc3NhZ2UgPSB0aGlzLiRpMThuLnQoJ25vdF9hbGxvd2VkX2V4dGVuc2lvbicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5hbGVydCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuYWxlcnRUeXBlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGVydE1lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlRWRpdG9yLm9wZW4odGhpcy5pbWFnZVVSTCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZG93bmxvYWQoeyBzdGF0dXMsICBpbWFnZU5hbWUsIGltYWdlTWltZSwgY2FudmFzIH0pe1xuICAgICAgICAgICAgICAgIHRoaXMubmV3SW1hZ2UgPSBjYW52YXMudG9EYXRhVVJMKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGVydCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuYWxlcnRUeXBlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGVydE1lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAkKCcjaW1hZ2VNb2RhbCcpLm1vZGFsKCdzaG93Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsb25lSW1hZ2UoKXtcbiAgICAgICAgICAgICAgICAkKCcjaW1hZ2VNb2RhbCcpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgICAgICAgICAgYXhpb3NcbiAgICAgICAgICAgICAgICAgICAgLnBvc3QoJy9hZG1pbi9jbXMvbWVkaWEvY2xvbmUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnaWQnOiB0aGlzLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Nsb25lJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdwcm92aWRlcic6IHRoaXMucHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29udGV4dCc6IHRoaXMuY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdmaWxlJzogdGhpcy5uZXdJbWFnZVxuICAgICAgICAgICAgICAgICAgICB9LCBheGlvc0NvbmZpZykuXG4gICAgICAgICAgICAgICAgdGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxlcnQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKHJlc3BvbnNlLmRhdGEuc3VjY2Vzcyl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFsZXJ0TWVzc2FnZSA9IHRoaXMuJHQoJ21lc3NhZ2UuY2xvbmVkJywgeyd1cmwnOiByZXNwb25zZS5kYXRhLnVybH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGVydFR5cGUgPSAnc3VjY2Vzcyc7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGVydE1lc3NhZ2UgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGVydFR5cGUgPSAnZXJyb3InO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cGRhdGVJbWFnZSgpe1xuICAgICAgICAgICAgICAgICQoJyNpbWFnZU1vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICAkKCcjY29uZmlybU1vZGFsJykubW9kYWwoJ3Nob3cnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWplY3RVcGRhdGUoKXtcbiAgICAgICAgICAgICAgICAkKCcjaW1hZ2VNb2RhbCcpLm1vZGFsKCdzaG93Jyk7XG4gICAgICAgICAgICAgICAgJCgnI2NvbmZpcm1Nb2RhbCcpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29uZmlybVVwZGF0ZSgpe1xuICAgICAgICAgICAgICAgICQoJyNjb25maXJtTW9kYWwnKS5tb2RhbCgnaGlkZScpO1xuICAgICAgICAgICAgICAgIGF4aW9zXG4gICAgICAgICAgICAgICAgICAgIC5wb3N0KCcvYWRtaW4vY21zL21lZGlhL2Nsb25lJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2lkJzogdGhpcy5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjbG9uZSc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3Byb3ZpZGVyJzogdGhpcy5wcm92aWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb250ZXh0JzogdGhpcy5jb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ZpbGUnOiB0aGlzLm5ld0ltYWdlXG4gICAgICAgICAgICAgICAgICAgIH0sIGF4aW9zQ29uZmlnKS5cbiAgICAgICAgICAgICAgICB0aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYocmVzcG9uc2UuZGF0YS5zdWNjZXNzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gcmVzcG9uc2UuZGF0YS51cmw7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGVydCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFsZXJ0TWVzc2FnZSA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFsZXJ0VHlwZSA9ICdlcnJvcic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbjwvc2NyaXB0PlxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9*/