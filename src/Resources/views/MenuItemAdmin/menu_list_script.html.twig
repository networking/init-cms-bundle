{#

This file is part of the Networking package.

(c) net working AG <info@networking.ch>

For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.

#}
{% autoescape false %}
<script type="text/javascript">
var menuDialog;

var lastTab = localStorage.getItem('lastTab');

var lastEdited = '{{ last_edited }}';

function initializeDialog() {
    if (!menuDialog) {
        menuDialog = jQuery('#menu_dialog');
        menuDialog.modal({
            height: 'auto',
            width: 650,
            show: false,
        });
        menuDialog.on('hide.bs.modal', function () {
            jQuery.ajax({
                url: '{{ admin.generateUrl('list', {'render': true}) }}',
                dataType: 'html',
                success: function (html) {
                    jQuery('#menuTabs').html(html);
                    setUpSortTree();
                    if (lastTab) {
                        jQuery('a[href="' + lastTab + '"]').tab('show');
                    }
                }
            });
            jQuery('input[type=submit]', this).off();
        });
        jQuery(document.body).append(menuDialog);
        jQuery(menuDialog).on('submit', 'form',  submitAjaxForm);
    }
}


function setLastTab(tab){
    lastTab = tab;
    localStorage.setItem('lastTab', lastTab);
}
function createAjaxDialog(event) {
    event.preventDefault();
    event.stopPropagation();

    initializeDialog();

    var a = jQuery(this);
    var url = a.attr('href');
    if (!url) {
        url = a.attr('ref');
    }

    jQuery.ajax({
        url: url,
        dataType: 'html',
        data: {'locale': jQuery('#filter_locale_value').val()},
        success: function (html) {
            // populate the popup container
            menuDialog.html(html);
            menuDialog.modal('show');
        }
    });
}

function submitAjaxForm(event) {
    event.preventDefault();
    event.stopPropagation();


    axios.post(this.action, new FormData(this), axiosConfig)
        .then(function (response){
            var data = response.data;
            if (xhr.result == 'ok') {
                if (xhr.is_new_menu_item && xhr.html) {
                    menuDialog.html(xhr.html);
                } else {
                    menuDialog.modal('hide');
                    createInitCmsMessageBox(xhr.status, xhr.message);
                }
            }
        })
        .catch(function (error){
            var data = error.response.data;
            if(typeof data === 'object'){
                jQuery('.modal-body').prepend('<div class="alert alert-danger">' + data.message + ' <br>'+data.errors.join('<br>')+'</div>');
            }else{
                menuDialog.html(data);
            }
        })


}

function updateMenu(e) {
   jQuery(e).nestedSortable('toArray', {startDepthCount: 0});

}

function setUpSortTree() {

    jQuery('div.navigation').each(function (e, ui) {
        jQuery(ui).find('ul:first').nestedSortable({
            disableNestingClass: 'no-nest',
            forcePlaceholderSize: true,
            forceHelperSize: true,
            handle: 'i.fa-arrows-alt',
            tolerance: 'pointer',
            items: 'li',
            listType: 'ul',
            opacity: .6,
            placeholder: 'placeholder',
            revert: 250,
            tabSize: 20,
            toleranceElement: 'div.menu_item',
            update: function (e, ui) {
                updateMenu(this)
            }
        });
    });
}

function saveSibling(url) {
    jQuery.ajax({
        url: url,
        dataType: 'json',
        success: function (xhr) {
            if (xhr.result == 'ok') {
                menuDialog.modal('hide');
                createInitCmsMessageBox(xhr.status, xhr.message);
                if (lastTab) {
                    jQuery('a[href="' + lastTab + '"]').tab('show');
                }
            }
        },
        error: function (xhr, textStatus, errorThrown) {
            createInitCmsMessageBox('error', xhr.responseText);
            setUpSortTree();
            menuDialog.modal('hide');
        }
    });
}

jQuery(function () {

    var ua = navigator.userAgent,
            event = (ua.match(/iPad/i)) ? "touchstart" : "click";

    jQuery('#menuTabs').on('click', '.menu-dialog-link', createAjaxDialog);

    {% if menu_id %}
    jQuery('a.link-page-edit[data-page_id="{{ menu_id }}"]').trigger('click');
    {% endif %}

    var nestedExtensions = {
        toArray: function (options) {

            var o = $.extend({}, this.options, options),
                    sDepth = o.startDepthCount || 0,
                    ret = [],
                    left = 2;


            $(this.element).children(o.items).each(function () {
                left = _recursiveArray(this, sDepth + 1, left);
            });

            ret = ret.sort(function (a, b) {
                return (a.left - b.left);
            });


            jQuery.post(
                "{{ admin.generateUrl('ajaxController', {"operation":"updateNodes"}) }}",
                {"nodes": ret},
                function (xhr) {createInitCmsMessageBox('success', xhr.message);}
            );

            return ret;

            function _recursiveArray(item, depth, left) {

                var right = left + 1,
                        id,
                        pid;

                if (jQuery(item).children(o.listType).children(o.items).length > 0) {
                    depth++;
                    jQuery(item).children(o.listType).children(o.items).each(function () {
                        right = _recursiveArray($(this), depth, right);
                    });
                    depth--;
                }

                id = ($(item).attr(o.attribute || 'id')).match(o.expression || (/(.+)[-=_](.+)/));

                if (depth === sDepth + 1) {
                    pid = o.rootID;
                } else {
                    var parentItem = ($(item).parent(o.listType)
                            .parent(o.items)
                            .attr(o.attribute || 'id'))
                            .match(o.expression || (/(.+)[-=_](.+)/));
                    pid = parentItem[2];
                }

                if (id) {
                    ret.push({"item_id": id[2], "parent_id": pid, "depth": depth, "left": left, "right": right});
                }

                left = right + 1;
                return left;
            }

        }
    };


    jQuery.extend(jQuery.mjs.nestedSortable.prototype, nestedExtensions);

    initializeDialog();

    setUpSortTree();

    if (lastTab) {
        jQuery('a[href="' + lastTab + '"]').tab('show');
    }

    if (lastEdited) {
        var tab = jQuery('#listItem_' + lastEdited).closest('div.tab-pane');
        setLastTab('#' + tab.attr('id'));
        jQuery('a[href="' + lastTab + '"]').tab('show');
    }

    jQuery('body').on('show.bs.tab', function(e){
        var target = jQuery(e.target);
        setLastTab(target.attr('href'));
    });

    jQuery('.show-tooltip').tooltip({placement: 'bottom', delay: { show: 800, hide: 100 }});


});
</script>
{% endautoescape %}
