{% set context = persistent_parameters.context ? persistent_parameters.context: 'default' %}
{% set selected = datagrid.values.tags?'#tag_link_'~datagrid.values.tags.value:'.show_all_media' %}
<script src="{{ asset('bundles/networkinginitcms/assets/plugins/custom/jstree/jstree.bundle.js') }}"
        type="text/javascript"></script>
<script src="{{ asset('bundles/networkinginitcms/vendor/featherlight/src/featherlight.js') }}"
        type="text/javascript"></script>
<script>
    var tagDialog;
    var lastLink = $('{{ selected }}');
    (function ($, undefined) {
        "use strict";
        var link = document.createElement('a');
        link.className = "delete-tag dialog-link float-right ";
        link.innerHTML = '<i class="la la-trash icon-lg"></i>';

        $.jstree.defaults.delete = $.noop;
        $.jstree.plugins.delete = function (options, parent) {
            this.teardown = function () {
                if(this.settings.delete) {
                    this.element.find(".delete-tag").remove();
                }
                parent.teardown.call(this);
            };
            this.redraw_node = function(obj, deep, callback, force_draw) {

                obj = parent.redraw_node.call(this, obj, deep, callback, force_draw);

                if(this.get_node(obj).children && this.get_node(obj).children.length){
                    return obj;
                }

                if(obj && $(obj).hasClass('sortable-tag')) {

                    var tmp = link.cloneNode(true);
                    var node = this.get_node(obj);
                    tmp.href = node.data.delete_link;
                    obj.insertBefore(tmp, obj.childNodes[2]);
                }
                return obj;
            };
        };
    })(jQuery);

    function initializeTagDialog() {
        if (!tagDialog) {
            tagDialog = jQuery('#tag_dialog');
            tagDialog.modal({
                height: 'auto',
                width: 650,
                show: false
            });

            tagDialog.on('hide.bs.modal', function (e) {
                jQuery('input[type=submit]', this).off();
            });
            tagDialog.on('shown.bs.modal', function () {
                jQuery('input.tag_name_input').focus();
            });
            jQuery(document.body).append(tagDialog);
            jQuery(tagDialog).on('submit', 'form', submitAjaxTagForm);
        }
    }

    function submitAjaxBatchForm(event) {
        event.preventDefault();
        event.stopPropagation();

        var form = jQuery(this).closest('form');

        if (jQuery('[name^="idx[]"]:checked', form).length === 0 && jQuery('[name^="all_elements"]:checked', form).length === 0) {
            createInitCmsMessageBox('info', '{{ 'flash_batch_empty'|trans([], 'NetworkingInitCmsBundle') }}');
            return;
        }

        axios({
            method: form.attr('method'),
            url: form.attr('action'),
            data: new FormData(form[0]),
            ...axiosConfig
        }).then(function (response) {
            var data = response.data;
            if (data.result === 'ok') {
                createInitCmsMessageBox(data.status, data.message);
                $('.batch-actions').hide();
                refreshList();
            }
        })


    }

    function createAjaxTagDialog(event) {
        event.preventDefault();
        event.stopPropagation();

        initializeTagDialog();

        var a = jQuery(this);
        var url = a.attr('href');
        if (!url) {
            url = a.attr('ref');
        }

        axios.get(url, axiosConfig)
            .then(function (response) {
                tagDialog.html(response.data);
                tagDialog.modal('show');
            })

    }

    function submitAjaxTagForm(event) {
        event.preventDefault();
        event.stopPropagation();


        axios.post(this.action, new FormData(this), axiosConfig)
            .then(function (response) {
                var data = response.data;
                if (data.result == 'ok') {
                    tagDialog.modal('hide');
                    createInitCmsMessageBox(data.status, data.message);
                    reloadSortTree(data.json, data.objectId);
                }else{
                    tagDialog.html(response.data);
                }
            })
            .catch(function (error) {
                tagDialog.html(error.response.data);
            })
    }


    var treeData = {% include "@NetworkingInitCms/TagAdmin/tags.json.twig" with {'noSort': app.request.isXmlHttpRequest, 'tags': tags, 'lastItem': lastItem, 'tagAdmin': tagAdmin} %};
    function reloadSortTree(data, id) {
        treeData = data;
        $('#tagsContainer').jstree(true).refresh();
    }
    function setUpSortTree() {
        $('#tagsContainer')
            .on('refresh.jstree', function (){setUpEditable(); })
            .on('move_node.jstree', function (node){setUpEditable();})
            .on('after_open.jstree', function (){setUpEditable();})
            .on('redraw.jstree', function (){setUpEditable();})
            .jstree({
            "types": {
                "default": {
                    "icon": "fa fa-folder text-primary icon-2x"
                },
                "file": {
                    "icon": "fa fa-file text-primary icon-2x"
                }
            },
            "plugins": [
                "dnd",
                {% if (noSort is not defined or not noSort) and tagAdmin.hasRoute('delete') %}"delete",{% endif %}
                "sort",
                "types",
                "unique"
            ],
            "dnd": {
                "check_while_dragging": true,
                "is_draggable": function (node) {
                    return node[0].a_attr.class !== "show_all_media"
                },
            },
            "delete": function (node){
                axios.get(node.data.delete_link,{ ...axiosConfig}).then(function (response) {
                    listDialog.html(response.data);
                    listDialog.modal('show');
                });
            },
            "sort": function(a, b) {
                a1 = this.get_node(a);
                b1 = this.get_node(b);
                if(a1.data['show_first']){
                    return -1;
                }

                if(b1.data['show_first']){
                    return 1;
                }
                return (a1.text.toLowerCase() > b1.text.toLowerCase() ) ? 1 : -1;
            },
            'core': {
                "themes" : {
                    "variant" : "large"
                },
                "check_callback": function (operation, node, node_parent, node_position, more) {
                    // operation can be 'create_node', 'rename_node', 'delete_node', 'move_node' or 'copy_node'
                    // in case of 'rename_node' node_position is filled with the new node name

                    if (operation === "move_node") {
                        if (node_parent.a_attr) {
                            return node_parent.a_attr.class !== "show_all_media"; //only allow dropping inside nodes of type 'Parent'
                        }
                    }
                    return true;
                },
                data: function(node, cb){
                    cb(treeData)
                }
            }
        });

        $(document).on("dnd_stop.vakata", function (data, e) {
            var nodes = $('#tagsContainer').jstree(true).get_json();
            var flatTree = getFlatTree(nodes, 0, 0, nodes.length-1, [])
            updateTree(flatTree)
        });



    }

    function updateTreeData(value, id){
        var data = $('#tagsContainer').jstree(true).get_json();
        replaceDataName(data, value, id, data.length -1);
        treeData = data;
        $('#tagsContainer').jstree(true).refresh();

    }

    function replaceDataName(nodes, name, id, n, flatArray){
        if(n < 0){
            return nodes;
        }
        var node = nodes[n];

        if(typeof node.data !== "undefined" && node.data['id'] === id){
            node.text = name;
            node.li_attr['data-tag-name'] = name;
        }
        if(node.children.length > 0){
            replaceDataName(node.children, name, id, node.children.length-1);
        }

        return replaceDataName(nodes, name, id, n-1);
    }



    function setUpEditable(){
        $('.tag_link').unbind();
        $('.tag_link').editable({
            'toggle': 'manual',
            'url': '{{ tagAdmin.generateUrl('inline_edit') }}',
            'name': 'name',
            'display': function (value, response){
                if(typeof response !== "undefined"){
                    var icon = $('.jstree-icon', this);
                    $(this).html(icon).append(value);
                }
            }
        }).on('contextmenu', function (e) {
            $(this).editable('show');
            e.preventDefault();
        }).on('save', function (event, params) {
            updateTreeData(params.newValue, params.response.objectId);
        }).on('hidden', function (e, r) {
            if (r === 'save') {
                var list = $(this).parent().closest('ul');
                // sortList(list);
                history.replaceState({time: jQuery.now()}, 'updated', '{{ admin.generateUrl('list', {'context': context}) }}&time=' + jQuery.now());
            }
        });
    }
    function getFlatTree(nodes, parentId, depth, n, flatArray){
        if(n < 0){
            return flatArray;
        }
        var node = nodes[n];

        if(node.children.length > 0){
            flatArray.push.apply(getFlatTree(node.children, node.data['id'], depth+1, node.children.length-1, flatArray))
        }
        flatArray.push({id: node.data['id'], parent_id: parentId, name: node.text, depth: depth});

        return getFlatTree(nodes, parentId, depth, n-1, flatArray);
    }

    function updateTree(tagTree) {

        axios.post("{{ tagAdmin.generateUrl('update_tree') }}", {"nodes": tagTree}, axiosConfig)
            .then(function (response) {
                var data = response.data;
                createInitCmsMessageBox(data.status, data.message);
                history.replaceState({time: jQuery.now()}, 'updated', '{{ admin.generateUrl('list', {'context': context}) }}&time=' + jQuery.now());
            });

    }

    function refreshList(filters) {
        if (!filters) {
            filters = {}
        }
        $.get(
            "{{ admin.generateUrl('refresh_list')|raw }}",
            filters,
            function (xhr) {
                $('#item_list').html(xhr);
                $("html, body").animate({scrollTop: $('#item_list').scrollTop()}, "slow");
            }
        );

        history.replaceState({time: jQuery.now()}, 'updated', '{{ admin.generateUrl('list', {'context': context}) }}&time=' + jQuery.now());
    }


    $(function () {
        var body = $('body');


        var ua = navigator.userAgent, event = (ua.match(/iPad/i)) ? "touchstart" : "click";

        body.on('click', '.delete_check_box', function () {
            var active = false;
            $('.delete_check_box').each(function (i, item) {
                if (item.checked) {
                    $(item).addClass('ui-selected');
                    active = true;
                } else {
                    $(item).removeClass('ui-selected');
                }
            });
            if (active) {
                $('.batch-actions').fadeIn();
            } else {
                $('.batch-actions').fadeOut();
            }
        });

        $('body').on('click', "a.batch", function (e) {
            e.preventDefault();
            $("input[name='action']").val($(this).data('value'));
            createBatchDialog(e);

        });

        body.on('click', '.tag_link', function (e, noLoad) {
            e.preventDefault();
            var link = $(e.target);
            var tagId = link.data('pk');
            if (noLoad == undefined) {
                refreshList({'filter': {'tags': {'value': tagId}}});
            }
        });

        body.on('click', '.show_all_media', function (e) {
            e.preventDefault();

            refreshList({'filter': {'_page': 1}});

        });

        body.on('click', 'a.media-pager', function (e) {
            e.preventDefault();
            refreshList({
                'filter': {
                    '_page': $(this).data('page'),
                    '_sort_order': $(this).data('sort-order'),
                    '_sort_by': $(this).data('sort-by'),
                    'tags': {'value': $(this).data('tags')},
                    'name': {'value': $(this).data('name')},
                }
            });
        })


        body.on('click', 'i.tag_folder', function (e) {
            var target = $(e.target);
            target.closest('li').toggleClass('mjs-nestedSortable-collapsed').toggleClass('mjs-nestedSortable-expanded');
            target.toggleClass('glyphicon-folder-close').toggleClass('glyphicon-folder-open');
        });

        body.on('click', '.batch-add-tags', submitAjaxBatchForm);

        $(".tag-select").select2({
            ajax: {
                url: "{{ tagAdmin.generateUrl('search_tags') }}",
                dataType: 'json',
                delay: 250,
                processResults: function (data) {
                    return {
                        results: data
                    };
                }
            }
        });

        $.fn.editable.defaults.mode = 'popup';

        initializeTagDialog();

        setUpSortTree();

        body.on('click', '.tag-dialog-link', createAjaxTagDialog);
    });
</script>
