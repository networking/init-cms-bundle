{#
This file is part of the Networking package.

(c) net working AG <info@networking.ch>

For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.
#}
{% set id =  admin.uniqid ~'_layout_blocks' %}
{% autoescape false %}
    <!-- edit one association -->
    <script type="text/javascript">
        var tempHtml = {};
        var tempElements = {};


        // handle the add link
        function getLayoutBlockCreateForm(url, data, tempElement) {
            var element = jQuery('#' + tempElement)
            var list = element.parent();

            axios.get(url, {params: data, ...axiosConfig})
                .then(function (response) {
                        element.html(response.data);
                        jQuery('form', element).on('submit', submitLayoutCreate);
                        jQuery('.cancel', element).on('click', function (e) {
                            element.detach().promise().done(() => {
                                if (list.find('.networking-sortable-list').length < 1) {
                                    list.find(".empty_layout_block").show();
                                }
                            });
                            element.removeData();
                        });
                        jQuery('.select-content-type', element).on('change', function () {
                            data.subclass = jQuery(this).val();
                            getLayoutBlockCreateForm(url, data, tempElement);
                        })
                    }
                )
                .catch((error) => {
                    console.log(error.response);
                })
        }

        function reloadPagePreview() {
            document.getElementById('pagePreview').src += '';
        }

        function submitLayoutCreate(event) {
            event.preventDefault();
            jQuery.each(CKEDITOR.instances, function () {
                try {
                    jQuery('#' + this.name).val(this.getData());
                } catch (err) {
                }
            });
            var form = jQuery(this);
            var element = form.parent();
            var list = element.parent();
            var data = form.formSerialize();
            axios.post(form.attr('action'), data, {
                params: {
                    code: '{{ admin.code }}',
                    uniqId: '{{ admin.uniqid }}',
                    pageId: '{{ admin.id(admin.subject) }}'
                },
                ...axiosConfig
            }).then(function (repsonse) {
                createInitCmsMessageBox(repsonse.data.status, repsonse.data.message);
                jQuery('#field_container_{{ id }}').replaceWith(repsonse.data.html);
                saveLayoutBlockSort();
                reloadPagePreview();
            }).catch(function (error) {
                element.html(error.response.data);
                jQuery('form', element).on('submit', submitLayoutCreate);
                jQuery('.cancel', element).on('click', function (e) {
                    element.detach().promise().done(() => {
                        if (list.find('.networking-sortable-list').length < 1) {
                            list.find(".empty_layout_block").show();
                        }
                    });
                    element.removeData();
                });
            });
        }


        function getLayoutBlockEditForm(containerHash, url) {
            var container = jQuery(containerHash);

            if (tempHtml[container.attr('id')]) {
                return;
            }
            axios.get(url, axiosConfig)
                .then(function (response) {
                    tempHtml[container.attr('id')] = container.html();
                    container.html(response.data);
                    jQuery('form', container).on('submit', submitLayoutUpdate);
                    jQuery('.cancel', container).on('click', function () {
                        container.html(tempHtml[container.attr('id')]);
                        delete tempHtml[container.attr('id')];
                    })
                });
        }

        function submitLayoutUpdate(event) {
            event.preventDefault();
            jQuery.each(CKEDITOR.instances, function () {
                try {
                    var editor = this;
                    var text = editor.getData();
                    if (editor) {
                        jQuery('#' + editor.name).val(text);
                    }
                } catch (err) {
                }
            });

            var form = jQuery(this);
            var container = form.parent();
            axios.post(form.attr('action'), form.formSerialize(), {
                params: {
                    code: '{{ admin.code }}',
                    uniqId: '{{ admin.uniqid }}',
                    pageId: '{{ admin.id(admin.subject) }}'
                },
                ...axiosConfig
            }).then(function(response){
                delete tempHtml[container.attr('id')];
                jQuery('#field_container_{{ id }}').replaceWith(response.data); // replace the html
                saveLayoutBlockSort();
                reloadPagePreview();
            }).catch(function(error){
                container.html(error.response.data);
                jQuery('form', container).on('submit', submitLayoutUpdate);
                jQuery('.cancel', container).on('click', function (e) {
                    container.html(tempHtml[container.attr('id')]);
                    delete tempHtml[container.attr('id')];
                });
            })
        }

        function reloadLayoutBlocks() {
            jQuery.ajax({
                type: 'get',
                url: '{{ url('admin_networking_initcms_layoutblock_reload') }}',
                data: {
                    formFieldId: '{{ id }}',
                    code: '{{ admin.code }}',
                    uniqId: '{{ admin.uniqid }}',
                    pageId: '{{ admin.id(admin.subject) }}'
                }, success: function (html) {
                    jQuery('#field_container_{{ id }}').replaceWith(html); // replace the html
                }
            });
        }

        function saveLayoutBlockSort(e, callback) {
            var zones = [];

            jQuery('ul.sortable').each(function (index, el) {
                var list = jQuery(el);
                var zone_name = list.attr('id').substr(5);
                list.find('a.add-layout').each(function (index, el) {
                    jQuery(el).data('sort-order', index);
                    jQuery(el).data('zone', zone_name);
                })
                zones.push({
                    'zone': zone_name,
                    'layoutBlocks': list.sortable("toArray", {key: "layoutBlock"})
                });
            });

            jQuery.when(submitLayoutSort(zones)).done(function (xhr) {
                if (callback !== undefined) {
                    callback(xhr)
                }
                jQuery('body').trigger('layout:sorted', [xhr]);
            });
        }

        function submitLayoutSort(zones) {
            var dfd = jQuery.Deferred();
            var pageStatus = jQuery('.page_status');

            return jQuery.ajax({
                url: '{{ url('admin_networking_initcms_layoutblock_updateLayoutBlockSort') }}',
                data: {
                    zones: zones,
                    code: '{{ admin.code }}',
                    pageId: '{{ admin.id(admin.subject) }}'
                },
                type: 'post',
                success: function (xhr) {
                    if (xhr.status !== 'error') {
                        if (xhr.pageStatusSettings !== undefined) jQuery('#pageStatusSettings').html(xhr.pageStatusSettings);
                        if (xhr.pageStatus !== undefined) {
                            if (xhr.pageStatus !== "{{ 'status_published'|trans({}, admin.translationDomain) }}") {
                                pageStatus.addClass('color-draft');
                            } else {
                                pageStatus.removeClass('color-draft');
                            }
                            pageStatus.html(xhr.pageStatus);
                        }
                    }
                    dfd.resolve(xhr);
                    reloadPagePreview();
                }
            });
        }

        function canZoneAccept(zone, item){
            var allowedTypes = zone.data('content-types');
            var maxItems = zone.data('max-items');
            var contentType = item.data('content-type');

            if(allowedTypes.length > 0 && jQuery.inArray(contentType, allowedTypes) < 0){
                return false;
            }

            if(maxItems > 0 && zone.find('li.networking-sortable-list').length > maxItems){
                return false;
            }
            return true;
        }

        function onAfterLoad() {

            jQuery('div#field_container_{{ id }} ul.sortable').sortable({
                handle: 'i.fa-arrows-alt',
                opacity: 0.6,
                placeholder: "ui-state-highlight",
                items: 'li.networking-sortable-list',
                connectWith: ".sortable",
                tolerance: 'intersect',
                forcePlaceholderSize: true,
                forceHelperSize: true,
                start: function (event, ui) {
                    jQuery(this).sortable('refreshPositions');

                },
                stop: function (event, ui) {
                    saveLayoutBlockSort(function (xhr) {
                        createInitCmsMessageBox(xhr.messageStatus, xhr.message);
                    });
                    var listItems = jQuery(this).find('.networking-sortable-list');
                    if (listItems.length < 1) {
                        jQuery(this).find(".empty_layout_block").show();
                    } else {
                        jQuery(this).find(".empty_layout_block").hide();
                    }
                },
                update: function (event, ui) {
                    var maxItems = jQuery(this).attr('data-max-items');
                    if (maxItems > 0 && jQuery(this).find('li.networking-sortable-list').length >= maxItems) {
                        jQuery(this).find(".plus_button").hide();
                    } else {
                        jQuery(this).find(".plus_button").show();
                    }
                    var listItems = jQuery(this).find('.networking-sortable-list');
                    if (listItems.length < 1) {
                        jQuery(this).find(".empty_layout_block").show();
                    } else {
                        jQuery(this).find(".empty_layout_block").hide();
                    }
                },
                over: function (event, ui) {
                    var placeholder = jQuery(ui.placeholder);
                    var zone = jQuery(event.target);
                    if(canZoneAccept(zone, jQuery(ui.item))){
                        var emptyBlock = zone.find(".empty_layout_block");
                        var height = emptyBlock.height();
                        placeholder.css('display', 'block');
                        placeholder.css('height', height + 'px');
                        emptyBlock.hide();
                        return;
                    }
                    var display = jQuery(ui.sender).attr('id') === zone.attr('id')?'block':'none';
                    placeholder.css('display', display)

                },
                receive: function (event, ui) {
                    var zone = jQuery(event.target);
                    if(canZoneAccept(zone, jQuery(ui.item))){
                        zone.find(".empty_layout_block").hide();
                        return;
                    }
                    jQuery(ui.placeholder).addClass('ui-state-error');
                    jQuery(ui.sender).sortable('cancel');
                    if (!jQuery(ui.sender).find('.networking-sortable-list').length < 2) {
                        jQuery(ui.sender).find(".empty_layout_block").hide();
                    }

                    return;

                },
                change: function (event, ui) {
                    jQuery('ul.sortable').each(function (i, e) {
                        var list = jQuery(e);
                        var listItems = list.find('.networking-sortable-list').not('.ui-sortable-helper');
                        if (listItems.length < 1) {
                            list.find(".empty_layout_block").show();
                        }
                    });
                }

            });
        }

        (function ($) {
            // refresh the sortable option when a new element is added
            onAfterLoad();
            jQuery('body').on('click', '.add-layout', function (ev) {

                ev.preventDefault();
                var link = jQuery(this);
                var restrictedTypes = link.data('value');

                var tempElement = 'temp' + Date.now();
                var zone = link.data('zone');
                var list = jQuery('#zone_' + zone);
                var element = jQuery('<li id="' + tempElement + '" class="networking-sortable-list"></li>');
                list.find(".empty_layout_block").hide();
                list.append(element);
                var data = {
                    zone: link.data('zone'),
                    sortOrder: link.data('sort-order'),
                    subclass: restrictedTypes[0],
                    code: '{{ admin.code }}',
                    uniqId: '{{ admin.uniqid }}',
                    pageId: '{{ admin.id(admin.subject) }}'
                };
                var url = '{{ url('admin_networking_initcms_layoutblock_create') }}';

                getLayoutBlockCreateForm(url, data, tempElement);

            }).on('click', '.layout-link', function (event) {
                event.preventDefault();
                getLayoutBlockEditForm($(this).data('container'), $(this).data('href'))
            }).on('click', 'i.delete_block', function () {
                if (confirm('{{ "page_admin.confirm"|trans({}, admin.translationDomain) }}')) {
                    jQuery.ajax({
                        url: '{{ url('admin_networking_initcms_layoutblock_deleteAjax') }}',
                        method: 'POST',
                        data: {
                            id: jQuery(this).attr('data-value'),
                            code: '{{ admin.code }}',
                            uniqId: '{{ admin.uniqid }}',
                            pageId: '{{ admin.id(admin.subject) }}',
                            formFieldId: '{{ id }}',
                            _method: 'DELETE'
                        },
                        success: function (xhr) {
                            createInitCmsMessageBox(xhr.messageStatus, xhr.message);
                            jQuery('#field_container_{{ id }}').replaceWith(xhr.html);
                            saveLayoutBlockSort();
                        }
                    });
                }
            }).on('click', 'i.toggle-active', function () {
                if (confirm('{{ "page_admin.confirm"|trans({}, admin.translationDomain) }}')) {
                    jQuery.ajax({
                        url: '{{ url('admin_networking_initcms_layoutblock_toggleActive') }}',
                        method: 'POST',
                        data: {
                            id: jQuery(this).attr('data-value'),
                            code: '{{ admin.code }}',
                            uniqId: '{{ admin.uniqid }}',
                            pageId: '{{ admin.id(admin.subject) }}',
                            formFieldId: '{{ id }}',
                            _method: 'PUT'
                        },
                        success: function (xhr) {
                            createInitCmsMessageBox(xhr.messageStatus, xhr.message);
                            jQuery('#field_container_{{ id }}').replaceWith(xhr.html);
                            saveLayoutBlockSort();
                        }
                    });
                }
            })
            ;
        })(jQuery);
    </script>

    <!-- / edit one association -->
{% endautoescape %}
