{#
This file is part of the Networking package.

(c) net working AG <info@networking.ch>

For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.
#}
{% extends '@NetworkingBootstrap/Form/fields.html.twig' %}

{# Custom Sonata Admin Extension, template override #}
{% block sonata_admin_orm_one_to_one_widget %}
    {% include '@NetworkingInitCms/CRUD/edit_orm_one_to_one.html.twig' %}
{% endblock %}

{% block sonata_admin_orm_many_to_many_widget %}
    {% include '@NetworkingInitCms/CRUD/edit_orm_many_to_many.html.twig' %}
{% endblock %}

{% block sonata_admin_orm_many_to_one_widget %}
    {% include '@NetworkingInitCms/CRUD/edit_orm_many_to_one.html.twig' %}
{% endblock %}

{% block sonata_admin_orm_one_to_many_widget %}
    {% if sonata_admin.field_description.name == 'layoutBlock' %}
        {% include '@NetworkingInitCms/PageAdmin/page_edit_layout_blocks.html.twig' %}
    {% else %}
        {% include '@NetworkingInitCms/CRUD/edit_orm_one_to_many.html.twig' %}
    {% endif %}
{% endblock %}

{% block sonata_type_model_widget %}
    {#
    This is not the best way to do if
    TODO : improve this part
    #}

    {# model {{ sonata_admin.field_description.mappingtype }} #}
    {% if sonata_admin.field_description is empty %}
        {{ block('choice_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_ONE') %}
        {{ block('sonata_admin_orm_one_to_one_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE') %}
        {{ block('sonata_admin_orm_many_to_one_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_MANY') %}
        {{ block('sonata_admin_orm_many_to_many_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_MANY') %}
        {{ block('sonata_admin_orm_one_to_many_widget') }}
    {% else %}
        {# INVALID MODE : {{ id }} #}
        {{ block('choice_widget') }}
    {% endif %}
{% endblock %}

{% block form_row %}
    {% if sonata_admin.admin is defined and  sonata_admin.admin %}
        {% set translation_domain = sonata_admin.field_description.translationDomain %}
        {% if label is same as(false) %}
            {% set label_render = false %}
        {% else %}
            {% set label_render = true %}
        {% endif %}
    {% endif %}
    {{ parent() }}

{% endblock form_row %}

{% block form_label %}
    {% if sonata_admin.admin is defined and  sonata_admin.admin %}
        {% set translation_domain = sonata_admin.field_description.translationDomain %}
        {% if label is same as(false) %}
            {% set label_render = false %}
        {% else %}
            {% set label_render = true %}
        {% endif %}
    {% endif %}
    {{ parent() }}

{% endblock form_label %}

{% block form_help %}
    {% if sonata_admin.admin is defined and  sonata_admin.admin %}
        {% set translation_domain = sonata_admin.field_description.translationDomain %}
    {% endif %}
    {{ parent() }}

{% endblock form_help %}
{% block sonata_roles_matrix_widget %}
    {% apply spaceless %}
        {{ renderMatrix(form)|raw }}
        <ul class="list-unstyled">
            {{ renderRolesList(form)|raw }}
        </ul>
    {% endapply %}
{% endblock sonata_roles_matrix_widget %}

{% block checkbox_widget %}
    {% if 'sonata_roles_matrix' in form.parent.vars.block_prefixes %}
        <div class="checkbox">
            {{- form_label(form, null, { widget: parent() }) -}}
        </div>
    {% else %}
    {{ parent() }}
    {% endif %}
{% endblock checkbox_widget %}


{% block sonata_type_model_list_widget %}
    <div id="field_container_{{ id }}" class="field-container">
        <span id="field_widget_{{ id }}">

            {% if sonata_admin.value and sonata_admin.field_description.associationadmin.urlSafeIdentifier(sonata_admin.value) is not null%}
                {{ render(path('sonata_admin_short_object_information', {
                    '_sonata_admin': sonata_admin.field_description.associationadmin.baseCodeRoute,
                    'objectId': sonata_admin.field_description.associationadmin.urlSafeIdentifier(sonata_admin.value),
                    'uniqid': sonata_admin.field_description.associationadmin.uniqid,
                    'linkParameters': sonata_admin.field_description.option('link_parameters', {})
                } + (
                    sonata_admin.field_description.associationadmin.hasRequest()
                    ? sonata_admin.field_description.associationadmin.request.attributes.get('_route_params', {})
                    : {}
                ) + app.request.query.all|default({})
                )) }}
            {% elseif sonata_admin.field_description.options.placeholder is defined and sonata_admin.field_description.options.placeholder %}
                <span class="inner-field-short-description">
                    {{ sonata_admin.field_description.options.placeholder|trans({}, 'SonataAdminBundle') }}
                </span>
            {% endif %}
        </span>
        <span style="display: none">
            {{ form_widget(form) }}
        </span>

        <span id="field_actions_{{ id }}" class="field-actions">

            {% if sonata_admin.field_description.associationadmin.hasroute('list') and sonata_admin.field_description.associationadmin.isGranted('LIST') %}
                &nbsp;
                <a href="{{ sonata_admin.field_description.associationadmin.generateUrl('list') }}"
                   onclick="return start_field_dialog_form_list_{{ id }}(this);"
                   class="btn btn-default btn-sm sonata-ba-action"
                   title="{{ 'link_list'|trans({}, 'SonataAdminBundle') }}"
                >
                    <i class="glyphicon glyphicon-list"></i>
                    {{ 'link_list'|trans({}, 'SonataAdminBundle') }}
                </a>
            {% endif %}

            {% if sonata_admin.field_description.associationadmin.hasroute('create') and sonata_admin.field_description.associationadmin.isGranted('CREATE') %}
                &nbsp;
                <a href="{{ sonata_admin.field_description.associationadmin.generateUrl('create') }}"
                   onclick="return start_field_dialog_form_add_{{ id }}(this);"
                   class="btn btn-primary btn-sm sonata-ba-action"
                   title="{{ 'link_add'|trans({}, 'SonataAdminBundle') }}"
                >
                    <i class="glyphicon glyphicon-plus"></i>
                    {{ 'link_add'|trans({}, 'SonataAdminBundle') }}
                </a>
            {% endif %}

            {% if sonata_admin.field_description.associationadmin.hasRoute('delete') and sonata_admin.field_description.associationadmin.isGranted('DELETE') %}
                &nbsp;
                <a href=""
                   onclick="return remove_selected_element_{{ id }}(this);"
                   class="btn btn-danger btn-sm sonata-ba-action"
                   title="{{ 'link_delete'|trans({}, 'SonataAdminBundle') }}"
                >
                    <i class="glyphicon glyphicon-trash "></i>
                    {{ 'link_delete'|trans({}, 'SonataAdminBundle') }}
                </a>
            {% endif %}
        </span>

        <div class="modal" id="field_dialog_{{ id }}" style="display: none" role="dialog"
             aria-hidden="true">
        </div>

    </div>

    {% include '@NetworkingInitCms/CRUD/edit_orm_many_association_script.html.twig' %}
{% endblock %}

{% block sonata_type_admin_widget %}
    {# admin {{ sonata_admin.field_description.mappingtype }} #}
    {% if sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_ONE') %}
        {{ block('sonata_admin_orm_one_to_one_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE') %}
        {{ block('sonata_admin_orm_many_to_one_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_MANY') %}
        {{ block('sonata_admin_orm_many_to_many_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_MANY') %}
        {{ block('sonata_admin_orm_one_to_many_widget') }}
    {% else %}
        INVALID MODE : {{ id }}
    {% endif %}
{% endblock %}

{% block sonata_type_collection_widget %}
    {% if sonata_admin.field_description.mappingtype  == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_MANY') %}
        {{ block('sonata_admin_orm_one_to_many_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_MANY') %}
        {{ block('sonata_admin_orm_many_to_many_widget') }}
    {% else %}
        INVALID MODE : {{ id }} - type : sonata_type_collection - mapping : {{ sonata_admin.field_description.mappingtype }}
    {% endif %}
{% endblock %}

{# Buttons #}
{% block button_widget %}
    {% if sonata_admin.admin is defined and  sonata_admin.admin %}
        {% set translation_domain = onata_admin.field_description.translationDomain %}
    {% endif %}
    {% apply spaceless %}
        {% if label is empty %}
            {% set label = name|humanize %}
        {% endif %}
        <button type="{{ type|default('button') }}" {{ block('button_attributes') }}>
            {% if icon is not empty %}
                {{ networking_bootstrap_icon(icon, icon_inverted|default(false)) }}
            {% endif %}
            {{ label|trans({}, translation_domain) }}</button>
    {% endapply %}
{% endblock button_widget %}

{# Widgets #}
{% block tabs_widget %}
    {% if sonata_admin.admin is defined and  sonata_admin.admin %}
        {% set translation_domain = onata_admin.field_description.translationDomain %}
    {% endif %}
    {% apply spaceless %}
        <ul class="{{ form.vars.attr.class }}">
            {% for tab in form.vars.tabs %}
                <li{% if tab.active %} class="active"{% endif %}>
                    <a data-toggle="tab" href="#{{ tab.id }}">
                        {% if tab.icon %}{{ networking_bootstrap_icon(tab.icon) }}{% endif %}
                        {{ tab.label|trans({}, tab.translation_domain) }}
                    </a>
                </li>
            {% endfor %}
        </ul>
    {% endapply %}
{% endblock %}


{% block widget_container_attributes_choice_widget %}
    {% apply spaceless %}
        id="{{ id }}"
        {% for attrname,attrvalue in attr %}{{ attrname }}="{% if attrname == 'class' %}unstyled {% endif %}{{ attrvalue }}" {% endfor %}
        {% if "class" not in attr %}class="unstyled"{% endif %}
    {% endapply %}
{% endblock %}


{% block choice_widget %}
    {% if sonata_admin.admin is defined and  sonata_admin.admin %}
        {% set translation_domain = sonata_admin.field_description.translationDomain %}
    {% endif %}
    {{ parent() }}
    {% if taggable is defined and taggable or select2 is defined and select2 %}
        <script type="text/javascript">
            jQuery(document).ready(function () {
                {% set allowClear = (multiple or not required?'true':'false') %}
                jQuery("#{{ id }}").select2({
                    placeholder: "{{ 'Select'|trans({}) }}",
                    allowClear: {{ allowClear }}
                });
            });
        </script>
    {% endif %}
{% endblock choice_widget %}



{# Support #}

{% block form_widget_remove_btn %}
    {% apply spaceless %}

        {% if widget_remove_btn.wrapper_div is not same as(false) %}
            <div class="{{ widget_remove_btn.wrapper_div.class }} col-sm-offset-3">
        {% endif %}
        {% if widget_remove_btn|default(null) %}
            {% set button_type = 'remove' %}
            {% set button_values = widget_remove_btn %}
            {{ block('collection_button') }}
        {% endif %}
        {% if widget_remove_btn.wrapper_div is not same as(false) %}
            </div>
            <div class="clearfix"></div>
        {% endif %}
    {% endapply %}
{% endblock form_widget_remove_btn %}


{% block sonata_type_immutable_array_widget %}
    {% apply spaceless %}
        <div class="controls">
            <div {{ block('widget_container_attributes') }}>
                {{ form_errors(form) }}

                {% for key, child in form %}
                    {{ block('sonata_type_immutable_array_widget_row') }}
                {% endfor %}

                {{ form_rest(form) }}
            </div>
        </div>
    {% endapply %}
{% endblock sonata_type_immutable_array_widget %}

{% block sonata_type_immutable_array_widget_row %}
    {% apply spaceless %}
        <div class="control-group{% if errors|length > 0 %} error{% endif %}"
             id="sonata-ba-field-container-{{ id }}-{{ key }}">

            {{ form_label(child) }}

            <div class="controls sonata-ba-field sonata-ba-field-{{ sonata_admin.edit }}-{{ sonata_admin.inline }} {% if errors|length > 0 %}sonata-ba-field-error{% endif %}">
                {{ form_widget(child) }}
            </div>

            {% if errors|length > 0 %}
                <div class="help-inline sonata-ba-field-error-messages">
                    {{ form_errors(child) }}
                </div>
            {% endif %}
        </div>
    {% endapply %}
{% endblock %}

{% block date_widget %}
    {% apply spaceless %}
        {% if widget == 'single_text' %}
            {% if datepicker is defined %}
                {% set widget_addon_icon = widget_addon_append.icon is defined ? widget_addon_append.icon : 'calendar' %}
                <div data-provider="datepicker" class="{{ attr.widget_class|default('') ~ ' input-group date' }}"
                     data-link-field="{{ id }}" data-link-format="dd.mm.yyyy" data-date-format="dd.mm.yyyy"
                     data-date-language="{{ app.request.getLocale()|slice(0, 2) }}">
                    {# Clear the id & name attributes so that they don't override the hidden fields values #}
                    {% set id = id ~ '_mopa_picker_display' %}
                    {% set type = 'text' %}
                    {{ block('form_widget_simple') }}
                    <span class="input-group-addon">{{ networking_bootstrap_icon(widget_addon_icon) }}</span>
                    {% if widget_reset_icon is defined %}
                        <span class="input-group-addon">{{ networking_bootstrap_icon(widget_reset_icon) }}</span>
                    {% endif %}
                </div>
            {% else %}
                {{ block('form_widget_simple') }}
            {% endif %}
        {% else %}
            {% set attr = attr|merge({'class': attr.class|default('form-inline')}) %}
            <div {{ block('widget_container_attributes') }}>
                {{ date_pattern|replace({
                    '{{ year }}':  form_widget(form.year, {'attr': {'class': attr.widget_class|default('') ~ ''}, 'horizontal_input_wrapper_class': horizontal_input_wrapper_class|default('col-sm-3')}),
                    '{{ month }}': form_widget(form.month, {'attr': {'class': attr.widget_class|default('') ~ ''}, 'horizontal_input_wrapper_class': horizontal_input_wrapper_class|default('col-sm-3')}),
                    '{{ day }}':   form_widget(form.day, {'attr': {'class': attr.widget_class|default('') ~ ''}, 'horizontal_input_wrapper_class': horizontal_input_wrapper_class|default('col-sm-3')}),
                })|raw }}
            </div>
        {% endif %}
    {% endapply %}
{% endblock date_widget %}

{% block time_widget %}
    {% apply spaceless %}
        {% if widget == 'single_text' %}
            {% if timepicker is defined %}
                {% set widget_addon_icon = widget_addon_append.icon is defined ? widget_addon_append.icon : 'time' %}
                <div data-provider="timepicker" class="input-group date"
                     data-link-field="{{ id }}" data-link-format="hh:ii" data-date-format="hh:ii">
                    {# Clear the id & name attributes so that they don't override the hidden fields values #}
                    {% set id = id ~ '_mopa_picker_display' %}
                    {% set type = 'text' %}
                    {{ block('form_widget_simple') }}
                    <span class="input-group-addon">{{ networking_bootstrap_icon(widget_addon_icon) }}</span>
                    {% if widget_reset_icon is defined %}
                        <span class="input-group-addon">{{ networking_bootstrap_icon(widget_reset_icon) }}</span>
                    {% endif %}
                </div>
            {% else %}
                {{ block('form_widget_simple') }}
            {% endif %}
        {% else %}
            {% set attr = attr|merge({'class': attr.class|default('form-inline')}) %}
            {% apply spaceless %}
                <div {{ block('widget_container_attributes') }}>
                    {{ form_widget(form.hour, { 'attr': {  'size': '2'}, 'horizontal_input_wrapper_class': horizontal_input_wrapper_class|default('col-sm-2')}) }}
                    {% if with_minutes %}
                        {{ form_widget(form.minute, { 'attr': { 'size': '2' }, 'horizontal_input_wrapper_class': horizontal_input_wrapper_class|default('col-sm-2')}) }}
                    {% endif %}
                    {% if with_seconds %}
                        :{{ form_widget(form.second, { 'attr': { 'size': '2' }, 'horizontal_input_wrapper_class': horizontal_input_wrapper_class|default('col-sm-2') }) }}
                    {% endif %}
                </div>
            {% endapply %}
        {% endif %}
    {% endapply %}
{% endblock time_widget %}

{% block datetime_widget %}
    {% apply spaceless %}
        {% if widget == 'single_text' %}
            {% if datetimepicker is defined %}
                {% set widget_addon_icon = widget_addon_append.icon is defined ? widget_addon_append.icon : 'th' %}
                <div data-provider="datetimepicker" class="input-group date"
                     data-link-field="{{ id }}" data-date-format="dd.mm.yyyy hh:ii"
                     data-link-format="dd.mm.yyyy hh:ii" data-date-language="{{ app.request.getLocale()|slice(0, 2) }}">
                    {% set id = id ~ '_mopa_picker_display' %}
                    {% set type = 'text' %}
                    {{ block('form_widget_simple') }}
                    <span class="input-group-addon">{{ networking_bootstrap_icon(widget_addon_icon) }}</span>
                    {% if widget_reset_icon is defined %}
                        <span class="input-group-addon">{{ networking_bootstrap_icon(widget_reset_icon) }}</span>
                    {% endif %}
                </div>
            {% else %}
                {{ block('form_widget_simple') }}
            {% endif %}
        {% else %}
            {% set attr = attr|merge({'class': attr.class|default('')}) %}
            <div {{ block('widget_container_attributes') }}>
                {{ form_errors(form.date) }}
                {{ form_errors(form.time) }}
                {{ form_widget(form.date, {'attr': {'class': attr.widget_class|default('')}, 'horizontal_input_wrapper_class': horizontal_input_wrapper_class|default('col-sm-3')}) }}
                {{ form_widget(form.time, {'attr': {'class': attr.widget_class|default('')}, 'horizontal_input_wrapper_class': horizontal_input_wrapper_class|default('col-sm-2')}) }}
            </div>
        {% endif %}
    {% endapply %}
{% endblock datetime_widget %}

{% block networking_type_mediaprint_widget %}
    {{ sonata_media(get_media_by_id(value), 'admin') }}
{% endblock %}

{% block networking_type_media_preview_widget %}
    {% if is_image %}
        <img src="{{ sonata_path(value, 'admin')  }}?{{ date().timestamp }}"/>
    {% else %}
        {{ sonata_media(value, 'admin') }}
    {% endif %}

{% endblock %}



{% block networking_type_iconradio_widget %}
    {% if sonata_admin.admin is defined and  sonata_admin.admin %}
        {% set translation_domain = sonata_admin.field_description.translationDomain %}
    {% endif %}
    {% apply spaceless %}
        {% if expanded %}
            <div {{ block('widget_container_attributes') }}>
                {% for row in form|batch(3, '-') %}
                    <div class="row">
                        {% for key, child in row %}
                            <div class="col-sm-4">
                                {% if child != '-' %}
                                    <label class="radio-inline">
                                        {{ form_widget(child, {'horizontal_label_class': horizontal_label_class, 'horizontal_input_wrapper_class': horizontal_input_wrapper_class, 'attr': {'class': attr.widget_class|default('') }}
                                        ) }}
                                        {{ child.vars.label|trans({}, choice_translation_domain) }}
                                    </label>

                                    <div class="clearfix"></div>
                                    <br>
                                    {% if icons[choices[key].value] %}
                                        <img src="{{ asset(icons[choices[key].value]) }}" width="175px"/>
                                    {% endif %}
                                    <p>&nbsp;</p>
                                {% endif %}
                            </div>
                        {% endfor %}
                    </div>
                {% endfor %}
            </div>
            <div class="clearfix"></div>
        {% else %}
            {# just let the choice widget render the select tag #}
            {{ block('choice_widget') }}
        {% endif %}
    {% endapply %}
{% endblock %}





{% block sonata_security_roles_widget %}
    {% apply spaceless %}
        <div class="editable">
            <p><a class="toggle-roles btn btn-primary">{{ 'toggle.roles'|trans({},'NetworkingInitCmsBundle' ) }}</a></p>

            <div id="securityRoles">
                {{ block('choice_widget') }}
            </div>
            <p><a class="toggle-roles btn btn-primary">{{ 'toggle.roles'|trans({},'NetworkingInitCmsBundle' ) }}</a>

            <p>
                <script type="text/javascript">
                    $('.toggle-roles').click(function () {
                        $('#securityRoles input[id^="{{ id }}"]').each(function () {
                            // toggle checkbox
                            $(this).prop('checked', !$(this).prop('checked'));
                            // toggle class
                            $(this).parents('label').toggleClass('active');

                        });
                        return false;
                    });
                </script>
        </div>
        {% if read_only_choices|length > 0 %}
            <div class="readonly">
                <ul>
                    {% for choice in read_only_choices %}
                        <li>{{ choice }}</li>
                    {% endfor %}
                </ul>
            </div>
        {% endif %}
    {% endapply %}
{% endblock sonata_security_roles_widget %}

{% block media_entity_type_widget %}

    {% set attr = attr|merge({'class': attr.class|default('') ~ (errors|length > 0 ? ' error' : '') }) %}
    {% if not label_render %}{% set widget_controls = false %}{% endif %}
    {# {{ block('widget_form_group_start') }} #}
    <div id="field_container_{{ id }}" class="field-container">
            <span id="field_widget_{{ id }}">

                {% if form.vars.data %}
                    {{ render(path('sonata_admin_short_object_information', {
                        '_sonata_admin':     admin.code,
                        'objectId': admin.id(form.vars.data),
                        'uniqid':   admin.uniqid
                    })) }}
                    &nbsp;
                {% else %}
                    <span class="inner-field-short-description">
                    </span>
                {% endif %}
            </span>

        {{ block('hidden_widget') }}

        <span id="field_actions_{{ id }}" class="field-actions">
                <a href="{{ admin.generateUrl('gallery', {'context': context, 'provider': (provider_name ? provider_name : '')}) }}"
                   onclick="return open_media_list_{{ id }}(this);"
                   class="btn btn-default btn-sm sonata-ba-action"
                   title="{{ 'link_list'|trans({}, 'SonataAdminBundle') }}"
                >
                    <i class="glyphicon glyphicon-list"></i>
                    {{ 'link_list'|trans({}, 'SonataAdminBundle') }}
                </a>

            {% if admin.hasroute('create') and admin.isGranted('CREATE') %}
                &nbsp;
                <a href="{{ admin.generateUrl('create', {'gallery': true, 'context': context, 'provider': (provider_name ? provider_name : '')}) }}"
                   onclick="return start_field_dialog_form_add_{{ id }}(this);"
                   class="btn btn-primary btn-sm sonata-ba-action"
                   title="{{ 'link_add'|trans({}, 'SonataAdminBundle') }}"
                >
                    <i class="glyphicon glyphicon-plus"></i>
                    {{ 'link_add'|trans({}, 'SonataAdminBundle') }}
                </a>
            {% endif %}

            {% if admin.hasRoute('delete') and admin.isGranted('DELETE') %}
                &nbsp;
                <a href=""
                   onclick="return remove_selected_element_{{ id }}(this);"
                   class="btn btn-danger btn-sm sonata-ba-action"
                   title="{{ 'link_delete'|trans({}, 'SonataAdminBundle') }}"
                >
                    <i class="glyphicon glyphicon-trash"></i>
                    {{ 'link_delete'|trans({}, 'SonataAdminBundle') }}
                </a>
            {% endif %}
            </span>

        <div class="modal" id="field_dialog_{{ id }}" style="display: none" role="dialog"
             aria-hidden="true">
        </div>

    </div>

    {% include '@NetworkingInitCms/CRUD/edit_media_entity_script.html.twig' %}
{% endblock %}

{% block ckeditor_widget %}
    <textarea {{ block('widget_attributes') }}>{{ value }}</textarea>

    {% if enable and not async %}
        {{ block('_ckeditor_javascript') }}
    {% endif %}
{% endblock %}

{% block ckeditor_javascript %}
    {% if enable and async %}
        {{ block('_ckeditor_javascript') }}
    {% endif %}
{% endblock %}

{% block _ckeditor_javascript %}
    {% if autoload %}
        <script type="text/javascript">
            var CKEDITOR_BASEPATH = "{{ ckeditor_base_path(base_path) }}";
        </script>
        <script type="text/javascript" src="{{ ckeditor_js_path(js_path) }}"></script>
        {% if jquery %}
            <script type="text/javascript" src="{{ ckeditor_js_path(jquery_path) }}"></script>
        {% endif %}
    {% endif %}
    <script type="text/javascript">
        {% if jquery %}
        $(function () {
            {% endif %}

            {% if require_js %}
            require(['ckeditor'], function () {
                {% endif %}

                {{ ckeditor_destroy(id) }}

                {% for plugin_name, plugin in plugins %}
                {{ ckeditor_plugin(plugin_name, plugin) }}
                {% endfor %}

                {% for style_name, style in styles %}
                {{ ckeditor_styles_set(style_name, style) }}
                {% endfor %}

                {% for template_name, template in templates %}
                {{ ckeditor_template(template_name, template) }}
                {% endfor %}

                {% block ckeditor_widget_extra %}{% endblock ckeditor_widget_extra %}
                {% set config = config|merge({'language': app.request.locale}) %}

                {{ ckeditor_widget(id, config, {
                    auto_inline: auto_inline,
                    inline: inline,
                    input_sync: input_sync,
                    filebrowsers: filebrowsers
                }) }}

                {% if require_js %}
            });
            {% endif %}
            {% if jquery %}
        });
        {% endif %}
    </script>
{% endblock %}


{% block help_widget_popover %}
    {% if sonata_admin.admin is defined and  sonata_admin.admin %}
        {% set translation_domain = sonata_admin.field_description.translationDomain %}
    {% endif %}
    {% apply spaceless %}
        {% for attrname,attrvalue in help_widget_popover %}
            data-{{ attrname }}="{{ attrvalue|trans({}, domain|default('messages')) }}"
        {% endfor %}
    {% endapply %}
{% endblock help_widget_popover %}

{% block qr_code_widget %}
    <img src="{{ qrCodeUrl }}">
{% endblock %}

{% block sonata_type_native_collection_widget_row %}
    {% apply spaceless %}
        <div class="sonata-collection-row">
            {% if allow_delete %}
            <div class="row">
                <div class="col-xs-1">
                    <a href="#" class="btn btn-link sonata-collection-delete">
                        <i class="fas fa-minus-circle" aria-hidden="true"></i>
                    </a>
                </div>
                <div class="col-xs-11">
                    {% endif %}
                    {{ form_row(child, { label: false }) }}
                    {% if allow_delete %}
                </div>
            </div>
            {% endif %}
        </div>
    {% endapply %}
{% endblock sonata_type_native_collection_widget_row %}

{% block sonata_type_native_collection_widget %}
    {% apply spaceless %}
        {% if prototype is defined and not prototype.rendered %}
            {% set prototype_markup = form_row(prototype) %}
            {% set data_prototype_name = form.vars.form.vars.prototype.vars.name|default('__name__') %}
            {% set data_prototype_label = form.vars.form.vars.prototype.vars.label|default('__name__label__') %}
            {% set widget_form_group_attr = widget_form_group_attr|merge({
                'data-prototype': prototype_markup,
                'data-prototype-name': data_prototype_name,
                'data-prototype-label': data_prototype_label
            })|merge(attr) %}
        {% endif %}
        {# Add row by default use attr.class to change#}
        {% if 'collection' in form.vars.block_prefixes and attr.class is defined %}
            {% set widget_form_group_attr = widget_form_group_attr|merge({'class': widget_form_group_attr.class|default('row') ~ ' ' ~ attr.class}) %}
        {% endif %}
        {# collection item adds class {form_id}_form-group  too #}
        {% set widget_form_group_attr = widget_form_group_attr|merge({'id': 'collection' ~ id ~ '_form_group', 'class': widget_form_group_attr.class ~ ' collection-items ' ~ id ~ '_form_group'}) %}

        <div {% for attrname,attrvalue in widget_form_group_attr %} {{attrname}}="{{attrvalue}}"{% endfor %}>
        {# Add initial prototype form #}
        {% if form.vars.value|length == 0 and prototype is defined %}
            {% for name in prototype_names %}
                {{ prototype_markup|replace({'__name__': name})|raw }}
            {% endfor %}
        {% endif %}
        {{ block('form_widget') }}
        </div>
    {% endapply %}
{% endblock sonata_type_native_collection_widget %}

{% block help_label %}
    <span class="help-block">{{ help_label|trans({}, translation_domain) }}</span>
{% endblock help_label %}

{% block help_label_tooltip %}
    <span class="help-block">
        <a href="#" data-toggle="tooltip" data-placement="{{ help_label_tooltip.placement}}" data-title="{{ help_label_tooltip.title|trans({}, translation_domain) }}">
            {% if help_label_tooltip.icon is not same as(false) %}
                {{ networking_bootstrap_icon(help_label_tooltip.icon) }}
            {% endif %}
            {% if help_label_tooltip.text is not same as(null) %}
                {{ help_label_tooltip.text|trans({}, translation_domain) }}
            {% endif %}
        </a>
    </span>
{% endblock help_label_tooltip %}

{% block help_block_tooltip %}
    {% set help_label_tooltip = help_block_tooltip %}
    {{ block('help_label_tooltip') }}
{% endblock help_block_tooltip %}

{% block help_label_popover %}
    <span class="help-block">
        <a href="#" data-toggle="popover" data-trigger="hover" data-placement="{{ help_label_popover.placement}}" data-title="{{ help_label_popover.title|trans({}, translation_domain) }}" data-content="{{ help_label_popover.content|trans({}, translation_domain) }}" data-html="true">
            {% if help_label_popover.icon is not same as(false) %}
                {{ networking_bootstrap_icon(help_label_popover.icon) }}
            {% endif %}
            {% if help_label_popover.text is not same as(null) %}
                {{ help_label_popover.text|trans({}, translation_domain)|raw }}
            {% endif %}
        </a>
    </span>
{% endblock help_label_popover %}


