<?php
/**
 * This file is part of the init_cms_sandbox package.
 *
 * (c) net working AG <info@networking.ch>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Networking\InitCmsBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Networking\InitCmsBundle\Model\UserInterface;
use Sonata\UserBundle\Entity\BaseUser as SonataBaseUser;
use Networking\InitCmsBundle\Model\AdminSettings;

/**
 * @author Yorkie Chadwick <y.chadwick@networking.ch>
 */
abstract class BaseUser extends SonataBaseUser implements UserInterface
{
    /**
     * @var int
     */
    protected $id;

    /**
     * @var \Networking\InitCmsBundle\Model\AdminSettings
     */
    protected $adminSettings;

    /**
     * @var \DateTime
     */
    protected $lastActivity;

    protected $twoStepVerificationCode;

    /**
     * @var Group[]|Collection
     */
    protected $groups;

    protected $firstname;

    protected $lastname;

    protected $gender;

    /**
     * Hook on pre-persist operations.
     */
    public function prePersist(): void
    {
        $this->createdAt = new \DateTime();
        $this->updatedAt = new \DateTime();
    }

    /**
     * Hook on pre-update operations.
     */
    public function preUpdate(): void
    {
        $this->updatedAt = new \DateTime();
    }

    /**
     * Get id.
     *
     * @return int $id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return array
     */
    public function getAdminSettings(): array
    {

        return $this->adminSettings??[];
    }

    /**
     * @param $key
     *
     * @return mixed
     */
    public function getAdminSetting($key)
    {
        if (array_key_exists($key, $this->adminSettings)) {
            return $this->adminSettings[$key];
        }

        return false;
    }

    /**
     * @param $key
     * @param $value
     */
    public function setAdminSetting($key, $value)
    {
        if (!$this->adminSettings) {
            $this->adminSettings = [];
        }

        $this->adminSettings[$key] = $value;
    }

    /**
     * @return mixed
     */
    public function getTwoStepVerificationCode()
    {
        return $this->twoStepVerificationCode;
    }

    /**
     * @param mixed $twoStepVerificationCode
     *
     * @return BaseUser
     */
    public function setTwoStepVerificationCode($twoStepVerificationCode)
    {
        $this->twoStepVerificationCode = $twoStepVerificationCode;

        return $this;
    }


    public function getHash()
    {
        return md5(strtolower(trim($this->email)));
    }

    /**
     * @param \DateTime $lastActivity
     */
    public function setLastActivity($lastActivity)
    {
        $this->updatedAt = $lastActivity;
    }

    /**
     * @return \DateTime
     */
    public function getLastActivity()
    {
        return $this->updatedAt;
    }

    public function getRoles(): array
    {
        $roles = parent::getRoles(); // TODO: Change the autogenerated stub

        foreach ($this->getGroups() as $group) {
            $roles = array_merge($roles, $group->getRoles());
        }

        return array_values(array_unique($roles));
    }


    /**
     * @param mixed $groups
     *
     * @return BaseUser
     */
    public function setGroups($groups)
    {
        foreach ($groups as $group) {
            $this->addGroup($group);
        }

        return $this;
    }


    /**
     * {@inheritdoc}
     */
    public function getGroups()
    {
        return $this->groups ?: $this->groups = new ArrayCollection();
    }

    /**
     * {@inheritdoc}
     */
    public function getGroupNames()
    {
        $names = [];
        foreach ($this->getGroups() as $group) {
            $names[] = $group->getName();
        }

        return $names;
    }

    /**
     * {@inheritdoc}
     */
    public function hasGroup($name)
    {
        return in_array($name, $this->getGroupNames());
    }

    /**
     * {@inheritdoc}
     */
    public function addGroup(GroupInterface $group)
    {
        if (!$this->getGroups()->contains($group)) {
            $this->getGroups()->add($group);
        }

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function removeGroup(GroupInterface $group)
    {
        if ($this->getGroups()->contains($group)) {
            $this->getGroups()->removeElement($group);
        }

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function setBiography($biography)
    {
        $this->biography = $biography;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getBiography()
    {
        return $this->biography;
    }

    /**
     * {@inheritdoc}
     */
    public function setDateOfBirth($dateOfBirth)
    {
        $this->dateOfBirth = $dateOfBirth;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getDateOfBirth()
    {
        return $this->dateOfBirth;
    }


    /**
     * {@inheritdoc}
     */
    public function setFirstname($firstname)
    {
        $this->firstname = $firstname;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getFirstname()
    {
        return $this->firstname;
    }

    /**
     * {@inheritdoc}
     */
    public function setGender($gender)
    {
        $this->gender = $gender;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getGender()
    {
        return $this->gender;
    }


    /**
     * {@inheritdoc}
     */
    public function setLastname($lastname)
    {
        $this->lastname = $lastname;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getLastname()
    {
        return $this->lastname;
    }
    

    /**
     * {@inheritdoc}
     */
    public function getFullname()
    {
        return sprintf('%s %s', $this->getFirstname(), $this->getLastname());
    }

    /**


    /**
     * Returns the gender list.
     *
     * @return array
     */
    public static function getGenderList()
    {
        return [
            'gender_unknown' => \Sonata\UserBundle\Model\UserInterface::GENDER_UNKNOWN,
            'gender_female' => UserInterface::GENDER_FEMALE,
            'gender_male' => UserInterface::GENDER_MALE,
        ];
    }

}
