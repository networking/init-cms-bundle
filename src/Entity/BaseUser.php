<?php

declare(strict_types=1);

/**
 * This file is part of the init_cms_sandbox package.
 *
 * (c) net working AG <info@networking.ch>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Networking\InitCmsBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Networking\InitCmsBundle\Model\UserInterface;
use Sonata\UserBundle\Entity\BaseUser as SonataBaseUser;
use Networking\InitCmsBundle\Model\AdminSettings;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Validator\Exception\UnexpectedValueException;

/**
 * @author Yorkie Chadwick <y.chadwick@networking.ch>
 */
abstract class BaseUser extends SonataBaseUser implements UserInterface
{
    /**
     * @var int
     */
    protected $id;

    /**
     * @var \Networking\InitCmsBundle\Model\AdminSettings
     */
    protected $adminSettings;

    /**
     * @var \DateTime
     */
    protected ?DateTime $lastActivity = null;

    protected ?string $twoStepVerificationCode = null;

    /**
     * @var Group[]|Collection
     */
    protected Collection|array $groups;

    protected ?string $firstname = null;

    protected ?string $lastname = null;


    protected ?string $locale = null;

    protected int $userMinPassword = 8;

    protected int $adminUserMinPassword = 12;

    public function getHexId()
    {
        return bin2hex('user_'.$this->getId());
    }

    public function getLocale(): ?string
    {
        return $this->locale;
    }

    public function setLocale(string $locale)
    {
        $this->locale = $locale;
        return $this;
    }

    /**
     * Hook on pre-persist operations.
     */
    public function prePersist(): void
    {
        $this->createdAt = new \DateTime();
        $this->updatedAt = new \DateTime();
    }

    /**
     * Hook on pre-update operations.
     */
    public function preUpdate(): void
    {
        $this->updatedAt = new \DateTime();
    }

    /**
     * Get id.
     *
     * @return int $id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return array
     */
    public function getAdminSettings(): array
    {

        return $this->adminSettings ?? [];
    }

    /**
     * @param $key
     *
     * @return mixed
     */
    public function getAdminSetting($key): mixed
    {
        if (array_key_exists($key, $this->getAdminSettings())) {
            return $this->adminSettings[$key];
        }

        return false;
    }

    /**
     * @param $key
     * @param $value
     */
    public function setAdminSetting($key, $value): void
    {
        if (!$this->adminSettings) {
            $this->adminSettings = [];
        }

        $this->adminSettings[$key] = $value;
    }

    /**
     * @return mixed
     */
    public function getTwoStepVerificationCode(): ?string
    {
        return $this->twoStepVerificationCode;
    }

    /**
     * @return BaseUser
     */
    public function setTwoStepVerificationCode(?string $twoStepVerificationCode): self
    {
        $this->twoStepVerificationCode = $twoStepVerificationCode;

        return $this;
    }


    public function getHash(): string
    {
        return md5(strtolower(trim($this->email)));
    }

    /**
     * @param \DateTime $lastActivity
     */
    public function setLastActivity($lastActivity): void
    {
        $this->updatedAt = $lastActivity;
    }

    /**
     * @return \DateTime
     */
    public function getLastActivity(): ?\DateTime
    {
        return $this->updatedAt;
    }

    public function getRoles(): array
    {
        $roles = parent::getRoles(); // TODO: Change the autogenerated stub

        foreach ($this->getGroups() as $group) {
            $roles = array_merge($roles, $group->getRoles());
        }

        return array_values(array_unique($roles));
    }


    /**
     * @return BaseUser
     */
    public function setGroups(mixed $groups): self
    {
        foreach ($groups as $group) {
            $this->addGroup($group);
        }

        return $this;
    }


    /**
     * {@inheritdoc}
     */
    public function getGroups(): Collection|array
    {
        return $this->groups ?: $this->groups = new ArrayCollection();
    }

    /**
     * {@inheritdoc}
     */
    public function getGroupNames(): array
    {
        $names = [];
        foreach ($this->getGroups() as $group) {
            $names[] = $group->getName();
        }

        return $names;
    }

    /**
     * {@inheritdoc}
     */
    public function hasGroup($name): bool
    {
        return in_array($name, $this->getGroupNames());
    }

    /**
     * {@inheritdoc}
     */
    public function addGroup(Group $group): self
    {
        if (!$this->getGroups()->contains($group)) {
            $this->getGroups()->add($group);
        }

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function removeGroup(Group $group): self
    {
        if ($this->getGroups()->contains($group)) {
            $this->getGroups()->removeElement($group);
        }

        return $this;
    }

    public function hasRole(string $role): bool
    {
        if(parent::hasRole($role)) {
            return true;
        }

        foreach ($this->getGroups() as $group) {
            if($group->hasRole($role)) {
                return true;
            }
        }

        return false;
    }


    /**
     * {@inheritdoc}
     */
    public function setFirstname($firstname): self
    {
        $this->firstname = $firstname;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getFirstname(): ?string
    {
        return $this->firstname;
    }


    /**
     * {@inheritdoc}
     */
    public function setLastname($lastname): self
    {
        $this->lastname = $lastname;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getLastname(): ?string
    {
        return $this->lastname;
    }


    /**
     * {@inheritdoc}
     */
    public function getFullname(): string
    {
        if (!$this->getFirstname() && !$this->getLastname()) {
            return $this->getUsername();
        }

        return sprintf('%s %s', $this->getFirstname(), $this->getLastname());
    }

    public function hasStepVerificationCode(): bool
    {
        return !!$this->twoStepVerificationCode;
    }

    public function getDisplayName(): string
    {
        return $this->getFullname();
    }

    #[Assert\Callback]
    public function validate(ExecutionContextInterface $context)
    {

        $min = $this->userMinPassword;
        if ($this->hasRole('ROLE_SONATA_ADMIN')) {
            $min = $this->adminUserMinPassword;
        }

        $value = $this->plainPassword;

        if (null === $this->plainPassword) {
            return;
        }

        if (!\is_scalar($value) && !$value instanceof \Stringable) {
            throw new UnexpectedValueException($value, 'string');
        }

        $stringValue = (string) $value;

        try {
            $invalidCharset = !@mb_check_encoding($stringValue, 'UTF-8');
        } catch (\ValueError $e) {
            if (!str_starts_with(
                $e->getMessage(),
                'mb_check_encoding(): Argument #2 ($encoding) must be a valid encoding'
            )
            ) {
                throw $e;
            }

            $invalidCharset = true;
        }

        $length = $invalidCharset
            ? 0
            : match ('codepoints') {
                Length::COUNT_BYTES => \strlen($stringValue),
                Length::COUNT_CODEPOINTS => mb_strlen($stringValue, 'UTF-8'),
                Length::COUNT_GRAPHEMES => grapheme_strlen($stringValue),
            };

        if ($invalidCharset || false === ($length ?? false)) {
            $context->buildViolation(
                'This value does not match the expected {{ charset }} charset.'
            )
                ->atPath('plainPassword')
                ->setParameter('{{ value }}', $this->formatValue($stringValue))
                ->setParameter('{{ charset }}', 'UTF-8')
                ->setInvalidValue($value)
                ->setCode(Length::INVALID_CHARACTERS_ERROR)
                ->addViolation();

            return;
        }


        if ($length < $min) {
            $context->buildViolation(
                'password_too_short'
            )
                ->atPath('plainPassword')
                ->setParameter('{{ value }}', $this->formatValue($stringValue))
                ->setParameter('{{ limit }}', (string) $min)
                ->setParameter('{{ value_length }}', (string) $length)
                ->setInvalidValue($value)
                ->setPlural((int) $min)
                ->setCode(Length::TOO_SHORT_ERROR)
                ->addViolation();
        }
    }

    private function formatValue($value): string
    {
        if (\is_array($value)) {
            return 'array';
        }

        if (\is_string($value)) {
            return '"'.$value.'"';
        }

        if (\is_resource($value)) {
            return 'resource';
        }

        if (null === $value) {
            return 'null';
        }

        if (false === $value) {
            return 'false';
        }

        if (true === $value) {
            return 'true';
        }

        return (string) $value;
    }

}
